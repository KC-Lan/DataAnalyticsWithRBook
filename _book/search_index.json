[
["index.html", "資料科學與R語言", " 資料科學與R語言 曾意儒 Yi-Ju Tseng 2017-02-10 長庚大學資訊管理學系 大數據分析方法課程教學使用書籍，內容包括使用R語言完成資料讀取 (檔案、透過API擷取或爬蟲)、資料清洗與處理、探索式資料分析、資料視覺化、互動式資料呈現 (搭配Shiny) 與資料探勘等，並介紹R與Hadoop Ecosystems介接方法。 目前完成1-5與8-9章，PDF版本與epub版本格式微調中。 歡迎提供建議與回饋。 "],
["intro.html", "1 R語言101 1.1 什麼是R語言 1.2 函數使用 1.3 變數設定 1.4 執行視窗 1.5 資料型態 1.6 基本運算子 1.7 錯誤訊息 1.8 Help", " 1 R語言101 本章節介紹學習R語言的基本知識，包括基本指令操作、運算子介紹等。 1.1 什麼是R語言 R語言是一種自由軟體程式語言，主要用於資料分析與統計運算，2000年時終於發表R 1.0.0，有關R語言的發展歷史可參考維基百科。基本的R軟體已經內建多種統計及分析功能，其餘功能可以透過安裝套件（Packages）加載，眾多的套件使R的使用者可以【站在巨人的肩膀上(Standing on the shoulders of giants (Hal R. Varian, Google))】做資料分析，截至2017年1月為止，R軟體可另外安裝的套件數目共有10,000個以上 (R Studio報導)。常用的套件清單可參考各項網路資訊，如R Studio的整理：Quick list of useful R packages 安裝套件Package的方法如下： install.packages(&quot;套件名稱&quot;) 值得注意的是，套件名稱需要加上雙引號，舉例來說，若要安裝ggplot2套件，則要在R的Console視窗內輸入： install.packages(&quot;ggplot2&quot;) 若要載入已安裝的套件，則輸入library(套件名稱)，範例： library(ggplot2) 載入已安裝的套件時，不用在套件名稱前後加雙引號。 1.2 函數使用 在R中有許多內建函數，安裝套件後各套件也會提供各式各樣寫好的函數，函數使用方式為函數名稱(參數1,參數2,....)，以計算平均數為例，可使用mean()函數，範例如下: mean(c(1,2,3,4,5,6)) ##計算1~6的平均數 ## [1] 3.5 若想知道各函數所需參數，可使用?函數名稱觀看函數作者所撰寫的說明文件 ?mean 除非有指定參數名稱，函數的參數設定有順序性，如序列產生函數seq()，參數順序為from, to, by，代表序列起點、序列終點，以及相隔單位。 seq(from=1,to=9,by=2)#1~9，每隔2產生一數字 ## [1] 1 3 5 7 9 seq(1,9,2)#按照順序輸入參數，可省去參數名稱 ## [1] 1 3 5 7 9 seq(by=2,to=9,from=1)#若不想照順序輸入參數，需要指定參數名稱 ## [1] 1 3 5 7 9 1.3 變數設定 在開始深入學習R語言之前，首要任務是學習最基本的R程式碼：變數設定，在R語言中，主要使用&lt;-設定變數，設定方法為：變數名稱&lt;-變數內容(值)，雖然變數名稱可依箭頭方向放置於左側&lt;-或右側-&gt;，但為方便閱讀，變數名稱多放置於左側。 a&lt;-1 2-&gt;b a ## [1] 1 b ## [1] 2 R語言也接受使用=設定變數，此時變數名稱必須在左側，如：變數名稱=變數內容 c=1 c ## [1] 1 除了變數設定外，str()函數也為常用基本函數，str()用在檢查與總覽各類變數型態。 d&lt;-3 str(d) ## num 3 變數的命名有以下規則: 不可使用保留字，如break, else, FALSE, for, function, if, Inf, NA, NaN, next, repeat, return, TRUE, while等 開頭只能是英文字，或 . 大小寫敏感 1.4 執行視窗 R是可直譯的語言，也就是說，可以在執行視窗(Console)直接打程式碼，在視窗出現&gt;時，表示可輸入指令，若視窗出現+時，表示前面的程式碼還沒打完，必須鍵入完整的程式碼讓R執行。 1.5 資料型態 在R語言中，常用的資料型態包括數值 (numeric)、字串 (character)、布林變數 (logic)以及日期 (Date)等。 1.5.1 數值 numeric 數值包括整數（沒有小數點）與符點數（有小數點）的數值 num1&lt;-100 num2&lt;-1000.001 值得注意的是，若數值長度超過 2^53，必須導入bit64 package (Oehlschlägel 2015)，將數值長度上限提高為2^63，才能表示完整數值 print(2^53, digits=20) ## [1] 9007199254740992 print(2^53+1, digits=20) # +1後，數值仍與2^53相同 ## [1] 9007199254740992 library(bit64) # 導入bit64 package print(as.integer64(2)^53, digits=20) ## integer64 ## [1] 9007199254740992 print(as.integer64(2)^53+1, digits=20)# 導入bit64後，可得正確答案 ## integer64 ## [1] 9007199254740993 1.5.2 字串 character 用雙引號&quot;框起的文字會被儲存為字串格式，若在數字前後加上雙引號，數字也會被儲存為文字形式，無法進行數值的加減乘除等運算。 char1&lt;-&quot;abcTest&quot; char2&lt;-&quot;100&quot; char3&lt;-&quot;200&quot; #char2+char3 #會輸出Error message: non-numeric argument to binary operator 1.5.3 布林變數 logic 用於邏輯判斷，可使用大寫TRUE或T代表真，大寫FALSE或F代表假。 boolT&lt;-TRUE boolT1&lt;-T boolF&lt;-FALSE boolF1&lt;-F 1.5.4 日期 (Date) 用於表示日期，於資料分析中常用，使用Sys.Date()指定可得系統日期。 dateBook&lt;-Sys.Date() dateBook ## [1] &quot;2017-02-10&quot; 日期與字串的相關轉換操作可考慮使用簡單易懂的lubridate(Grolemund, Spinu, and Wickham 2016) package，如果想要將年/月/日格式的文字轉換為日期物件，可使用ymd()函數（y表年year，m表月month，d表日day），如果想要將月/日/年格式的文字轉換為日期物件，則使用mdy()函數，以此類推。 library(lubridate) ymd(&#39;2012/3/3&#39;) ## [1] &quot;2012-03-03&quot; mdy(&#39;3/3/2012&#39;) ## [1] &quot;2012-03-03&quot; 其他使用方式可參考 The Yhat Blog。 1.6 基本運算子 1.6.1 數學基本運算 在R中，數學運算與其他程式語言相同 加 + 減 - 乘 * 除 / 餘數 %% 次方 ^ num1&lt;-1 num2&lt;-100 num1+num2 ## [1] 101 num1-num2 ## [1] -99 num1*num2 ## [1] 100 num1/num2 ## [1] 0.01 100%%3 ##100除以3後所得餘數 ## [1] 1 2^3 ##2的3次方 ## [1] 8 1.6.2 進階數學函數 四捨五入 round() 無條件捨去 floor() 無條件進位 ceiling() num1&lt;-1.568 num2&lt;-2.121 round(num1,digits = 2) #四捨五入至小數點第二位 ## [1] 1.57 round(num2,digits = 1) #四捨五入至小數點第一位 ## [1] 2.1 floor(num1) ##1.568 ## [1] 1 ceiling(num2) ##2.121 ## [1] 3 1.6.3 邏輯運算 常用之邏輯判斷也可在R中直接使用 大於 &gt; 小於 &lt; 等於 ==，為了不與變數設定混淆，判斷兩變數是否相等，要用雙等號 大於等於 &gt;= 小於等於 &lt;= num1&lt;-1 num2&lt;-100 num1&gt;num2 ## [1] FALSE num1&lt;num2 ## [1] TRUE 文字字串也可比較大小 char1&lt;-&quot;abcTest&quot; char2&lt;-&quot;defTest&quot; char1&gt;char2 ## [1] FALSE 邏輯混合判斷，和JAVA等語言不同的是，在R中使用單符號即可表示且&amp;和或| 且 &amp; 或 | TRUE &amp; TRUE ## [1] TRUE TRUE &amp; FALSE ## [1] FALSE TRUE | TRUE ## [1] TRUE TRUE | FALSE ## [1] TRUE 反向布林變數! !TRUE ## [1] FALSE !FALSE ## [1] TRUE 1.7 錯誤訊息 Message：有可能的錯誤通知，程式會繼續執行 Warning：有錯誤，但是不會影響太多，程式會繼續執行 Error：有錯，而且無法繼續執行程式 Condition：可能會發生的情況 log(-1) ## Warning in log(-1): NaNs produced ## [1] NaN mena(NA) ## Error in eval(expr, envir, enclos): could not find function &quot;mena&quot; 錯誤訊息範例1: # Error: could not find function &quot;fetch_NBAPlayerStatistics&quot; # 找不到&quot;fetch_NBAPlayerStatistics&quot; function 可能原因：沒安裝或沒讀入SportsAnalytics package 錯誤訊息範例2: # Error in library(knitr): there is no package called &#39;knitr&#39; # 找不到&quot;knitr&quot; package 可能原因：沒安裝knitr package 1.8 Help R語言與套件均有完整的文件與範例可以參考，在R的執行視窗中，輸入?函數名稱或?套件名稱即可看到函數或套件的使用說明 ?ggplot2 ?ymd 除此之外，Stack Overflow中也有許多問答，可直接在網站中搜尋關鍵字與錯誤訊息。 References "],
["RDataStructure.html", "2 R 資料結構 2.1 向量 vector 2.2 因子 factor 2.3 列表 list 2.4 矩陣 matrix 2.5 資料框 data.frame 2.6 資料表 data.table 2.7 資料屬性查詢函數", " 2 R 資料結構 2.1 向量 vector 向量為一維資料的表現和儲存方式，用c()函數可定義向量，如： vec&lt;-c(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;) a~e為vec向量中的元素(element)，各元素向中的順序固定，a為vec向量中的第1個元素，b則為第2個元素，以此類推，若要將vec向量的第4個元素取出，可使用 vec[4] ## 第4個元素 ## [1] &quot;d&quot; 也可同時取出多個元素 vec[c(2,3)] ## 第2與第3個元素 ## [1] &quot;b&quot; &quot;c&quot; 此外，在同一向量中，所有元素之資料型態必須相同，如上述vec向量，元素均為文字型態。 和變數指定類似，向量中的元素也可以使用&lt;-重新指定 vec[3] ## [1] &quot;c&quot; vec[3]&lt;-&#39;z&#39; ##第三個元素值設定為“z” vec[3] ## [1] &quot;z&quot; 2.1.1 快速產生向量函數 若要產生連續向量，如1~20，可使用:來串連首字與最後一字 1:20 ## c(1,2,...,19,20) ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 或是使用seq()函數 seq(from=1,to=20,by=1) ##1~20，中間相隔1 ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 seq(from=1,to=50,by=2) ##1~50，中間相隔2 ## [1] 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 2.1.2 向量運算 向量也可直接做加減乘除運算，如 numvec&lt;-1:10 ## c(1,2,3,4,5,6,7,8,9,10) numvec+3 ## 所有元素+3 ## [1] 4 5 6 7 8 9 10 11 12 13 numvec*2 ## 所有元素*2 ## [1] 2 4 6 8 10 12 14 16 18 20 向量和向量也可做運算，如 numvec1&lt;-1:3 ## c(1,2,3) numvec2&lt;-4:6 ## c(4,5,6) numvec1+numvec2 ## [1] 5 7 9 numvec1*numvec2 ## [1] 4 10 18 2.2 因子 factor 因子是由向量轉換而成，多用於表示類別數據，如大學中有大學生、碩士班學生與博士班學生三種類別的學生，使用方法為factor(資料向量,levels=類別次序)，levels參數可設定各類別的次序 factor(c(&quot;大學生&quot;,&quot;碩士班學生&quot;,&quot;博士班學生&quot;), levels = c(&quot;大學生&quot;,&quot;碩士班學生&quot;,&quot;博士班學生&quot;)) ## [1] 大學生 碩士班學生 博士班學生 ## Levels: 大學生 碩士班學生 博士班學生 因子變量一但決定其類別的種類與數目時，通常不會再作更動，也就是任何新增的元素都要是大學生、碩士班學生與博士班學生其中一種。 2.3 列表 list 由於向量和因子都只能儲存一種元素，使用上彈性較不足，在R語言中，有一彈性很大的資料型態列表list，在列表中，元素可分屬不同資料類別，除了可包括數值與文字外，也可以包括資料集，如向量和因子等，更進階的使用，還可以包括矩陣與資料框。如要建立列表，可使用list()函數 listSample&lt;-list(Students=c(&quot;Tom&quot;,&quot;Kobe&quot;,&quot;Emma&quot;,&quot;Amy&quot;),Year=2017, Score=c(60,50,80,40),School=&quot;CGU&quot;) listSample ## $Students ## [1] &quot;Tom&quot; &quot;Kobe&quot; &quot;Emma&quot; &quot;Amy&quot; ## ## $Year ## [1] 2017 ## ## $Score ## [1] 60 50 80 40 ## ## $School ## [1] &quot;CGU&quot; 2.3.1 列表資料擷取 列表可用$符號做資料擷取 listSample$Students ##取得中表中的Students變量 ## [1] &quot;Tom&quot; &quot;Kobe&quot; &quot;Emma&quot; &quot;Amy&quot; 也可和向量一樣，使用索引值來擷取資料，和向量不同的是，若要取得值，要使用雙中括號[[]] listSample[[1]] ##取得中表中第一個變量的值 ## [1] &quot;Tom&quot; &quot;Kobe&quot; &quot;Emma&quot; &quot;Amy&quot; 如果只使用單中括號，回傳的資料型態會是列表list，並非列表中的值 listSample[1] ##取得中表中第一個變量（列表型態） ## $Students ## [1] &quot;Tom&quot; &quot;Kobe&quot; &quot;Emma&quot; &quot;Amy&quot; 2.3.2 列表資料編輯設定 列表資料也可和向量資料一樣，重新編輯設定 listSample[[1]] ## [1] &quot;Tom&quot; &quot;Kobe&quot; &quot;Emma&quot; &quot;Amy&quot; listSample[[1]]&lt;-c(&quot;小明&quot;,&quot;大雄&quot;,&quot;胖虎&quot;,&quot;小新&quot;,&quot;大白&quot;) ##將Students變量重新設定 listSample[[1]] ## [1] &quot;小明&quot; &quot;大雄&quot; &quot;胖虎&quot; &quot;小新&quot; &quot;大白&quot; 除了編輯以外，列表資料也能用$符號與&lt;-變數設定符號新增 listSample$Gender&lt;-c(&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;) ##新增Gender變量，並設定向量值 2.4 矩陣 matrix a &lt;- matrix(c(1:6), nrow=3, ncol=2) ##建立3x2的矩陣，分別填入1~6的值 a ## [,1] [,2] ## [1,] 1 4 ## [2,] 2 5 ## [3,] 3 6 2.5 資料框 data.frame 資料框是非常常見的二維資料格式，由一系列的欄位（Column）和列（Row）所組成，常見的Excel試算表也是類似的資料表現形式，可使用data.frame()來創建新的資料框 StuDF &lt;- data.frame(StuID=c(1,2,3,4,5), ##欄位名稱=欄位值 name=c(&quot;小明&quot;,&quot;大雄&quot;,&quot;胖虎&quot;,&quot;小新&quot;,&quot;大白&quot;), score=c(80,60,90,70,50)) StuDF ## StuID name score ## 1 1 小明 80 ## 2 2 大雄 60 ## 3 3 胖虎 90 ## 4 4 小新 70 ## 5 5 大白 50 如範例所示，每個欄位都有名稱（StuID, name, score），若沒有設定欄位名稱，R會自動指派V1Vn作為欄位名稱。在R中，每個欄位的資料型態必須相同，如StuID和score為數值型態，name為文字型態。每一列也有預設的列名，R自動依序指派1n作為列名。 如需檢查欄位名稱與列名，可使用colnames()和rownames() colnames(StuDF) ##欄位名稱 ## [1] &quot;StuID&quot; &quot;name&quot; &quot;score&quot; rownames(StuDF) ##列名 ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; 如需檢查個欄位之資料型別，可使用str()函數 str(StuDF) ## &#39;data.frame&#39;: 5 obs. of 3 variables: ## $ StuID: num 1 2 3 4 5 ## $ name : Factor w/ 5 levels &quot;大白&quot;,&quot;大雄&quot;,..: 4 2 5 3 1 ## $ score: num 80 60 90 70 50 2.6 資料表 data.table data.table是data.frame資料框型別的延伸，如要使用必須安裝data.table (Dowle et al. 2016) package，使用data.table讀取大型資料的速度比使用資料框快上數倍，進階處理語言也相當好用，在探索式資料分析章節Chapter 6會詳細介紹。其他詳細教學可見 Chapter 6.1 ，DataCamp也提供互動式教學課程，可自行參閱。 2.7 資料屬性查詢函數 資料屬性可透過下列函數查詢: 名稱 names() 各維度名稱 dimnames() 長度 length() 各維度長度 dim() 資料型態 class() 各類資料計數 table() 總覽資料 str() 透過names()函數，可取得各種資料之名稱 head(islands) ##R內建的資料 ## Africa Antarctica Asia Australia Axel Heiberg Baffin ## 11506 5500 16988 2968 16 184 head(names(islands)) ##顯示上述資料之資料名稱 ## [1] &quot;Africa&quot; &quot;Antarctica&quot; &quot;Asia&quot; &quot;Australia&quot; &quot;Axel Heiberg&quot; ## [6] &quot;Baffin&quot; 若為資料框，則會顯示行（欄位）名稱 head(USArrests) ##R內建的資料 ## Murder Assault UrbanPop Rape ## Alabama 13.2 236 58 21.2 ## Alaska 10.0 263 48 44.5 ## Arizona 8.1 294 80 31.0 ## Arkansas 8.8 190 50 19.5 ## California 9.0 276 91 40.6 ## Colorado 7.9 204 78 38.7 head(names(USArrests)) ##顯示上述資料之資料名稱 ## [1] &quot;Murder&quot; &quot;Assault&quot; &quot;UrbanPop&quot; &quot;Rape&quot; 透過dimnames()函數可顯示資料框列與行的名稱，先顯示列，再顯示行 dimnames(USArrests) ## [[1]] ## [1] &quot;Alabama&quot; &quot;Alaska&quot; &quot;Arizona&quot; &quot;Arkansas&quot; ## [5] &quot;California&quot; &quot;Colorado&quot; &quot;Connecticut&quot; &quot;Delaware&quot; ## [9] &quot;Florida&quot; &quot;Georgia&quot; &quot;Hawaii&quot; &quot;Idaho&quot; ## [13] &quot;Illinois&quot; &quot;Indiana&quot; &quot;Iowa&quot; &quot;Kansas&quot; ## [17] &quot;Kentucky&quot; &quot;Louisiana&quot; &quot;Maine&quot; &quot;Maryland&quot; ## [21] &quot;Massachusetts&quot; &quot;Michigan&quot; &quot;Minnesota&quot; &quot;Mississippi&quot; ## [25] &quot;Missouri&quot; &quot;Montana&quot; &quot;Nebraska&quot; &quot;Nevada&quot; ## [29] &quot;New Hampshire&quot; &quot;New Jersey&quot; &quot;New Mexico&quot; &quot;New York&quot; ## [33] &quot;North Carolina&quot; &quot;North Dakota&quot; &quot;Ohio&quot; &quot;Oklahoma&quot; ## [37] &quot;Oregon&quot; &quot;Pennsylvania&quot; &quot;Rhode Island&quot; &quot;South Carolina&quot; ## [41] &quot;South Dakota&quot; &quot;Tennessee&quot; &quot;Texas&quot; &quot;Utah&quot; ## [45] &quot;Vermont&quot; &quot;Virginia&quot; &quot;Washington&quot; &quot;West Virginia&quot; ## [49] &quot;Wisconsin&quot; &quot;Wyoming&quot; ## ## [[2]] ## [1] &quot;Murder&quot; &quot;Assault&quot; &quot;UrbanPop&quot; &quot;Rape&quot; 透過length()函數可顯示資料長度，包括向量與資料框，若資料行態為資料框，則會顯示行（欄位）數 length(islands) ## [1] 48 length(USArrests) ## [1] 4 透過dim()函數可顯示資料框列與行的長度，與dimnames()相同，先顯示列，後顯示行 dim(USArrests) ## [1] 50 4 使用class()函數可知道變數類別 class(1) ## [1] &quot;numeric&quot; class(&quot;Test&quot;) ## [1] &quot;character&quot; class(Sys.Date()) ## [1] &quot;Date&quot; 使用table()函數可知道向量中每個值出現幾次 iris$Species ##原始值 ## [1] setosa setosa setosa setosa setosa setosa ## [7] setosa setosa setosa setosa setosa setosa ## [13] setosa setosa setosa setosa setosa setosa ## [19] setosa setosa setosa setosa setosa setosa ## [25] setosa setosa setosa setosa setosa setosa ## [31] setosa setosa setosa setosa setosa setosa ## [37] setosa setosa setosa setosa setosa setosa ## [43] setosa setosa setosa setosa setosa setosa ## [49] setosa setosa versicolor versicolor versicolor versicolor ## [55] versicolor versicolor versicolor versicolor versicolor versicolor ## [61] versicolor versicolor versicolor versicolor versicolor versicolor ## [67] versicolor versicolor versicolor versicolor versicolor versicolor ## [73] versicolor versicolor versicolor versicolor versicolor versicolor ## [79] versicolor versicolor versicolor versicolor versicolor versicolor ## [85] versicolor versicolor versicolor versicolor versicolor versicolor ## [91] versicolor versicolor versicolor versicolor versicolor versicolor ## [97] versicolor versicolor versicolor versicolor virginica virginica ## [103] virginica virginica virginica virginica virginica virginica ## [109] virginica virginica virginica virginica virginica virginica ## [115] virginica virginica virginica virginica virginica virginica ## [121] virginica virginica virginica virginica virginica virginica ## [127] virginica virginica virginica virginica virginica virginica ## [133] virginica virginica virginica virginica virginica virginica ## [139] virginica virginica virginica virginica virginica virginica ## [145] virginica virginica virginica virginica virginica virginica ## Levels: setosa versicolor virginica table(iris$Species) ##統計結果 ## ## setosa versicolor virginica ## 50 50 50 使用str()函數可總覽變數資訊 str(iris) ## &#39;data.frame&#39;: 150 obs. of 5 variables: ## $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## $ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... str(listSample) ## List of 5 ## $ Students: chr [1:5] &quot;小明&quot; &quot;大雄&quot; &quot;胖虎&quot; &quot;小新&quot; ... ## $ Year : num 2017 ## $ Score : num [1:4] 60 50 80 40 ## $ School : chr &quot;CGU&quot; ## $ Gender : chr [1:5] &quot;M&quot; &quot;F&quot; &quot;M&quot; &quot;F&quot; ... References "],
["controlstructure.html", "3 控制流程 3.1 條件判斷 3.2 迴圈", " 3 控制流程 3.1 條件判斷 3.1.1 if-else敘述 if-else敘述使用在邏輯判斷，若需要依條件改變需要執行的程式碼，就會使用if-else，若if後所接邏輯判斷為真(TRUE)，就會執行if下方之程式碼，若為偽(FALSE)，則執行else下方之程式碼，若程式中沒有else片段，則不執行任何程式碼。 if與else下方的程式碼必須要使用{}將程式碼包起來，若程式碼只有一行，可省略{}，但為閱讀方便，建議不要省略{}。 舉例來說，若考試分數大於等於60分，則印出及格字樣，小於60分則印出不及格字樣，程式範例如下: score&lt;-59 if(score&gt;=60){ print(&quot;及格&quot;) }else{ print(&quot;不及格&quot;) } ## [1] &quot;不及格&quot; score&lt;-80 if(score&gt;=60){ print(&quot;及格&quot;) }else{ print(&quot;不及格&quot;) } ## [1] &quot;及格&quot; 3.1.2 if-else if-else 很多時候必須要使用多重邏輯判斷，若考試分數大於等於90分，印出優良，介於60到90分間，印出及格，小於60分則印出不及格，此時就會用到多重邏輯，使用多重邏輯時，會在if和else間新增邏輯區段else if，程式範例如下: score&lt;-95 if(score&gt;=90){ print(&quot;優秀&quot;) }else if(score&gt;=60){ print(&quot;及格&quot;) }else{ print(&quot;不及格&quot;) } ## [1] &quot;優秀&quot; if-else if-else敘述是有順序的，若在if敘述判斷為真，就算後方else if判斷也為真，也只會執行if區段的程式碼，如上述範例，95分大於等於90分(if邏輯)，也大於等於60分(else if邏輯)，但最後只印出優秀字樣。 3.1.3 巢狀if 巢狀if是指在if區段程式碼內包含其他if-else判斷，舉例來說，若國文分數與英文分數皆大於等於60分，印出全部及格，國文分數大於等於60分，英文小於60分，則印國文及格，英文再加油，以此類推，程式範例如下: CHscore&lt;-95 ##國文成績 ENscore&lt;-55 ##英文成績 if(CHscore&gt;=60){ if(ENscore&gt;=60){ print(&quot;全部及格&quot;) }else{ print(&quot;國文及格，英文再加油&quot;) } }else{ if(ENscore&gt;=60){ print(&quot;英文及格，國文再加油&quot;) }else{ print(&quot;全部不及格&quot;) } } ## [1] &quot;國文及格，英文再加油&quot; 3.1.4 ifelse() ifelse()函數可用最短的方式取代if-else敘述，使用方法為ifelse(邏輯判斷,判斷為真要執行的程式碼,判斷為偽要執行的程式碼)，依上述範例，重寫程式碼如下: score&lt;-80 ifelse(score&gt;=60,&quot;及格&quot;,&quot;不及格&quot;) ## [1] &quot;及格&quot; 值得注意的是，ifelse()可判斷向量，也就是可一次判斷多個元素 scoreVector&lt;-c(30,90,50,60,80) ifelse(scoreVector&gt;=60,&quot;及格&quot;, &quot;不及格&quot;) ## [1] &quot;不及格&quot; &quot;及格&quot; &quot;不及格&quot; &quot;及格&quot; &quot;及格&quot; 3.2 迴圈 3.2.1 for R語言的for迴圈寫法和其他語言不同，首先必須建立需要逐一執行的參數向量或序列，再使用for迴圈逐一執行，程式寫法為for (單一變數 in 參數向量){ 程式碼 }，範例如下: for (n in 1:10){ #n為單一變數，1:10為需要逐一執行的參數向量 print(n) } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 ## [1] 6 ## [1] 7 ## [1] 8 ## [1] 9 ## [1] 10 for迴圈也可和if-else函數合併使用，如: for (n in 1:10){ if(n%%2==0){ #偶數直接輸出數字 print(n) }else{ print(&quot;奇數&quot;) #奇數則輸出&quot;奇數&quot; } } ## [1] &quot;奇數&quot; ## [1] 2 ## [1] &quot;奇數&quot; ## [1] 4 ## [1] &quot;奇數&quot; ## [1] 6 ## [1] &quot;奇數&quot; ## [1] 8 ## [1] &quot;奇數&quot; ## [1] 10 3.2.2 while while函數則是在每次執行迴圈時檢查while邏輯判斷是否為真，若邏輯判斷為真，就會執行區段程式碼，若邏輯判斷為偽，則會結束迴圈執行。 x&lt;-0 while(x&lt;=5){ print(x) x&lt;-x+1 } ## [1] 0 ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 3.2.3 break 若遇特殊情形想結束迴圈執行，可使用break指令 for(n in 1:10){ if(n==5){ break ##一執行到5，跳出迴圈，不再執行之後的迴圈 } print(n) } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 3.2.4 next 若遇特殊情形想跳過迴圈執行，可使用next指令 for(n in 1:10){ if(n==5){ next ##跳過5，直接執行下一個迴圈 } print(n) } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 6 ## [1] 7 ## [1] 8 ## [1] 9 ## [1] 10 "],
["io.html", "4 資料讀取與匯出 4.1 從檔案匯入基本資料格式 4.2 從網路匯入資料 4.3 Facebook資料擷取 4.4 資料匯出", " 4 資料讀取與匯出 資料(Data)在維基百科的定義是values of qualitative or quantitative variables, belonging to a set of items.，一般來說，在資料分析前會經過多個步驟，包括資料匯入Chapter 4、資料清洗處理Chapter 5並轉換為Tidy data、資料分析Chapter 6、資料呈現與視覺化Chapter 7。 資料有多種可能來源，包括: 硬碟 網路下載 Open Data (API) 網頁裡 (爬蟲！) 任何地方 以下介紹由檔案、網路等來源匯入多種資料格式的匯入方式，以及建議的資料匯出方法。 4.1 從檔案匯入基本資料格式 4.1.1 Import Dataset功能 (RStudio) RStudio 1.0版後即提供很好的資料匯入介面，使用者可以不用撰寫任何程式碼，就能完成.csv、Excel以及SAS等檔案匯入。首先選取RStudio四分割視窗右上角的Environment標籤，選擇Import Dataset，就會出現檔案格式的選項 以csv檔案為例，在選單中選取From CSV，選取後會跳出資料匯入輔助視窗，點選Browse按鈕開啟檔案選取器，並點選欲匯入之文字檔案 檔案選取後，資料匯入輔助視窗有預覽功能，供使用者檢查資料匯入方法是否正確，若需調整各項參數，可利用下方Import Options的選項微調，最常用的調整功能是Delimiter分隔符號與First Row as Names首列是否為欄位名稱。 如果要匯入的檔案為tab分隔文字檔，一樣可以選擇.csv選項，再修改Delimiter參數為Tab即可。 資料匯入輔助視窗右下方Code Preview:子視窗中會自動產生資料匯入程式碼，如果未來想再使用視窗匯入，希望透過程式碼匯入，可以將此段程式碼複製貼上到R程式碼檔案(.R)，供後續分析使用。 4.1.2 分隔文字檔 .txt readr (Wickham, Hester, and Francois 2016) package提供完整的文字檔讀取功能，各讀取函數的第一個參數通常為檔案路徑與名稱，read_delim()函數可用來讀取所有用分隔符號分隔的文字檔案，以tab分隔為例，只需將delim參數設定為\\t，即可用tab將各欄位分開讀取。此外，col_names參數也常被使用，TRUE代表資料內有包含欄位名稱(通常在首列)，預設為TRUE，如果設定為FALSE，欄位名稱則會一順序被設定為 X1, X2, X3 …。 參數整理如下 (可用?read_delim指令閱讀官方說明)： file, 檔名 delim, 分隔符號 quote, 把欄位包起來的符號 escape_backslash, 預設FALSE，是否用/作為逃脫符號 escape_double, 預設TRUE，是否用quote符號作為逃脫符號 col_names, 是否有欄位名稱（表頭）（T/F） col_types, 每一個欄位的類別，用向量表示 comment, 備註標示符號，在備註標示符號之後的文字不會被讀入 skip, 要跳過幾行？ library(readr) dataset &lt;- read_delim(&quot;檔案路徑與名稱&quot;, delim=&quot;\\t&quot;) 4.1.3 CSV檔案 .csv readr (Wickham, Hester, and Francois 2016) package也提供CSV (逗號分隔)檔案的讀取功能，read_csv() library(readr) dataset &lt;- read_csv(&quot;檔案路徑與名稱&quot;) 4.1.4 Excel檔案 .xls readxl (Wickham 2016a) package提供讀取Excel檔案 (xls, xlsx)的函數read_excel()，除了常用的col_names參數外，也可使用sheet參數設定要讀取的工作表(sheet) library(readxl) dataset &lt;- read_excel(&quot;檔案路徑與名稱&quot;) 4.1.5 R物件 .rds R物件有檔案小與讀取快速的優點，如果在R程式處理資料後必須儲存一份以供後續分析的話，使用R物件儲存是最佳的方式，讀取R物件有多種函數可供選擇，推薦使用readRDS()函數 (參考資料:A better way of saving and loading objects in R) dataset &lt;- readRDS(&quot;檔案路徑與名稱&quot;) 4.1.6 R程式 .R source, 讀R的Obejct or script, 執行, ASCII (dump的相反) 4.1.7 純文字資料 (無分隔) readLines, 逐行讀取文字資料 4.1.8 其他格式 透過載入套件，R可讀入許多其他格式的檔案: MySQL RMySQL HDF5 rhdf5 Weka foreign Stata foreign SPSS Hmisc SAS Hmisc GIS rgdal Images jpeg Music tuneR 4.1.9 其他讀檔注意事項 讀檔的時候R會自動 跳過#開頭的任何行（Row） 判斷要讀幾行 判斷每個列（Column）的類別 把欄位包起來的符號 如果讀取時已指定Column類別以及把欄位包起來的符號，讀取速度會快很多。 4.2 從網路匯入資料 4.2.1 Open Data 開放資料 (Open data) 指的是一種經過挑選與許可的資料，這些資料不受著作權、專利權，以及其他管理機制所限制，可以開放給社會公眾，任何人都可以自由出版使用，不論是要拿來出版或是做其他的運用都不加以限制。Open data 運動希望達成的目標與開放原始碼、內容開放、開放獲取等其他「開放」運動類似。Open data 背後的核心思想由來已，但 Open data 這名詞直到近代才出現，拜網際網路崛起而為人所知，尤其是 Data.gov 等 Open data 政府組織的設立。維基百科 台灣政府從2011年開始大力推動開放政府與開放資料的概念，多個機關與縣市政府架設開放資料平台，供民眾擷取或再利用各項資料 政府資料開放平台 Data Taipei 開放資料 x 開放桃園 內政資料開放平台 Open Data常見的儲存方式為: CSVChapter 4.1.3、JSONChapter 4.2.3、XMLChapter 4.2.4，開放資料網站通常有提供民眾直接下載檔案的服務，針對可下載的CSV格式資料，可以下載完成後，透過上述由檔案匯入資料 Chapter 4.1方法匯入即可。 4.2.2 API (Application programming interfaces) 應用程式介面 Application programming interfaces (API) 是軟體系統不同組成部分銜接的約定。由於近年來軟體的規模日益龐大，常常需要把複雜的系統劃分成小的組成部分，編程介面的設計十分重要。程式設計的實踐中，編程介面的設計首先要使軟體系統的職責得到合理劃分。良好的介面設計可以降低系統各部分的相互依賴，提高組成單元的內聚性，降低組成單元間的耦合程度，從而提高系統的維護性和擴充功能性。Wiki 但若檔案更新頻繁，以臺北市開放認養動物資料資料為例，更新頻率為每日，若使用手動下載相當耗時，所以許多開放資料也提供透過API下載的服務，透過API下載的資料格式會是JSON格式Chapter 4.2.3，如臺北市開放認養動物API資訊所示，開放資料網站會提供資料集ID與資料RID 資料集ID: 紀錄資料的基本參數，如包含欄位、更新頻率等 資料RID: 資料集 並同時提供擷取範例，如果需要下載原始資料，可直接從範例複製貼上即可，如http://data.taipei/opendata/datalist/apiAccess?scope=resourceAquire&amp;rid=f4a75ba9-7721-4363-884d-c3820b0b917c 4.2.3 JSON格式檔案 JSON (Javascript Object Notation)是一種輕量級的資料交換語言 Wiki，特色如下: from application programming interfaces (APIs) JavaScript、Java、Node.js應用 一些NoSQL非關係型資料庫用JSON儲存格資料：MongoDB 資料儲存格式 Numbers (double) Strings (double quoted) Boolean (true or false) Array (ordered, comma separated enclosed in square brackets ) Object (unorderd, comma separated collection of key:value pairs in curley brackets {}) JSON檔案範例 許多Open Data也用JSON格式儲存，例如臺北市開放認養動物資料，根據資料的API資訊，可得資料擷取網址http://data.taipei/opendata/datalist/apiAccess?scope=resourceAquire&amp;rid=f4a75ba9-7721-4363-884d-c3820b0b917c 。 將JSON檔案匯入R可以使用jsonlite(Ooms, Temple Lang, and Hilaiel 2016) package，套件使用前必須安裝，安裝套件方法請參考Chapter 1，載入後，可使用fromJSON()函數載入JSON資料。 如需直接從API網址截取資料，需要載入RCurl(Temple Lang and CRAN team 2016) package，並使用getURL()函數處理資料擷取網址。 library(jsonlite) library(RCurl) PetData&lt;-fromJSON(getURL(&quot;http://data.taipei/opendata/datalist/apiAccess?scope=resourceAquire&amp;rid=f4a75ba9-7721-4363-884d-c3820b0b917c&quot;)) str(PetData) ## List of 1 ## $ result:List of 5 ## ..$ offset : int 0 ## ..$ limit : int 10000 ## ..$ count : int 304 ## ..$ sort : chr &quot;&quot; ## ..$ results:&#39;data.frame&#39;: 304 obs. of 20 variables: ## .. ..$ _id : chr [1:304] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ... ## .. ..$ Name : chr [1:304] &quot;Piggy&quot; &quot;爵士&quot; &quot;威利&quot; &quot;&quot; ... ## .. ..$ Sex : chr [1:304] &quot;雄&quot; &quot;雄&quot; &quot;雄&quot; &quot;雄&quot; ... ## .. ..$ Type : chr [1:304] &quot;犬&quot; &quot;犬&quot; &quot;犬&quot; &quot;貓&quot; ... ## .. ..$ Build : chr [1:304] &quot;小&quot; &quot;中&quot; &quot;中&quot; &quot;中&quot; ... ## .. ..$ Age : chr [1:304] &quot;成年&quot; &quot;成年&quot; &quot;成年&quot; &quot;老年&quot; ... ## .. ..$ Variety : chr [1:304] &quot;約克夏&quot; &quot;米克斯&quot; &quot;米克斯&quot; &quot;米克斯&quot; ... ## .. ..$ Reason : chr [1:304] &quot;民眾不擬續養&quot; &quot;動物救援&quot; &quot;民眾不擬續養&quot; &quot;民眾拾獲&quot; ... ## .. ..$ AcceptNum : chr [1:304] &quot;106020812&quot; &quot;106020702&quot; &quot;106020301&quot; &quot;106012706&quot; ... ## .. ..$ ChipNum : chr [1:304] &quot;900073000086495&quot; &quot;&quot; &quot;965000000263051&quot; &quot;&quot; ... ## .. ..$ IsSterilization: chr [1:304] &quot;已絕育&quot; &quot;未絕育&quot; &quot;已絕育&quot; &quot;未絕育&quot; ... ## .. ..$ HairType : chr [1:304] &quot;棕黑&quot; &quot;黑白&quot; &quot;黃白&quot; &quot;黃白&quot; ... ## .. ..$ Note : chr [1:304] &quot;皮膚病 心絲蟲(+)\\n哈囉~我的名字叫Piggy，我的個性活潑好動，聰明的我懂得指令，會坐下握手跟趴下，還會等等唷!這麼優質的我，還在等什&quot;| __truncated__ &quot;我是爵士\\n我長得很有個性吧\\n剛到動物之家所以我還是很緊張、防衛\\n雖然我酷酷的\\n但還是期待著有人來征服我的心喔！&quot; &quot;哈囉~我叫威利，我個性溫馴，但對陌生人有戒心，如果比較靠近可能會有攻擊的行為，所以要先多跟我培養感情唷!!&quot; &quot;疑似高處掉落 疑似無視覺 血尿&quot; ... ## .. ..$ Resettlement : chr [1:304] &quot;臺北市動物之家 收容編號106020812&quot; &quot;臺北市動物之家 收容編號106020702&quot; &quot;臺北市動物之家 收容編號106020301&quot; &quot;臺北市動物之家 收容編號：106012706&quot; ... ## .. ..$ Phone : chr [1:304] &quot;02-87913062&quot; &quot;02-87913062&quot; &quot;02-87913062&quot; &quot;02-87913062&quot; ... ## .. ..$ Email : chr [1:304] &quot;tcapoa8@mail.taipei.gov.tw&quot; &quot;tcapoa8@mail.taipei.gov.tw&quot; &quot;tcapoa8@mail.taipei.gov.tw&quot; &quot;tcapoa8@mail.taipei.gov.tw&quot; ... ## .. ..$ ChildreAnlong : chr [1:304] &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; ... ## .. ..$ AnimalAnlong : chr [1:304] &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; ... ## .. ..$ Bodyweight : chr [1:304] &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; ... ## .. ..$ ImageName : chr [1:304] &quot;http://163.29.39.183/uploads/images/medium/2d70e05e-d7b2-44e1-a5a2-f78d053a35bf.jpg&quot; &quot;http://163.29.39.183/uploads/images/medium/03d8404b-2698-42da-b9ef-5a94841fd7d5.jpg&quot; &quot;http://163.29.39.183/uploads/images/medium/6704940d-e354-478f-b136-2f5e167db2fd.jpg&quot; &quot;http://163.29.39.183/uploads/images/medium/e07b5bdb-5138-439d-b83e-9e0347a3cb70.jpg&quot; ... 由資料結構可知，經過fromJSON()函數匯入的JSON檔案被轉存為列表list的型態，且在result元素中包含五個子元素(offset, limit, count, sort, results)，其中，results子元素的類別為資料框data.frame，內含開放認養動物清單，因此，可使用$符號截取元素與子元素 head(PetData$result$results) ## _id Name Sex Type Build Age Variety Reason AcceptNum ChipNum ## 1 1 Piggy 雄 犬 小 成年 約克夏 民眾不擬續養 106020812 900073000086495 ## 2 2 爵士 雄 犬 中 成年 米克斯 動物救援 106020702 ## 3 3 威利 雄 犬 中 成年 米克斯 民眾不擬續養 106020301 965000000263051 ## 4 4 雄 貓 中 老年 米克斯 民眾拾獲 106012706 ## 5 5 妮妮 雌 犬 小 年輕 米克斯 民眾不擬續養 106012601 900073000086609 ## 6 6 桔福 雄 貓 中 成年 米克斯 動物管制 106012602 ## IsSterilization HairType ## 1 已絕育 棕黑 ## 2 未絕育 黑白 ## 3 已絕育 黃白 ## 4 未絕育 黃白 ## 5 未絕育 黃 ## 6 未絕育 黃白 ## Note ## 1 皮膚病 心絲蟲(+)\\n哈囉~我的名字叫Piggy，我的個性活潑好動，聰明的我懂得指令，會坐下握手跟趴下，還會等等唷!這麼優質的我，還在等什麼呢?快來動物之家認養我吧!! ## 2 我是爵士\\n我長得很有個性吧\\n剛到動物之家所以我還是很緊張、防衛\\n雖然我酷酷的\\n但還是期待著有人來征服我的心喔！ ## 3 哈囉~我叫威利，我個性溫馴，但對陌生人有戒心，如果比較靠近可能會有攻擊的行為，所以要先多跟我培養感情唷!! ## 4 疑似高處掉落 疑似無視覺 血尿 ## 5 皮膚病\\n你好~我的名字叫妮妮，雖然我目前的狀況不太好，但只要好好照顧、增強抵抗力，就可以改善了唷!\\n ## 6 臉傷 ## Resettlement Phone Email ## 1 臺北市動物之家 收容編號106020812 02-87913062 tcapoa8@mail.taipei.gov.tw ## 2 臺北市動物之家 收容編號106020702 02-87913062 tcapoa8@mail.taipei.gov.tw ## 3 臺北市動物之家 收容編號106020301 02-87913062 tcapoa8@mail.taipei.gov.tw ## 4 臺北市動物之家 收容編號：106012706 02-87913062 tcapoa8@mail.taipei.gov.tw ## 5 臺北市動物之家 收容編號106012601 02-87913062 tcapoa8@mail.taipei.gov.tw ## 6 臺北市動物之家 收容編號：106012602 02-87913062 tcapoa8@mail.taipei.gov.tw ## ChildreAnlong AnimalAnlong Bodyweight ## 1 ## 2 ## 3 ## 4 ## 5 ## 6 ## ImageName ## 1 http://163.29.39.183/uploads/images/medium/2d70e05e-d7b2-44e1-a5a2-f78d053a35bf.jpg ## 2 http://163.29.39.183/uploads/images/medium/03d8404b-2698-42da-b9ef-5a94841fd7d5.jpg ## 3 http://163.29.39.183/uploads/images/medium/6704940d-e354-478f-b136-2f5e167db2fd.jpg ## 4 http://163.29.39.183/uploads/images/medium/e07b5bdb-5138-439d-b83e-9e0347a3cb70.jpg ## 5 http://163.29.39.183/uploads/images/medium/24abcf2b-9b48-43f3-afd8-d027be7de948.jpg ## 6 http://163.29.39.183/uploads/images/medium/af55b5d8-6953-4ec8-9882-b692bf130b81.jpg results資料框中包含20個欄位，可以像分析資料框一樣，針對此資料框做分析，舉例來說，可分析各項開放認養理由出現次數 table(PetData$result$results$Reason) ## ## 動物救援 動物管制 民眾不擬續養 民眾拾獲 ## 28 104 108 42 22 分析可知開放認養理由以動物管制與未填寫居多。 如果需要將資料框轉換成JSON檔案可以使用jsonlite package所提供的toJSON()函數。 myjson &lt;- toJSON(iris, pretty=TRUE) str(myjson) ## Class &#39;json&#39; chr &quot;[\\n {\\n \\&quot;Sepal.Length\\&quot;: 5.1,\\n \\&quot;Sepal.Width\\&quot;: 3.5,\\n \\&quot;Petal.Length\\&quot;: 1.4,\\n \\&quot;Petal.Width\\&quot;: 0.2,\\n \\&quot;Spe&quot;| __truncated__ 4.2.4 XML 可延伸標記式語言 Extensible markup language 描述結構化資料的語言 處理XML檔案是網頁Html爬蟲的基礎 Components Markup 標記 - labels that give the text structure Content 內文 - the actual text of the document XML Wiki Tags, elements and attributes Tags correspond to general labels Start tags &lt;breakfast_menu&gt;, &lt;price&gt; End tags &lt;/breakfast_menu&gt;,&lt;/price&gt; Empty tags &lt;line-break /&gt; Elements are specific examples of tags &lt;name&gt;Belgian Waffles&lt;/name&gt; Attributes are components of the label &lt;book category=&quot;web&quot;&gt; 許多Open Data也用XML格式儲存，例如臺北市水質監測資訊。如需將XML檔案匯入R中，需要安裝XML (Temple Lang and CRAN Team 2016) package，使用xmlTreeParse()函數將檔案匯入。 library(XML) waterQ &lt;- xmlTreeParse(&quot;http://data.taipei/opendata/datalist/datasetMeta/download?id=961ca397-4a59-45e8-b312-697f26b059dc&amp;rid=190796c8-7c56-42e0-8068-39242b8ec927&quot;,useInternal=TRUE) rootNode &lt;- xmlRoot(waterQ) #access the top node 使用xpathSApply()函數取得指定標籤內的資料 #取得所有&quot;code_name&quot;標籤內的資料 xpathSApply(rootNode,&quot;//code_name&quot;,xmlValue)[1:10] ## [1] &quot;雙溪淨水場&quot; &quot;衛理女中&quot; ## [3] &quot;雙溪國小 &quot; &quot;華興加壓站&quot; ## [5] &quot;長興淨水場&quot; &quot;市政大樓&quot; ## [7] &quot;市議會&quot; &quot;捷運忠孝復興站&quot; ## [9] &quot;南港高工&quot; &quot;南港加壓站&quot; #取得各監測站的經度 xpathSApply(rootNode,&quot;//longitude&quot;,xmlValue)[1:10] ## [1] &quot;121.56094&quot; &quot;121.54401&quot; &quot;121.55557&quot; &quot;121.53476&quot; &quot;121.54043&quot; &quot;121.55661&quot; ## [7] &quot;121.55360&quot; &quot;121.53551&quot; &quot;121.59892&quot; &quot;121.60829&quot; 4.2.5 網頁爬蟲 Webscraping 由於不是每個網站都提供API，但網頁上卻有你想要分析的資料（像是ptt推文！？），除了人工複製貼上以外，也可以將網頁處理程式化，以程式化的方式擷取網頁資料就叫做網頁爬蟲（Webscraping）（Webscraping Wiki）。在R中可以直接把HTML檔案當作XML檔案處理分析，也可使用rvest(Wickham 2016c) package輔助爬蟲程式撰寫。 此外，網頁爬蟲可能耗費很多網頁流量和資源，所以在許多網站被視為非法行為，如果一次讀太多太快，很可能被鎖IP。 以長庚資管系網站為例，可直接逐行讀取 readLines() htmlCode &lt;-readLines(url(&quot;http://im.cgu.edu.tw/bin/home.php&quot;)) ## Warning in readLines(url(&quot;http://im.cgu.edu.tw/bin/home.php&quot;)): incomplete final ## line found on &#39;http://im.cgu.edu.tw/bin/home.php&#39; htmlCode[1:5] ## [1] &quot;&lt;!DOCTYPE html PUBLIC \\&quot;-//W3C//DTD XHTML 1.0 Transitional//EN\\&quot; \\&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\&quot;&gt;&quot; ## [2] &quot;&lt;html xmlns=\\&quot;http://www.w3.org/1999/xhtml\\&quot; lang=\\&quot;zh-tw\\&quot;&gt;&quot; ## [3] &quot;&lt;head&gt;&quot; ## [4] &quot;&lt;meta http-equiv=\\&quot;Content-Type\\&quot; content=\\&quot;text/html; charset=utf-8\\&quot; /&gt;&quot; ## [5] &quot;&lt;meta http-equiv=\\&quot;X-UA-Compatible\\&quot; content=\\&quot;IE=EmulateIE7\\&quot; /&gt;&lt;meta name=\\&quot;keywords\\&quot; content=\\&quot;請填寫網站關鍵記事，用半角逗號(,)隔開\\&quot; /&gt;&quot; 讀取完網頁後，使用用XML工具分析擷取網頁 (XML package) library(httr) html &lt;- htmlTreeParse(GET(&quot;http://im.cgu.edu.tw/bin/home.php&quot;), useInternalNodes=T) ## No encoding supplied: defaulting to UTF-8. xpathSApply(html, &quot;//title&quot;, xmlValue) ## [1] &quot;長庚大學 資訊管理學系 &quot; xpathSApply(html, &quot;//span[@class=&#39;ptname &#39;]&quot;, xmlValue) ## [1] &quot;畢業專題成果展&quot; &quot;碩士班計畫書審查&quot; &quot;畢業校友資料登錄&quot; ## [4] &quot;長庚大學首頁&quot; &quot;校務資訊系統&quot; &quot;人事教育訓練資訊網&quot; ## [7] &quot;國內資管系所&quot; &quot;碩博士論文網&quot; &quot;資管系內部行政系統&quot; ## [10] &quot;資管系分機表&quot; &quot;資管系學會&quot; &quot;TA課後輔導值班表&quot; ## [13] &quot;學生webmail&quot; &quot;工商管理學系/研究所&quot; &quot;工業設計學系/研究所&quot; ## [16] &quot;管理學院&quot; &quot;醫務管理學系/研究所&quot; &quot;商管專業學院&quot; ## [19] &quot;企業管理研究所博士班&quot; &quot;長庚大學行事曆&quot; 除了把HTML檔案當作XML處理外，rvest(Wickham 2016c) package是R語言中最場被使用的爬蟲套件，使用前一樣需要安裝與載入 install.packages(&quot;rvest&quot;) ##安裝 library(rvest) ##載入 載入rvest套件後，經由以下步驟進行網站解析： 使用read_html(“欲擷取的網站網址”)函數讀取網頁 使用html_nodes()函數擷取所需內容 (條件為CSS或xpath標籤) 使用html_text()函數處理/清洗擷取內容，留下需要的資料 使用html_attr()函數擷取資料參數（如連結url） YahooNewsurl=&quot;https://tw.news.yahoo.com/&quot; news_title = read_html(YahooNewsurl) %&gt;% html_nodes(&quot;.tpl-title a&quot;) %&gt;% html_text() news_url = read_html(YahooNewsurl) %&gt;% html_nodes(&quot;.tpl-title a&quot;) %&gt;% html_attr(&quot;href&quot;) Yahoo_news = data.frame(title = news_title, url=news_url) head(Yahoo_news) title url 1 曾1妻5妾好風光 男星慘賣豪宅還債 /從1妻5妾的風光到變賣豪宅還債-網友噓雷洪：活該-091741737.html 2 美報告：美棄「一中」台灣更危險 /美報告-美拋棄-中-台灣處境更危險-081036215.html 3 藍色凍蕃薯！1張圖看寒流有多冷 /霸王級寒流再襲台-張圖看懂這波寒流有多強-101500692.html 4 他被妻子戴綠帽 對象竟是親弟弟 /他被妻子戴綠帽-對象竟是親弟弟-072010033.html 5 匆忙推出移民禁令 他後悔了 /匆忙推移民禁令-美國土安全部長表後悔-044517088.html 6 蔡政府對釣魚台態度 國民黨憂美日安保質變 /蔡政府對釣魚台態度-國民黨憂美日安保質變-160200179.html 在html_nodes()、html_text()和html_attr()函數中，擷取條件的撰寫會因網頁語法不同而有差異，必須要使用Google Chrome開發工具等工具輔助觀察需要擷取資料的條件。以上述Yahoo新聞為例，需要擷取的資料所在HTML片段如下： &lt;ul class=&quot;tpl-title yom-list list-style-none&quot; id=&quot;yui_3_9_1_1_1486568229946_2408&quot;&gt; &lt;li class=&quot;list-story first&quot; id=&quot;yui_3_9_1_1_1486568229946_2407&quot;&gt; &lt;div class=&quot;txt&quot; id=&quot;yui_3_9_1_1_1486568229946_2406&quot;&gt; &lt;a href=&quot;/從1妻5妾的風光到變賣豪宅還債-網友噓雷洪：活該-091741737.html&quot; class=&quot;title &quot; data-ylk=&quot;pkg:96a0ca11-47bc-3100-81ad-0a288707f150;ver:60cdb126-ee0c-11e6-bb9b-8a777738a932;lt:i;pos:1;&quot; data-rapid_p=&quot;1&quot;&gt;曾1妻5妾好風光 男星慘賣豪宅還債&lt;/a&gt; &lt;cite id=&quot;yui_3_9_1_1_1486568229946_2405&quot;&gt; &lt;span class=&quot;provider&quot; id=&quot;yui_3_9_1_1_1486568229946_2404&quot;&gt;Yahoo奇摩娛樂新聞&lt;/span&gt; &lt;/cite&gt;&lt;/div&gt;&lt;/li&gt; .... 觀察上述程式碼可已發現新聞清單被包含在ul標籤下，且css class為tpl-title yom-list list-style-none，所以這邊可以使用第一個classtpl-title為篩選條件。網頁爬蟲需要多做觀察與練習，才可熟知篩選技巧。 其他爬蟲相關參考資源: 網路爬蟲實作 - 用 r 語言打造自己的爬蟲程式 rvest GitHub R Bloggers 有很多爬蟲範例（英文） Ptt爬蟲實作 大數學堂 網頁爬蟲課程 4.3 Facebook資料擷取 Facebook提供Graph API，讓應用程式可透過API讀取與寫入 Facebook相關資料，Graph API會根據篩選條件，回傳JSON格式的資料。除此之外，Facebook還提供Graph API Explorer，讓程式開發人員可以測試資料撈取方法和結果。 在開始使用Graph API之前，必須要取得自己的access token (存取權杖)，Graph API Explorer工具提供Get Token按鈕(通常在視窗右上角)，可以讓開發者在不用新增應用程式(Application)的情況下取得暫時的access token。 有關Facebook access token的詳細介紹，可參考官方文件 4.3.1 Graph API in R library(httr) token&lt;-&quot;your token&quot; #將access token複製到此處 FBData = GET( paste0(&quot;https://graph.facebook.com/v2.8/tsaiingwen?fields=posts%7Bmessage%7D&amp;access_token=&quot;, token)) names(FBData) ## [1] &quot;url&quot; &quot;status_code&quot; &quot;headers&quot; &quot;all_headers&quot; &quot;cookies&quot; &quot;content&quot; &quot;date&quot; ## [8] &quot;times&quot; &quot;request&quot; &quot;handle&quot; json1 = content(FBData) names(json1) ## [1] &quot;posts&quot; &quot;id&quot; names(json1$posts) ## [1] &quot;data&quot; &quot;paging&quot; head(json1$posts$data,3) [[1]] [[1]]$message [1] &quot;「國機國造」不是夢想，而是一個行動。今天啟動的高級教練機「自研自製」任務，是國防自主的重要里程碑。我們不只要讓戰機起飛，更要讓產業起飛。\\n\\n國防產業同樣是「5+2」關鍵產業之一，所以，除了要如期、如質完成新式高教機的「自研自製」外，也要重新厚植台灣的航太工業人才鏈，以及加強相關產業的連結、轉型和升級。\\n\\n國防自主沒有捷徑，只有努力再努力、堅持再堅持。今天，我們重新跨出歷史性的一步。&quot; [[1]]$id [1] &quot;46251501064_10154006497451065&quot; [[2]] [[2]]$message [1] &quot;今天，智慧機械推動辦公室正式啟動。「落實產學合作」、「支持創新研發」、「強化行銷通路」是辦公室的三項重點任務。\\n\\n智慧機械是「5+2」關鍵產業的其中之一。政府有決心。我相信，所有的機械業者－無論做的是螺桿、刀庫、控制器或是工作母機，大家也都有很強的決心，要走向創新、走向智慧化、走向品牌。我們是一個團隊，我們一起加油！&quot; [[2]]$id [1] &quot;46251501064_10154006456601065&quot; [[3]] [[3]]$message [1] &quot;今天來向台商拜個晚年。我也邀請台商朋友們，共同參與台灣經濟轉型升級的世紀工程。\\n\\n無論是擴大對國內的投資，或者配合新南向政策，前進海外深耕佈局，我期待跟台商朋友們一起努力，群策群力，克服困難和瓶頸，為台灣經濟發展打開全新的局面。&quot; [[3]]$id [1] &quot;46251501064_10154001652641065&quot; json1$posts$data[[1]]$message ##[1] &quot;「國機國造」不是夢想，而是一個行動。今天啟動的高級教練機「自研自製」任務，是國防自主的重要里程碑。我們不只要讓戰機起飛，更要讓產業起飛。\\n\\n國防產業同樣是「5+2」關鍵產業之一，所以，除了要如期、如質完成新式高教機的「自研自製」外，也要重新厚植台灣的航太工業人才鏈，以及加強相關產業的連結、轉型和升級。\\n\\n國防自主沒有捷徑，只有努力再努力、堅持再堅持。今天，我們重新跨出歷史性的一步。&quot; 除了直接使用Graph API外，也可使用Rfacebook(???) package來讀取Facebook資料 Use Rfacebook To Get Info from tsaiingwen Page library(Rfacebook) token&lt;-&quot;your token&quot; #將token複製到此處 getPage(&quot;tsaiingwen&quot;, token,n = 5) 5 posts from_id from_name 1 46251501064 蔡英文 Tsai Ing-wen 2 46251501064 蔡英文 Tsai Ing-wen 3 46251501064 蔡英文 Tsai Ing-wen 4 46251501064 蔡英文 Tsai Ing-wen 5 46251501064 蔡英文 Tsai Ing-wen message 1 「國機國造」不是夢想，而是一個行動。今天啟動的高級教練機「自研自製」任務，是國防自主的重要里程碑。我們不只要讓戰機起飛，更要讓產業起飛。\\n\\n國防產業同樣是「5+2」關鍵產業之一，所以，除了要如期、如質完成新式高教機的「自研自製」外，也要重新厚植台灣的航太工業人才鏈，以及加強相關產業的連結、轉型和升級。\\n\\n國防自主沒有捷徑，只有努力再努力、堅持再堅持。今天，我們重新跨出歷史性的一步。 2 今天，智慧機械推動辦公室正式啟動。「落實產學合作」、「支持創新研發」、「強化行銷通路」是辦公室的三項重點任務。\\n\\n智慧機械是「5+2」關鍵產業的其中之一。政府有決心。我相信，所有的機械業者－無論做的是螺桿、刀庫、控制器或是工作母機，大家也都有很強的決心，要走向創新、走向智慧化、走向品牌。我們是一個團隊，我們一起加油！ 3 今天來向台商拜個晚年。我也邀請台商朋友們，共同參與台灣經濟轉型升級的世紀工程。\\n\\n無論是擴大對國內的投資，或者配合新南向政策，前進海外深耕佈局，我期待跟台商朋友們一起努力，群策群力，克服困難和瓶頸，為台灣經濟發展打開全新的局面。 4 「快了」！雞年通機捷，等待很值得。大年初四，我來看看機場捷運通車前的準備，也坐捷運到中壢，跟鄉親拜年問好。 5 雞年初三發福袋\\n\\n臺中豐原慈濟宮、彰化溪湖福安宮、雲林北港朝天宮、嘉義九華山地藏庵 created_time type 1 2017-02-07T08:02:45+0000 photo 2 2017-02-07T07:18:00+0000 photo 3 2017-02-05T07:12:52+0000 photo 4 2017-01-31T08:37:42+0000 photo 5 2017-01-30T11:41:07+0000 photo link 1 https://www.facebook.com/tsaiingwen/photos/a.390960786064.163647.46251501064/10154006497206065/?type=3 2 https://www.facebook.com/tsaiingwen/photos/a.390960786064.163647.46251501064/10154006455396065/?type=3 3 https://www.facebook.com/tsaiingwen/photos/a.390960786064.163647.46251501064/10154001652641065/?type=3 4 https://www.facebook.com/tsaiingwen/photos/a.390960786064.163647.46251501064/10153989357181065/?type=3 5 https://www.facebook.com/tsaiingwen/photos/a.390960786064.163647.46251501064/10153987089121065/?type=3 id likes_count comments_count shares_count 1 46251501064_10154006497451065 2013 125 43 2 46251501064_10154006456601065 2217 163 57 3 46251501064_10154001652641065 9416 920 163 4 46251501064_10153989358051065 34116 1574 373 5 46251501064_10153987095776065 20592 665 269 How To Get More Data? Use since and until Set the dates vector lastDate&lt;-Sys.Date() DateVector&lt;-seq(as.Date(&quot;2017-01-01&quot;),lastDate,by=&quot;5 days&quot;) DateVectorStr&lt;-as.character(DateVector) DateVectorStr ## &quot;2017-01-01&quot; &quot;2017-01-06&quot; &quot;2017-01-11&quot; &quot;2017-01-16&quot; &quot;2017-01-21&quot; &quot;2017-01-26&quot; &quot;2017-01-31&quot; &quot;2017-02-05&quot; totalPage&lt;-NULL token&lt;-&#39;your token&#39; numberOfPost&lt;-30 for(i in 1:(length(DateVectorStr)-1)){ tempPage&lt;-getPage(&quot;tsaiingwen&quot;, token, since = DateVectorStr[i],until = DateVectorStr[i+1]) totalPage&lt;-rbind(totalPage,tempPage) } nrow(totalPage) ## 4 posts 8 posts 10 posts 3 posts 2 posts 14 posts 1 posts ## [1] 42 Other Useful Methods in Rfacebook Packages getUser() getPost() getLikes() Check https://github.com/pablobarbera/Rfacebook ?Rfacebook 4.4 資料匯出 在R中完成資料處理後，有多種匯出選擇，如果是要匯出供他人在其他環境(如Excel)使用，建議匯出成tab分隔的文字檔(.txt)或是逗號分隔的文字檔(.csv)；但若是要在R的環境繼續使用，建議匯出成R物件 (.rds)，除了可保留欄位型別設定外，讀取速度與檔案大小皆優於文字檔案。 4.4.1 文字檔 .txt 使用write.table()函數寫入檔案，需要參數有 x 要匯出的檔案，通常為matrix或是data.frame格式 file 檔案名稱 append T/F TRUE表示在檔案後端加入文字，F表示直接覆蓋原始檔案 (預設F) quote 是否需要用雙引號將字串包起 (預設T) sep 分隔符號 (預設空白) eol 換行符號 na 表示空值的字串 dec 小數點表示法 row.names T/F 是否需要輸出row names col.names T/F 是否需要輸出column names qmethod 逃脫字串設定 fileEncoding 編碼設定 write.table(iris,file=&quot;iris.txt&quot;,sep=&quot;,&quot;,row.names = F,col.names = T) 4.4.2 CSV檔 .csv 與write.table()類似，使用write.csv()函數寫入檔案 write.csv(iris,file=&quot;iris.csv&quot;,row.names = F) 4.4.3 R物件 .rds 若是要在R的環境繼續使用，建議匯出成R物件檔案(.rds) saveRDS(iris,&quot;iris.rds&quot;) References "],
["manipulation.html", "5 資料處理與清洗 5.1 Tidy Data 5.2 資料型別轉換處理 5.3 文字字串處理 5.4 子集Subset 5.5 排序 5.6 資料組合 5.7 長表與寬表 5.8 遺漏值處理 5.9 綜合練習範例Case study", " 5 資料處理與清洗 5.1 Tidy Data Each column is a variable. Each row is an observation. 一個欄位（Column）內只有一個數值，最好要有凡人看得懂的Column Name 不同的觀察值應該要在不同行（Raw） 一張表裡面，有所有分析需要的資料 如果一定要多張表，中間一定要有index可以把表串起來 One file, one table 5.2 資料型別轉換處理 在資料型態章節Chapter 1.5中，曾介紹數值 (numeric)、字串 (character)、布林變數 (logic)以及日期 (Date)等資料型態，在此章節中將介紹如何檢查變數型別與各型別的轉換。 5.2.1 資料型別檢查 使用以下is.函數檢查資料型別，回傳布林變數，若為真，回傳TRUE 是否為數字 is.numeric(變數名稱) 是否為文字 is.character(變數名稱) 是否為布林變數 is.logical(變數名稱) num&lt;-100 cha&lt;-&#39;200&#39; boo&lt;-T is.numeric(num) ## [1] TRUE is.numeric(cha) ## [1] FALSE is.character(num) ## [1] FALSE is.character(cha) ## [1] TRUE is.logical(boo) ## [1] TRUE 或使用class(變數名稱)函數，直接回傳資料型別 class(num) ## [1] &quot;numeric&quot; class(cha) ## [1] &quot;character&quot; class(boo) ## [1] &quot;logical&quot; class(Sys.Date()) ## [1] &quot;Date&quot; 5.2.2 資料型別轉換 使用以下as.函數轉換型別 轉換為數字 as.numeric(變數名稱) 轉換為文字 as.character(變數名稱) 轉換為布林變數 as.logical(變數名稱) as.numeric(cha) ## [1] 200 as.numeric(boo) ## [1] 1 as.character(num) ## [1] &quot;100&quot; as.character(boo) ## [1] &quot;TRUE&quot; 若無法順利完成轉換，會回傳空值NA，並出現警告訊息Warning: NAs introduced by coercion，Warning: 強制變更過程中產生了 NA as.numeric(&quot;abc&quot;) ## Warning: NAs introduced by coercion ## [1] NA 日期的轉換則建議使用lubridate(Grolemund, Spinu, and Wickham 2016) package，如果想要將年/月/日格式的文字轉換為日期物件，可使用ymd()函數（y表年year，m表月month，d表日day），如果想要將月/日/年格式的文字轉換為日期物件，則使用mdy()函數，以此類推。 library(lubridate) ymd(&#39;2012/3/3&#39;) ## [1] &quot;2012-03-03&quot; mdy(&#39;3/3/2012&#39;) ## [1] &quot;2012-03-03&quot; 5.3 文字字串處理 5.3.1 基本處理 切割 strsplit() 子集 substr() 大小寫轉換 toupper() tolower() 兩文字連接 paste() paste0() 文字取代 gsub() 前後空白去除 str_trim() 需安裝stringr(Wickham 2016d) package strsplit (&quot;Hello World&quot;,&quot; &quot;) ## [[1]] ## [1] &quot;Hello&quot; &quot;World&quot; toupper(&quot;Hello World&quot;) ## [1] &quot;HELLO WORLD&quot; tolower(&quot;Hello World&quot;) ## [1] &quot;hello world&quot; paste(&quot;Hello&quot;, &quot;World&quot;, sep=&#39;&#39;) ## [1] &quot;HelloWorld&quot; substr(&quot;Hello World&quot;, start=2,stop=4) ## [1] &quot;ell&quot; gsub(&quot;o&quot;,&quot;0&quot;,&quot;Hello World&quot;) ## [1] &quot;Hell0 W0rld&quot; library(stringr) str_trim(&quot; Hello World &quot;) ## [1] &quot;Hello World&quot; 5.3.2 搜尋字串 搜尋字串函數通常使用在比對文字向量，文字比對有分大小寫，依照回傳值的型態不同，有兩種常用函數，grep()與grepl(): 回傳符合條件之向量位置(index) grep(搜尋條件,要搜尋的向量) 回傳每個向量是否符合條件(TRUE or FALSE) grepl(搜尋條件,要搜尋的向量) grep(&quot;A&quot;,c(&quot;Alex&quot;,&quot;Tom&quot;,&quot;Amy&quot;,&quot;Joy&quot;,&quot;Emma&quot;)) ##在姓名文字向量中尋找A，回傳包含&quot;A&quot;之元素位置 ## [1] 1 3 grepl(&quot;A&quot;,c(&quot;Alex&quot;,&quot;Tom&quot;,&quot;Amy&quot;,&quot;Joy&quot;,&quot;Emma&quot;)) ##在姓名文字向量中尋找A，回傳各元素是否包含&quot;A&quot; ## [1] TRUE FALSE TRUE FALSE FALSE grepl(&quot;a&quot;,c(&quot;Alex&quot;,&quot;Tom&quot;,&quot;Amy&quot;,&quot;Joy&quot;,&quot;Emma&quot;)) ##在姓名文字向量中尋找a，回傳各元素是否包含&quot;a&quot; ## [1] FALSE FALSE FALSE FALSE TRUE 5.4 子集Subset 5.4.1 一維資料 (向量) 在向量章節{#vector}有介紹使用[]取出單一或多個元素的方法 letters ##R語言內建資料之一 ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; ## [20] &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; letters[1] ##取出letters向量的第一個元素 ## [1] &quot;a&quot; letters[1:10] ##取出letters向量的前十個元素 ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; letters[c(1,3,5)] ##取出letters向量的第1,3,5個元素 ## [1] &quot;a&quot; &quot;c&quot; &quot;e&quot; letters[c(-1,-3,-5)] ##取出letters向量除了第1,3,5個元素之外的所有元素 ## [1] &quot;b&quot; &quot;d&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; &quot;t&quot; &quot;u&quot; &quot;v&quot; ## [20] &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; 若想要快速取得一向量的開頭與結尾元素，可使用head()和tail()函數 head(letters,5) ##取出letters向量的前五個元素 ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; tail(letters,3) ##取出letters向量的後三個元素 ## [1] &quot;x&quot; &quot;y&quot; &quot;z&quot; 5.4.2 二維資料 最常見的二維資料為data.frame資料框，二維資料可針對列(Row)和行(Column)做子集，子集選擇方式一樣是使用[]，但因應二維資料的需求，以,分隔列與行的篩選條件，資料篩選原則為前Row,後Column，前列,後行，若不想篩選列，則在,前方保持空白即可。 篩選方式可輸入位置(index)、欄位名稱或輸入布林變數(TRUE/FALSE) 輸入位置: dataFrame[row index,column index] 輸入布林變數: dataFrame[c(T,F,T),c(T,F,T)] 輸入欄位名稱: dataFrame[row name,column name] iris[1,2] ##第一列Row，第二行Column ## [1] 3.5 iris[1:3,] ##第1~3列Row，所有的行Column ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa iris[,&quot;Species&quot;] ##所有的列Row，名稱為Species的行Column ## [1] setosa setosa setosa setosa setosa setosa ## [7] setosa setosa setosa setosa setosa setosa ## [13] setosa setosa setosa setosa setosa setosa ## [19] setosa setosa setosa setosa setosa setosa ## [25] setosa setosa setosa setosa setosa setosa ## [31] setosa setosa setosa setosa setosa setosa ## [37] setosa setosa setosa setosa setosa setosa ## [43] setosa setosa setosa setosa setosa setosa ## [49] setosa setosa versicolor versicolor versicolor versicolor ## [55] versicolor versicolor versicolor versicolor versicolor versicolor ## [61] versicolor versicolor versicolor versicolor versicolor versicolor ## [67] versicolor versicolor versicolor versicolor versicolor versicolor ## [73] versicolor versicolor versicolor versicolor versicolor versicolor ## [79] versicolor versicolor versicolor versicolor versicolor versicolor ## [85] versicolor versicolor versicolor versicolor versicolor versicolor ## [91] versicolor versicolor versicolor versicolor versicolor versicolor ## [97] versicolor versicolor versicolor versicolor virginica virginica ## [103] virginica virginica virginica virginica virginica virginica ## [109] virginica virginica virginica virginica virginica virginica ## [115] virginica virginica virginica virginica virginica virginica ## [121] virginica virginica virginica virginica virginica virginica ## [127] virginica virginica virginica virginica virginica virginica ## [133] virginica virginica virginica virginica virginica virginica ## [139] virginica virginica virginica virginica virginica virginica ## [145] virginica virginica virginica virginica virginica virginica ## Levels: setosa versicolor virginica iris[1:10,c(T,F,T,F,T)] ##第1~10列Row，第1,3,5行Column (TRUE) ## Sepal.Length Petal.Length Species ## 1 5.1 1.4 setosa ## 2 4.9 1.4 setosa ## 3 4.7 1.3 setosa ## 4 4.6 1.5 setosa ## 5 5.0 1.4 setosa ## 6 5.4 1.7 setosa ## 7 4.6 1.4 setosa ## 8 5.0 1.5 setosa ## 9 4.4 1.4 setosa ## 10 4.9 1.5 setosa 也可使用$符號做Column的篩選 iris$Species ##所有的列Row，名稱為Species的行Column ## [1] setosa setosa setosa setosa setosa setosa ## [7] setosa setosa setosa setosa setosa setosa ## [13] setosa setosa setosa setosa setosa setosa ## [19] setosa setosa setosa setosa setosa setosa ## [25] setosa setosa setosa setosa setosa setosa ## [31] setosa setosa setosa setosa setosa setosa ## [37] setosa setosa setosa setosa setosa setosa ## [43] setosa setosa setosa setosa setosa setosa ## [49] setosa setosa versicolor versicolor versicolor versicolor ## [55] versicolor versicolor versicolor versicolor versicolor versicolor ## [61] versicolor versicolor versicolor versicolor versicolor versicolor ## [67] versicolor versicolor versicolor versicolor versicolor versicolor ## [73] versicolor versicolor versicolor versicolor versicolor versicolor ## [79] versicolor versicolor versicolor versicolor versicolor versicolor ## [85] versicolor versicolor versicolor versicolor versicolor versicolor ## [91] versicolor versicolor versicolor versicolor versicolor versicolor ## [97] versicolor versicolor versicolor versicolor virginica virginica ## [103] virginica virginica virginica virginica virginica virginica ## [109] virginica virginica virginica virginica virginica virginica ## [115] virginica virginica virginica virginica virginica virginica ## [121] virginica virginica virginica virginica virginica virginica ## [127] virginica virginica virginica virginica virginica virginica ## [133] virginica virginica virginica virginica virginica virginica ## [139] virginica virginica virginica virginica virginica virginica ## [145] virginica virginica virginica virginica virginica virginica ## Levels: setosa versicolor virginica Row的篩選可使用subset()函數，使用方法為subset(資料表,篩選邏輯) subset(iris,Species==&quot;virginica&quot;) ##Species等於&quot;virginica&quot;的列Row，所有的行Column ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 101 6.3 3.3 6.0 2.5 virginica ## 102 5.8 2.7 5.1 1.9 virginica ## 103 7.1 3.0 5.9 2.1 virginica ## 104 6.3 2.9 5.6 1.8 virginica ## 105 6.5 3.0 5.8 2.2 virginica ## 106 7.6 3.0 6.6 2.1 virginica ## 107 4.9 2.5 4.5 1.7 virginica ## 108 7.3 2.9 6.3 1.8 virginica ## 109 6.7 2.5 5.8 1.8 virginica ## 110 7.2 3.6 6.1 2.5 virginica ## 111 6.5 3.2 5.1 2.0 virginica ## 112 6.4 2.7 5.3 1.9 virginica ## 113 6.8 3.0 5.5 2.1 virginica ## 114 5.7 2.5 5.0 2.0 virginica ## 115 5.8 2.8 5.1 2.4 virginica ## 116 6.4 3.2 5.3 2.3 virginica ## 117 6.5 3.0 5.5 1.8 virginica ## 118 7.7 3.8 6.7 2.2 virginica ## 119 7.7 2.6 6.9 2.3 virginica ## 120 6.0 2.2 5.0 1.5 virginica ## 121 6.9 3.2 5.7 2.3 virginica ## 122 5.6 2.8 4.9 2.0 virginica ## 123 7.7 2.8 6.7 2.0 virginica ## 124 6.3 2.7 4.9 1.8 virginica ## 125 6.7 3.3 5.7 2.1 virginica ## 126 7.2 3.2 6.0 1.8 virginica ## 127 6.2 2.8 4.8 1.8 virginica ## 128 6.1 3.0 4.9 1.8 virginica ## 129 6.4 2.8 5.6 2.1 virginica ## 130 7.2 3.0 5.8 1.6 virginica ## 131 7.4 2.8 6.1 1.9 virginica ## 132 7.9 3.8 6.4 2.0 virginica ## 133 6.4 2.8 5.6 2.2 virginica ## 134 6.3 2.8 5.1 1.5 virginica ## 135 6.1 2.6 5.6 1.4 virginica ## 136 7.7 3.0 6.1 2.3 virginica ## 137 6.3 3.4 5.6 2.4 virginica ## 138 6.4 3.1 5.5 1.8 virginica ## 139 6.0 3.0 4.8 1.8 virginica ## 140 6.9 3.1 5.4 2.1 virginica ## 141 6.7 3.1 5.6 2.4 virginica ## 142 6.9 3.1 5.1 2.3 virginica ## 143 5.8 2.7 5.1 1.9 virginica ## 144 6.8 3.2 5.9 2.3 virginica ## 145 6.7 3.3 5.7 2.5 virginica ## 146 6.7 3.0 5.2 2.3 virginica ## 147 6.3 2.5 5.0 1.9 virginica ## 148 6.5 3.0 5.2 2.0 virginica ## 149 6.2 3.4 5.4 2.3 virginica ## 150 5.9 3.0 5.1 1.8 virginica Row的篩選也可搭配字串搜尋函數grepl() knitr::kable(iris[grepl(&quot;color&quot;,iris$Species),]) ##Species包含&quot;color&quot;的列，所有的行 Sepal.Length Sepal.Width Petal.Length Petal.Width Species 51 7.0 3.2 4.7 1.4 versicolor 52 6.4 3.2 4.5 1.5 versicolor 53 6.9 3.1 4.9 1.5 versicolor 54 5.5 2.3 4.0 1.3 versicolor 55 6.5 2.8 4.6 1.5 versicolor 56 5.7 2.8 4.5 1.3 versicolor 57 6.3 3.3 4.7 1.6 versicolor 58 4.9 2.4 3.3 1.0 versicolor 59 6.6 2.9 4.6 1.3 versicolor 60 5.2 2.7 3.9 1.4 versicolor 61 5.0 2.0 3.5 1.0 versicolor 62 5.9 3.0 4.2 1.5 versicolor 63 6.0 2.2 4.0 1.0 versicolor 64 6.1 2.9 4.7 1.4 versicolor 65 5.6 2.9 3.6 1.3 versicolor 66 6.7 3.1 4.4 1.4 versicolor 67 5.6 3.0 4.5 1.5 versicolor 68 5.8 2.7 4.1 1.0 versicolor 69 6.2 2.2 4.5 1.5 versicolor 70 5.6 2.5 3.9 1.1 versicolor 71 5.9 3.2 4.8 1.8 versicolor 72 6.1 2.8 4.0 1.3 versicolor 73 6.3 2.5 4.9 1.5 versicolor 74 6.1 2.8 4.7 1.2 versicolor 75 6.4 2.9 4.3 1.3 versicolor 76 6.6 3.0 4.4 1.4 versicolor 77 6.8 2.8 4.8 1.4 versicolor 78 6.7 3.0 5.0 1.7 versicolor 79 6.0 2.9 4.5 1.5 versicolor 80 5.7 2.6 3.5 1.0 versicolor 81 5.5 2.4 3.8 1.1 versicolor 82 5.5 2.4 3.7 1.0 versicolor 83 5.8 2.7 3.9 1.2 versicolor 84 6.0 2.7 5.1 1.6 versicolor 85 5.4 3.0 4.5 1.5 versicolor 86 6.0 3.4 4.5 1.6 versicolor 87 6.7 3.1 4.7 1.5 versicolor 88 6.3 2.3 4.4 1.3 versicolor 89 5.6 3.0 4.1 1.3 versicolor 90 5.5 2.5 4.0 1.3 versicolor 91 5.5 2.6 4.4 1.2 versicolor 92 6.1 3.0 4.6 1.4 versicolor 93 5.8 2.6 4.0 1.2 versicolor 94 5.0 2.3 3.3 1.0 versicolor 95 5.6 2.7 4.2 1.3 versicolor 96 5.7 3.0 4.2 1.2 versicolor 97 5.7 2.9 4.2 1.3 versicolor 98 6.2 2.9 4.3 1.3 versicolor 99 5.1 2.5 3.0 1.1 versicolor 100 5.7 2.8 4.1 1.3 versicolor 若想要快速取得資料框的前幾列(Raw)或後幾列，也可使用head()和tail()函數 head(iris,5) ##取出iris資料框的前五列 ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa tail(iris,3) ##取出iris資料框的後三列 ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 148 6.5 3.0 5.2 2.0 virginica ## 149 6.2 3.4 5.4 2.3 virginica ## 150 5.9 3.0 5.1 1.8 virginica 5.5 排序 5.5.1 sort 向量排序 sort()函數可直接對向量做由小到大的排序 head(islands) ##排序前的前六筆資料 ## Africa Antarctica Asia Australia Axel Heiberg Baffin ## 11506 5500 16988 2968 16 184 head(sort(islands)) ##由小到大排序後的前六筆資料 ## Vancouver Hainan Prince of Wales Timor Kyushu ## 12 13 13 13 14 ## Taiwan ## 14 如需由大到小排序，可將decreasing參數設為TRUE head(sort(islands,decreasing = T)) ##由大到小排序後的前六筆資料 ## Asia Africa North America South America Antarctica ## 16988 11506 9390 6795 5500 ## Europe ## 3745 5.5.2 order 如需對資料框做排序，可使用order()函數，order()函數可回傳由小到大之元素位置，以iris$Sepal.Length為例，回傳的第一個位置為14，表示iris$Sepal.Length中，數值最小的元素為第14個元素。 order(iris$Sepal.Length) ## [1] 14 9 39 43 42 4 7 23 48 3 30 12 13 25 31 46 2 10 ## [19] 35 38 58 107 5 8 26 27 36 41 44 50 61 94 1 18 20 22 ## [37] 24 40 45 47 99 28 29 33 60 49 6 11 17 21 32 85 34 37 ## [55] 54 81 82 90 91 65 67 70 89 95 122 16 19 56 80 96 97 100 ## [73] 114 15 68 83 93 102 115 143 62 71 150 63 79 84 86 120 139 64 ## [91] 72 74 92 128 135 69 98 127 149 57 73 88 101 104 124 134 137 147 ## [109] 52 75 112 116 129 133 138 55 105 111 117 148 59 76 66 78 87 109 ## [127] 125 141 145 146 77 113 144 53 121 140 142 51 103 110 126 130 108 131 ## [145] 106 118 119 123 136 132 iris$Sepal.Length[14] ## [1] 4.3 若將decreasing參數設定為TRUE，則會回傳由大到小的元素位置，以iris$Sepal.Length為例，回傳的第一個位置為132，表示iris$Sepal.Length中，數值最大的元素為第132個元素。 order(iris$Sepal.Length,decreasing = T) ## [1] 132 118 119 123 136 106 131 108 110 126 130 103 51 53 121 140 142 77 ## [19] 113 144 66 78 87 109 125 141 145 146 59 76 55 105 111 117 148 52 ## [37] 75 112 116 129 133 138 57 73 88 101 104 124 134 137 147 69 98 127 ## [55] 149 64 72 74 92 128 135 63 79 84 86 120 139 62 71 150 15 68 ## [73] 83 93 102 115 143 16 19 56 80 96 97 100 114 65 67 70 89 95 ## [91] 122 34 37 54 81 82 90 91 6 11 17 21 32 85 49 28 29 33 ## [109] 60 1 18 20 22 24 40 45 47 99 5 8 26 27 36 41 44 50 ## [127] 61 94 2 10 35 38 58 107 12 13 25 31 46 3 30 4 7 23 ## [145] 48 42 9 39 43 14 iris$Sepal.Length[132] ## [1] 7.9 依照order回傳的元素位置，重新排序iris資料框 head(iris) ##排序前的前六筆資料 ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa head(iris[order(iris$Sepal.Length),]) ##依照Sepal.Length欄位數值大小排序後的前六筆資料 ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 14 4.3 3.0 1.1 0.1 setosa ## 9 4.4 2.9 1.4 0.2 setosa ## 39 4.4 3.0 1.3 0.2 setosa ## 43 4.4 3.2 1.3 0.2 setosa ## 42 4.5 2.3 1.3 0.3 setosa ## 4 4.6 3.1 1.5 0.2 setosa head(iris[order(iris$Sepal.Length,decreasing = T),]) ##改為由大到小排序的前六筆資料 ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 132 7.9 3.8 6.4 2.0 virginica ## 118 7.7 3.8 6.7 2.2 virginica ## 119 7.7 2.6 6.9 2.3 virginica ## 123 7.7 2.8 6.7 2.0 virginica ## 136 7.7 3.0 6.1 2.3 virginica ## 106 7.6 3.0 6.6 2.1 virginica 5.6 資料組合 有時需要在資料框新增一列，或新增一行，可以利用資料組合函數完成 Row 列的組合 rbind() Column 行的組合 cbind() rbind()和cbind()的參數可以是向量，也可以是資料框，使用向量做資料整合範例: rbind(c(1,2,3), #第一列 c(4,5,6) #第二列 ) ## [,1] [,2] [,3] ## [1,] 1 2 3 ## [2,] 4 5 6 使用資料框與向量做資料整合範例: irisAdd&lt;-rbind(iris, #資料框 c(1,1,1,1,&quot;versicolor&quot;) #新增一列 ) tail(irisAdd) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 146 6.7 3 5.2 2.3 virginica ## 147 6.3 2.5 5 1.9 virginica ## 148 6.5 3 5.2 2 virginica ## 149 6.2 3.4 5.4 2.3 virginica ## 150 5.9 3 5.1 1.8 virginica ## 151 1 1 1 1 versicolor 使用向量做資料整合範例: cbind(c(1,2,3), #第一行 c(4,5,6) #第二行 ) ## [,1] [,2] ## [1,] 1 4 ## [2,] 2 5 ## [3,] 3 6 使用資料框與向量做資料整合範例: irisAdd&lt;-cbind(iris, #資料框 rep(&quot;Add&quot;,nrow(iris)) #新增一行 ) tail(irisAdd) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 145 6.7 3.3 5.7 2.5 virginica ## 146 6.7 3.0 5.2 2.3 virginica ## 147 6.3 2.5 5.0 1.9 virginica ## 148 6.5 3.0 5.2 2.0 virginica ## 149 6.2 3.4 5.4 2.3 virginica ## 150 5.9 3.0 5.1 1.8 virginica ## rep(&quot;Add&quot;, nrow(iris)) ## 145 Add ## 146 Add ## 147 Add ## 148 Add ## 149 Add ## 150 Add 5.7 長表與寬表 在資料處理的過程中，常因各種需求，需要執行長寬表互換的動作，在R中有很好用的套件reshape2(Wickham 2016b) package，提供完整的轉換功能，最常使用的是 寬表轉長表 melt(資料框/寬表,id.vars=需要保留的欄位) 長表轉寬表 dcast(資料框/長表,寬表分列依據~分欄位依據) 原來的airquality資料框中，有Ozone, Solar.R, Wind, Temp, Month, Day等六個欄位 (Column)，屬於寬表，以下範例將保留Month和Day兩個欄位，並將其他欄位的名稱整合至variable欄位，數值整合至value欄位，寬表轉長表範例如下: library(reshape2) head(airquality) ## Ozone Solar.R Wind Temp Month Day ## 1 41 190 7.4 67 5 1 ## 2 36 118 8.0 72 5 2 ## 3 12 149 12.6 74 5 3 ## 4 18 313 11.5 62 5 4 ## 5 NA NA 14.3 56 5 5 ## 6 28 NA 14.9 66 5 6 airqualityM&lt;-melt(airquality,id.vars = c(&quot;Month&quot;,&quot;Day&quot;)) ##欄位需要保留&quot;Month&quot;,&quot;Day&quot; head(airqualityM) ## Month Day variable value ## 1 5 1 Ozone 41 ## 2 5 2 Ozone 36 ## 3 5 3 Ozone 12 ## 4 5 4 Ozone 18 ## 5 5 5 Ozone NA ## 6 5 6 Ozone 28 轉換過的長表airqualityM資料框中，剩下Month, Day, variable, value等四個欄位 (Column)，屬於長表，以下範例variable欄位的值轉換為新欄位，並將value欄位填回新增的欄位，長表轉寬表範例如下: library(reshape2) ##欄位保留&quot;Month&quot;,&quot;Day&quot;外，其他欄位數目由variable定義 airqualityCast&lt;-dcast(airqualityM, Month +Day~variable) head(airqualityCast) ## Month Day Ozone Solar.R Wind Temp ## 1 5 1 41 190 7.4 67 ## 2 5 2 36 118 8.0 72 ## 3 5 3 12 149 12.6 74 ## 4 5 4 18 313 11.5 62 ## 5 5 5 NA NA 14.3 56 ## 6 5 6 28 NA 14.9 66 5.8 遺漏值處理 遺漏值(Missing Value)常常出現在真實資料內，在數值運算時常會有問題，最簡單的方法是將有缺值的資料移除，如資料為向量，可使用is.na()來判斷資料是否為空值NA，若為真TRUE，則將資料移除。 naVec&lt;-c(&quot;a&quot;,&quot;b&quot;,NA,&quot;d&quot;,&quot;e&quot;) is.na(naVec) ## [1] FALSE FALSE TRUE FALSE FALSE naVec[!is.na(naVec)] ##保留所有在is.na()檢查回傳FALSE的元素 ## [1] &quot;a&quot; &quot;b&quot; &quot;d&quot; &quot;e&quot; 若資料型態為資料框，可使用complete.cases來選出完整的資料列，如果資料列是完整的，則會回傳真TRUE head(airquality) ## Ozone Solar.R Wind Temp Month Day ## 1 41 190 7.4 67 5 1 ## 2 36 118 8.0 72 5 2 ## 3 12 149 12.6 74 5 3 ## 4 18 313 11.5 62 5 4 ## 5 NA NA 14.3 56 5 5 ## 6 28 NA 14.9 66 5 6 complete.cases(airqualityhead(airquality[complete.cases(airquality),]) ##保留所有在complete.cases()檢查回傳TRUE的元素 ## Ozone Solar.R Wind Temp Month Day ## 1 41 190 7.4 67 5 1 ## 2 36 118 8.0 72 5 2 ## 3 12 149 12.6 74 5 3 ## 4 18 313 11.5 62 5 4 ## 7 23 299 8.6 65 5 7 ## 8 19 99 13.8 59 5 8 利用演算法補值也是一種解決辦法，可參考_skydome20_的R筆記–(10)遺漏值處理(Impute Missing Value)教學。 5.9 綜合練習範例Case study 在本範例中，介紹使用SportsAnalytics (Eugster 2013) package 撈取NBA各球員的數據，並加以觀察分析。 5.9.1 載入資料 首先用library()函數將SportsAnalytics套件載入 (若尚未安裝此套件者，必須先安裝套件，可參考Chapter 1)，並利用套件內提供的fetch_NBAPlayerStatistics()函數，將對應年份之資料取出。 library(SportsAnalytics) NBA1516&lt;-fetch_NBAPlayerStatistics(&quot;15-16&quot;) 5.9.2 資料總覽 資料取出後，可用str()函數總覽NBA1516這個資料框的欄位與欄位類別 str(NBA1516) ## &#39;data.frame&#39;: 476 obs. of 25 variables: ## $ League : Factor w/ 1 level &quot;NBA&quot;: 1 1 1 1 1 1 1 1 1 1 ... ## $ Name : chr &quot;Quincy Acy&quot; &quot;Jordan Adams&quot; &quot;Steven Adams&quot; &quot;Arron Afflalo&quot; ... ## $ Team : Factor w/ 31 levels &quot;ATL&quot;,&quot;BOS&quot;,&quot;BRO&quot;,..: 27 15 22 20 19 13 28 26 12 15 ... ## $ Position : Factor w/ 5 levels &quot;C&quot;,&quot;PF&quot;,&quot;PG&quot;,..: 4 5 1 5 1 1 2 2 2 5 ... ## $ GamesPlayed : int 59 2 80 71 59 60 74 9 79 64 ... ## $ TotalMinutesPlayed : int 877 15 2019 2359 863 802 2260 37 1601 1622 ... ## $ FieldGoalsMade : int 119 2 261 354 150 134 536 5 191 215 ... ## $ FieldGoalsAttempted: int 214 6 426 799 314 225 1045 10 370 469 ... ## $ ThreesMade : int 19 0 0 91 0 0 0 0 0 15 ... ## $ ThreesAttempted : int 49 1 0 238 1 0 16 0 0 42 ... ## $ FreeThrowsMade : int 50 3 114 110 52 60 259 0 46 90 ... ## $ FreeThrowsAttempted: int 68 5 196 131 62 84 302 0 73 138 ... ## $ OffensiveRebounds : int 65 0 218 23 75 86 175 2 162 104 ... ## $ TotalRebounds : int 188 2 531 266 269 288 631 6 424 297 ... ## $ Assists : int 27 3 61 145 32 50 110 0 76 70 ... ## $ Steals : int 29 3 42 25 19 47 38 1 26 109 ... ## $ Turnovers : int 27 2 84 82 54 64 99 1 69 78 ... ## $ Blocks : int 24 0 89 10 36 68 81 2 42 18 ... ## $ PersonalFouls : int 103 2 223 142 134 139 151 1 147 175 ... ## $ Disqualifications : int 0 0 2 1 0 1 0 0 1 1 ... ## $ TotalPoints : int 307 7 636 909 352 328 1331 10 428 535 ... ## $ Technicals : int 3 0 2 1 2 0 0 0 0 1 ... ## $ Ejections : int 0 0 0 0 0 0 0 0 0 0 ... ## $ FlagrantFouls : int 0 0 0 0 0 0 0 0 0 0 ... ## $ GamesStarted : int 29 0 80 57 17 5 74 0 28 56 ... 可以發現此NBA1516資料框內有476筆球員資料(觀察值, obs)，每筆資料有25個欄位 (variables)。 ###資料預覽 如果想看資料框內容，可用head()和tail()快速瀏覽部分資料 head(NBA1516) ## League Name Team Position GamesPlayed TotalMinutesPlayed ## 1 NBA Quincy Acy SAC SF 59 877 ## 2 NBA Jordan Adams MEM SG 2 15 ## 3 NBA Steven Adams OKL C 80 2019 ## 4 NBA Arron Afflalo NYK SG 71 2359 ## 5 NBA Alexis Ajinca NOR C 59 863 ## 6 NBA Cole Aldrich LAC C 60 802 ## FieldGoalsMade FieldGoalsAttempted ThreesMade ThreesAttempted FreeThrowsMade ## 1 119 214 19 49 50 ## 2 2 6 0 1 3 ## 3 261 426 0 0 114 ## 4 354 799 91 238 110 ## 5 150 314 0 1 52 ## 6 134 225 0 0 60 ## FreeThrowsAttempted OffensiveRebounds TotalRebounds Assists Steals Turnovers ## 1 68 65 188 27 29 27 ## 2 5 0 2 3 3 2 ## 3 196 218 531 61 42 84 ## 4 131 23 266 145 25 82 ## 5 62 75 269 32 19 54 ## 6 84 86 288 50 47 64 ## Blocks PersonalFouls Disqualifications TotalPoints Technicals Ejections ## 1 24 103 0 307 3 0 ## 2 0 2 0 7 0 0 ## 3 89 223 2 636 2 0 ## 4 10 142 1 909 1 0 ## 5 36 134 0 352 2 0 ## 6 68 139 1 328 0 0 ## FlagrantFouls GamesStarted ## 1 0 29 ## 2 0 0 ## 3 0 80 ## 4 0 57 ## 5 0 17 ## 6 0 5 5.9.3 資料排序後篩選 觀察資料框的組成後，我們想要找出出場數最高的前五名選手的所有資料，此時可以利用order()函數先由大到小排序(decreasing = T)後，再用[,]取子集。 NBA1516Order&lt;-NBA1516[order(NBA1516$GamesPlayed,decreasing = T),] NBA1516Order[1:5,] ##逗號前方放1~5，表示取1~5列；逗號後方空白，表示要取所有欄位 ## League Name Team Position GamesPlayed TotalMinutesPlayed ## 11 NBA Al-farouq Aminu POR SF 82 2342 ## 37 NBA Will Barton DEN SG 82 2355 ## 48 NBA Bismack Biyombo TOR PF 82 1810 ## 62 NBA Corey Brewer HOU SG 82 1670 ## 118 NBA Gorgui Dieng MIN C 82 2222 ## FieldGoalsMade FieldGoalsAttempted ThreesMade ThreesAttempted ## 11 299 719 126 349 ## 37 426 984 112 324 ## 48 156 288 0 1 ## 62 212 552 61 225 ## 118 308 578 6 20 ## FreeThrowsMade FreeThrowsAttempted OffensiveRebounds TotalRebounds Assists ## 11 115 156 98 498 138 ## 37 216 268 60 477 204 ## 48 142 226 182 655 29 ## 62 105 140 42 199 109 ## 118 205 248 156 584 143 ## Steals Turnovers Blocks PersonalFouls Disqualifications TotalPoints ## 11 72 120 53 171 0 839 ## 37 71 139 39 147 0 1180 ## 48 19 71 133 225 2 454 ## 62 84 78 19 168 1 590 ## 118 94 140 96 219 0 827 ## Technicals Ejections FlagrantFouls GamesStarted ## 11 3 0 0 82 ## 37 2 0 0 1 ## 48 3 0 0 22 ## 62 0 0 0 12 ## 118 1 0 0 39 如果我們想要出出場分鐘數最高的前十名選手的名字，一樣可以用order()函數先由大到小排序(decreasing = T)後，再用[,]取子集。 NBA1516OrderM&lt;-NBA1516[order(NBA1516$TotalMinutesPlayed,decreasing = T),] NBA1516OrderM[1:10,&quot;Name&quot;] ##逗號前方取1~10列；逗號後方放&quot;Name&quot;，表示取名稱為Name之欄位 ## [1] &quot;James Harden&quot; &quot;Gordon Hayward&quot; &quot;Kemba Walker&quot; &quot;Trevor Ariza&quot; ## [5] &quot;Khris Middleton&quot; &quot;Kyle Lowry&quot; &quot;Marcus Morris&quot; &quot;Andrew Wiggins&quot; ## [9] &quot;Paul George&quot; &quot;Gi Antetokounmpo&quot; 5.9.4 欄位值篩選 除了排序取值外，也可用欄位條件搜尋，舉例來說，可以取出所有波士頓賽爾迪克隊的選手資料，使用subset()函數 subset(NBA1516,Team==&quot;BOS&quot;) ## League Name Team Position GamesPlayed TotalMinutesPlayed ## 60 NBA Avery Bradley BOS PG 76 2536 ## 89 NBA Coty Clarke BOS &lt;NA&gt; 4 8 ## 102 NBA Jae Crowder BOS SF 73 2310 ## 213 NBA R.j. Hunter BOS SG 36 319 ## 228 NBA Jonas Jerebko BOS PF 78 1178 ## 229 NBA Amir Johnson BOS PF 79 1798 ## 300 NBA Jordan Mickey BOS PF 16 59 ## 340 NBA Kelly Olynyk BOS C 69 1396 ## 382 NBA Terry Rozier BOS PG 39 310 ## 400 NBA Marcus Smart BOS PG 61 1666 ## 416 NBA Jared Sullinger BOS PF 81 1917 ## 422 NBA Isaiah Thomas BOS PG 82 2647 ## 433 NBA Evan Turner BOS SG 81 2270 ## 471 NBA James Young BOS SG 29 200 ## 476 NBA Tyler Zeller BOS C 60 714 ## FieldGoalsMade FieldGoalsAttempted ThreesMade ThreesAttempted ## 60 456 1018 147 406 ## 89 2 4 2 2 ## 102 359 812 122 363 ## 213 36 98 19 63 ## 228 118 286 43 108 ## 229 250 427 10 43 ## 300 8 22 0 0 ## 340 253 556 85 210 ## 382 29 106 6 27 ## 400 184 529 61 241 ## 416 351 807 29 104 ## 422 591 1382 167 465 ## 433 343 753 20 83 ## 471 11 36 6 26 ## 476 138 290 0 0 ## FreeThrowsMade FreeThrowsAttempted OffensiveRebounds TotalRebounds Assists ## 60 96 123 48 220 158 ## 89 0 0 0 1 0 ## 102 196 239 70 373 135 ## 213 6 7 2 37 13 ## 228 61 78 77 288 62 ## 229 69 121 178 505 137 ## 300 5 10 6 13 1 ## 340 96 128 72 281 105 ## 382 8 10 24 63 37 ## 400 129 166 76 255 186 ## 416 103 161 194 673 187 ## 422 474 544 46 243 509 ## 433 148 179 50 397 359 ## 471 1 4 4 26 9 ## 476 88 108 62 178 29 ## Steals Turnovers Blocks PersonalFouls Disqualifications TotalPoints ## 60 117 109 19 164 2 1155 ## 89 0 1 0 0 0 6 ## 102 126 83 35 198 4 1036 ## 213 14 11 4 29 0 97 ## 228 20 52 24 137 2 340 ## 229 52 94 83 214 1 579 ## 300 0 1 11 5 0 21 ## 340 52 74 33 163 3 687 ## 382 6 19 1 23 0 72 ## 400 91 80 18 183 1 558 ## 416 75 102 47 209 2 834 ## 422 91 220 9 167 1 1823 ## 433 80 169 28 139 0 854 ## 471 6 5 1 17 0 29 ## 476 10 46 22 97 1 364 ## Technicals Ejections FlagrantFouls GamesStarted ## 60 0 0 0 72 ## 89 0 0 0 0 ## 102 3 0 0 73 ## 213 0 0 0 0 ## 228 1 0 0 0 ## 229 0 0 0 76 ## 300 0 0 0 0 ## 340 1 0 0 8 ## 382 0 0 0 0 ## 400 2 0 0 10 ## 416 2 0 0 73 ## 422 9 0 0 79 ## 433 2 0 0 12 ## 471 0 0 0 0 ## 476 0 0 0 3 5.9.5 字串條件搜尋後篩選 當然也可以結合字串搜尋函數grepl()，將所有名字裡有“James”的選手資料取出 NBA1516[grepl(&quot;James&quot;,NBA1516$Name),] ## League Name Team Position GamesPlayed TotalMinutesPlayed ## 15 NBA James Anderson SAC SG 51 721 ## 132 NBA James Ennis NOR SF 22 329 ## 178 NBA James Harden HOU SG 82 3121 ## 222 NBA Lebron James CLE SF 76 2710 ## 231 NBA James Johnson TOR PF 57 924 ## 239 NBA James Jones CLE SG 48 466 ## 286 NBA James Mcadoo GSW SG 41 265 ## 471 NBA James Young BOS SG 29 200 ## FieldGoalsMade FieldGoalsAttempted ThreesMade ThreesAttempted ## 15 67 178 23 86 ## 132 54 113 26 58 ## 178 710 1617 236 656 ## 222 737 1416 87 282 ## 231 114 240 20 66 ## 239 59 143 41 104 ## 286 45 84 1 2 ## 471 11 36 6 26 ## FreeThrowsMade FreeThrowsAttempted OffensiveRebounds TotalRebounds Assists ## 15 22 29 13 86 41 ## 132 25 34 21 42 21 ## 178 720 837 63 502 612 ## 222 359 491 111 565 512 ## 231 39 68 28 126 67 ## 239 21 26 8 50 14 ## 286 26 49 30 58 17 ## 471 1 4 4 26 9 ## Steals Turnovers Blocks PersonalFouls Disqualifications TotalPoints ## 15 21 42 14 54 0 179 ## 132 16 19 5 28 1 159 ## 178 138 374 51 229 1 2376 ## 222 104 249 49 143 0 1920 ## 231 29 54 33 84 0 287 ## 239 11 13 10 50 0 180 ## 286 10 16 8 39 0 117 ## 471 6 5 1 17 0 29 ## Technicals Ejections FlagrantFouls GamesStarted ## 15 0 0 0 15 ## 132 0 0 0 5 ## 178 2 0 0 82 ## 222 3 0 0 76 ## 231 0 0 0 32 ## 239 1 0 0 0 ## 286 0 0 0 1 ## 471 0 0 0 0 References "],
["eda.html", "6 探索式資料分析 6.1 data.table 6.2 dplyr", " 6 探索式資料分析 撰寫中 探索式資料分析 (Exploratory Data Analysis) 的主要精神是運用視覺化、基本的統計等工具，反覆的探索資料套性獲取資料所包含的資訊、的結構和特點，因為在進行複雜或嚴謹的分析之前，必須要對資料有更多認識，才能訂定對的資料分析方向。 探索式資料分析包括分析各變數間的關聯性，看是否有預料之外的有趣發現，或是觀察資料內容是否符合預期，若否，檢查資料是否有誤，最後檢查資料是否符合分析前的假設，由上述可知，探索式資料分析通常不需要嚴謹的假設和細節呈現，主要功能還是『觀察』資料的特性。在資料量大/雜的時候，探索式資料分析就非常重要，因為透過探索式資料分析，分析人員可以在複雜的統計計算與耗時的模型建立前，就先發現可能的錯誤，更重要的是，可以透過探索性分析來調整分析的方向，減少因分析方項錯誤所造成的時間浪費。 探索式資料分析分為: 圖形化Graphical 或 量化Quantitative 單變量Univariate 或 雙變量Bivariate 或 多變量Multivariate 圖形化的分析方式包括做圖與列表，量化的分析方式則是資料初步統計，本章節著重於量化的分析方式，圖形化的分析方式請參考Ch 7。 以單變量分析來說，量化的分析方式可包含 計算集中趨勢 維基百科 平均值 Mean mean() 中位數 Median median() 眾數 Mode，R無內建函數，可直接用table()找出現次數最多的資料 計算資料分散程度 最小值 Min min() 最大值 Max max() 範圍 Range range() 四分位差 Quartiles quantile() 變異數 Variance var() 標準差 Standard deviation sd() 以雙變量分析來說，分析方式可包括: 列聯表 Crosstabs table(), ftable(), prop.table() 共變數 Covariance cov() 相關性 Correlation cor() 量化分析方式的測量值大多可用R的內建函數完成計算，但是在探索式分析時，常常需要遇到資料分組（如觀察男性和女性的血壓差異、A隊與B隊的三分球命中率差異、中鋒和後衛的助攻次數…等），若只用基本的內建函數計算，需要先完成資料分組或子集後，再作進一步的運算，相當耗時，為了使這類資料分組與分析的工作更容易被完成，本書在介紹探索式資料分析時會搭配介紹data.table(Dowle et al. 2016)和dplyr(Wickham and Francois 2016) packages，這兩個packages各有優點，可依自己喜好選用。 6.1 data.table data.table是data.frame資料框型別的延伸，如要使用必須安裝並載入data.table(Dowle et al. 2016) package install.packages(&quot;data.table&quot;) ##安裝 library(data.table) ##載入 ## ## This data.table install has not detected OpenMP support. It will work but slower in single threaded mode. 使用data.table讀取大型資料的速度比使用資料框快上數倍，讀取資料的函數為fread()，使用方法與一般檔案讀取方法(Ch 4.1)類似 fread(&quot;檔案名稱&quot;) 如果已經使用其他資料來源將檔案讀成資料框data.frame格式，可以使用data.table()函數將data.frame轉為data.table格式，以先前介紹過的NBA資料為例（Ch 5.9，需安裝與載入SportsAnalytics套件） library(SportsAnalytics) library(data.table) NBA1516&lt;-fetch_NBAPlayerStatistics(&quot;15-16&quot;) NBA1516DT&lt;-data.table(NBA1516) class(NBA1516DT) ## [1] &quot;data.table&quot; &quot;data.frame&quot; 可以發現轉換後的NBA1516DT資料型態為data.table以及data.frame，這是因為data.table是data.frame資料框型別的延伸，所以是data.table型態的資料，就一定會是data.frame型態。 data.table資料型態的特殊結構和語法設計，便於後續資料分析處理，基本語法結構如下： DT[i,j,by=] i 觀察值 (Row) 篩選邏輯 j 所需欄位 (Column) by 分組依據 各參數間需要以逗號,區隔，但若只需使用前方參數，後方的,可省略，如只需使用i和j兩個參數，可以寫成DT[i,j]。 各參數的使用方法分述如下： 6.1.1 i 觀察值篩選邏輯 第一個參數i是用來篩選觀察值，也就是針對列(Row)做子集。篩選方式與Ch 5.4雷同，可透過布林值的向量或是元素索引(index)向量指定篩選條件，透過觀察值的篩選，可保留需要的資料，進行後續分析。 以前述NBA球員資料為例，如需擷取球員姓名包含James字串的資料，可使用下列指令： NBA1516DT[grepl(&#39;James&#39;,Name)] ## League Name Team Position GamesPlayed TotalMinutesPlayed ## 1: NBA James Anderson SAC SG 51 721 ## 2: NBA James Ennis NOR SF 22 329 ## 3: NBA James Harden HOU SG 82 3121 ## 4: NBA Lebron James CLE SF 76 2710 ## 5: NBA James Johnson TOR PF 57 924 ## 6: NBA James Jones CLE SG 48 466 ## 7: NBA James Mcadoo GSW SG 41 265 ## 8: NBA James Young BOS SG 29 200 ## FieldGoalsMade FieldGoalsAttempted ThreesMade ThreesAttempted FreeThrowsMade ## 1: 67 178 23 86 22 ## 2: 54 113 26 58 25 ## 3: 710 1617 236 656 720 ## 4: 737 1416 87 282 359 ## 5: 114 240 20 66 39 ## 6: 59 143 41 104 21 ## 7: 45 84 1 2 26 ## 8: 11 36 6 26 1 ## FreeThrowsAttempted OffensiveRebounds TotalRebounds Assists Steals Turnovers ## 1: 29 13 86 41 21 42 ## 2: 34 21 42 21 16 19 ## 3: 837 63 502 612 138 374 ## 4: 491 111 565 512 104 249 ## 5: 68 28 126 67 29 54 ## 6: 26 8 50 14 11 13 ## 7: 49 30 58 17 10 16 ## 8: 4 4 26 9 6 5 ## Blocks PersonalFouls Disqualifications TotalPoints Technicals Ejections ## 1: 14 54 0 179 0 0 ## 2: 5 28 1 159 0 0 ## 3: 51 229 1 2376 2 0 ## 4: 49 143 0 1920 3 0 ## 5: 33 84 0 287 0 0 ## 6: 10 50 0 180 1 0 ## 7: 8 39 0 117 0 0 ## 8: 1 17 0 29 0 0 ## FlagrantFouls GamesStarted ## 1: 0 15 ## 2: 0 5 ## 3: 0 82 ## 4: 0 76 ## 5: 0 32 ## 6: 0 0 ## 7: 0 1 ## 8: 0 0 如需篩選所有中鋒，且姓名包含“A”字串的球員資料，可使用下列指令： NBA1516DT[grepl(&#39;A&#39;,Name)&amp;Position==&quot;C&quot;] ## League Name Team Position GamesPlayed TotalMinutesPlayed ## 1: NBA Steven Adams OKL C 80 2019 ## 2: NBA Alexis Ajinca NOR C 59 863 ## 3: NBA Cole Aldrich LAC C 60 802 ## 4: NBA Joel Anthony DET C 19 95 ## 5: NBA Omer Asik NOR C 68 1181 ## 6: NBA Andrea Bargnani BRO C 46 634 ## 7: NBA Andrew Bogut GSW C 70 1452 ## 8: NBA Andre Drummond DET C 81 2664 ## 9: NBA Al Jefferson CHA C 47 1096 ## 10: NBA Alex Len PHO C 78 1820 ## 11: NBA Anderson Varejao GSW C 53 494 ## 12: NBA Alan Williams PHO C 10 67 ## FieldGoalsMade FieldGoalsAttempted ThreesMade ThreesAttempted ## 1: 261 426 0 0 ## 2: 150 314 0 1 ## 3: 134 225 0 0 ## 4: 6 10 0 0 ## 5: 104 196 0 0 ## 6: 127 278 3 15 ## 7: 175 279 1 1 ## 8: 552 1061 2 6 ## 9: 245 505 0 0 ## 10: 264 623 1 7 ## 11: 53 124 0 1 ## 12: 10 24 0 0 ## FreeThrowsMade FreeThrowsAttempted OffensiveRebounds TotalRebounds Assists ## 1: 114 196 218 531 61 ## 2: 52 62 75 269 32 ## 3: 60 84 86 288 50 ## 4: 6 8 8 21 1 ## 5: 61 112 119 413 26 ## 6: 47 57 28 97 18 ## 7: 24 50 121 491 162 ## 8: 208 586 395 1198 67 ## 9: 72 111 57 301 70 ## 10: 174 239 178 594 97 ## 11: 32 50 37 141 35 ## 12: 9 14 14 38 5 ## Steals Turnovers Blocks PersonalFouls Disqualifications TotalPoints ## 1: 42 84 89 223 2 636 ## 2: 19 54 36 134 0 352 ## 3: 47 64 68 139 1 328 ## 4: 2 2 12 15 0 18 ## 5: 21 60 23 124 0 269 ## 6: 4 26 9 61 0 304 ## 7: 32 83 113 221 4 375 ## 8: 119 154 112 245 2 1314 ## 9: 30 34 41 117 1 562 ## 10: 38 145 62 230 3 703 ## 11: 16 22 10 70 0 138 ## 12: 4 6 5 15 0 29 ## Technicals Ejections FlagrantFouls GamesStarted ## 1: 2 0 0 80 ## 2: 2 0 0 17 ## 3: 0 0 0 5 ## 4: 0 0 0 0 ## 5: 0 0 0 64 ## 6: 0 0 0 0 ## 7: 0 0 0 66 ## 8: 7 0 0 81 ## 9: 0 0 0 18 ## 10: 1 0 0 46 ## 11: 1 0 0 0 ## 12: 0 0 0 0 如需篩選各隊出場數超過70場的球員資料，可使用下列指令： NBA1516DT[GamesPlayed&gt;70] ## League Name Team Position GamesPlayed TotalMinutesPlayed ## 1: NBA Steven Adams OKL C 80 2019 ## 2: NBA Arron Afflalo NYK SG 71 2359 ## 3: NBA Lamarcu Aldridge SAN PF 74 2260 ## 4: NBA Lavoy Allen IND PF 79 1601 ## 5: NBA Al-farouq Aminu POR SF 82 2342 ## --- ## 172: NBA Derrick Williams NYK PF 80 1442 ## 173: NBA Marvin Williams CHA PF 81 2339 ## 174: NBA Justise Winslow MIA SF 78 2237 ## 175: NBA Thaddeus Young BRO SF 73 2413 ## 176: NBA Cody Zeller CHA PF 73 1773 ## FieldGoalsMade FieldGoalsAttempted ThreesMade ThreesAttempted ## 1: 261 426 0 0 ## 2: 354 799 91 238 ## 3: 536 1045 0 16 ## 4: 191 370 0 0 ## 5: 299 719 126 349 ## --- ## 172: 254 565 44 150 ## 173: 338 747 152 379 ## 174: 196 463 32 116 ## 175: 495 963 7 30 ## 176: 231 437 1 10 ## FreeThrowsMade FreeThrowsAttempted OffensiveRebounds TotalRebounds Assists ## 1: 114 196 218 531 61 ## 2: 110 131 23 266 145 ## 3: 259 302 175 631 110 ## 4: 46 73 162 424 76 ## 5: 115 156 98 498 138 ## --- ## 172: 194 256 47 296 75 ## 173: 120 144 127 520 110 ## 174: 80 117 81 403 117 ## 175: 105 163 177 661 135 ## 176: 175 232 138 456 71 ## Steals Turnovers Blocks PersonalFouls Disqualifications TotalPoints ## 1: 42 84 89 223 2 636 ## 2: 25 82 10 142 1 909 ## 3: 38 99 81 151 0 1331 ## 4: 26 69 42 147 1 428 ## 5: 72 120 53 171 0 839 ## --- ## 172: 30 61 9 69 0 746 ## 173: 58 62 77 133 1 948 ## 174: 68 95 26 184 0 504 ## 175: 112 136 37 182 3 1102 ## 176: 57 68 63 204 4 638 ## Technicals Ejections FlagrantFouls GamesStarted ## 1: 2 0 0 80 ## 2: 1 0 0 57 ## 3: 0 0 0 74 ## 4: 0 0 0 28 ## 5: 3 0 0 82 ## --- ## 172: 0 0 0 9 ## 173: 0 0 0 81 ## 174: 0 0 0 8 ## 175: 1 0 0 73 ## 176: 0 0 0 60 6.1.2 j 欄位選擇運算 第二個參數j是用來決定輸出欄位，輸出的欄位可以是原始欄位，也可以是計算後的欄位，以計算所有球員的平均出場數為例： NBA1516DT[,mean(GamesPlayed)] ##因沒有篩選需求，,前方留空 ## [1] 54.78 也可以一次計算多個數值，如同時計算平均出場數、平均犯規次數以及平均抄截次數，此時第二個欄位j需要使用.()包起來 NBA1516DT[,.(mean(GamesPlayed),mean(PersonalFouls),mean(Steals))] ##因沒有篩選需求，,前方留空 ## V1 V2 V3 ## 1: 54.78 104.7 40.55 由上述輸出可以發現輸出的數字自動被加上欄位名稱V1, V2, V3，可能會造成數據判別錯誤，所以在計算新欄位時，可以在新欄位定義的前方加上欄位名稱=，同時替欄位取名字 NBA1516DT[,.(GamesPlayedMean=mean(GamesPlayed), PersonalFoulsMean=mean(PersonalFouls), StealsMean=mean(Steals))] ## GamesPlayedMean PersonalFoulsMean StealsMean ## 1: 54.78 104.7 40.55 除了計算平均值以外，當然可以帶入其他函式做各式各樣的運算 NBA1516DT[,.(GamesPlayedMax=max(GamesPlayed), #最大值 ThreesMadeMin=min(ThreesMade), #最小值 FieldGoalsMadeSD=sd(FieldGoalsMade))] #標準差 ## GamesPlayedMax ThreesMadeMin FieldGoalsMadeSD ## 1: 82 0 165.9 若配合第一個參數一起使用，可以計算出所有出場數大於70的球員，平均投進幾顆三分球與兩分球 NBA1516DT[GamesPlayed&gt;70, .(ThreesMadeMean=mean(ThreesMade), FieldGoalsMadeMean=mean(FieldGoalsMade))] ## ThreesMadeMean FieldGoalsMadeMean ## 1: 75.84 335.1 6.1.3 by 分組依據 第三個參數by為分組計算的依據，舉例來說，我們可以計算NBA各隊的球員數與平均助攻數，球員個數的計算在data.table內可使用.N指令，平均使用mean()函數，此時只要在by=後方加上分組依據(各隊Team)，即可完成運算 NBA1516DT[,.(.N,AssistsMean=mean(Assists)), by=Team] ## Team N AssistsMean ## 1: SAC 15 133.93 ## 2: MEM 22 73.77 ## 3: OKL 14 126.29 ## 4: NYK 16 104.88 ## 5: NOR 21 87.48 ## 6: LAC 15 124.47 ## 7: SAN 16 130.06 ## 8: POR 15 116.27 ## 9: IND 15 124.80 ## 10: WAS 17 126.94 ## 11: DAL 15 123.87 ## 12: MIL 17 112.59 ## 13: DET 15 104.53 ## 14: ORL 15 127.60 ## 15: HOU 16 101.06 ## 16: LAL 15 98.53 ## 17: DEN 15 121.53 ## 18: CHI 15 121.47 ## 19: GSW 15 158.27 ## 20: BRO 16 100.00 ## 21: CHA 14 117.86 ## 22: ATL 15 142.20 ## 23: TOR 16 97.19 ## 24: MIN 14 129.43 ## 25: PHO 17 97.00 ## 26: UTA 17 93.71 ## 27: MIA 15 130.87 ## 28: BOS 15 128.47 ## 29: PHI 16 118.12 ## 30: CLE 16 117.31 ## 31: OKC 1 160.00 ## Team N AssistsMean .N在data.table內是保留字，用來計算個數 三個參數結合使用，可以輕鬆計算出NBA各隊的中鋒球員數和他們的平均三分球出手次數，指令如下： NBA1516DT[Position==&quot;C&quot;, .(.N,ThreesAttemptedMean=mean(ThreesAttempted)), by=Team] ## Team N ThreesAttemptedMean ## 1: OKL 3 7.0000 ## 2: NOR 4 0.2500 ## 3: LAC 2 0.5000 ## 4: DET 2 3.0000 ## 5: BRO 3 10.0000 ## 6: LAL 3 0.6667 ## 7: WAS 2 1.0000 ## 8: GSW 4 16.0000 ## 9: SAN 3 34.6667 ## 10: HOU 2 3.5000 ## 11: SAC 3 70.6667 ## 12: PHO 3 2.6667 ## 13: ORL 2 4.5000 ## 14: MIN 3 36.0000 ## 15: MEM 2 1.5000 ## 16: UTA 3 1.3333 ## 17: IND 2 0.5000 ## 18: CHA 1 0.0000 ## 19: DEN 2 43.5000 ## 20: POR 2 116.0000 ## 21: CLE 3 2.3333 ## 22: NYK 1 1.0000 ## 23: DAL 3 1.6667 ## 24: MIL 2 0.5000 ## 25: CHI 1 1.0000 ## 26: PHI 2 4.0000 ## 27: TOR 3 6.0000 ## 28: BOS 2 105.0000 ## 29: ATL 1 0.0000 ## 30: MIA 1 0.0000 ## Team N ThreesAttemptedMean 6.1.4 參考文件與資源 data.table還有很多好用的功能，有興趣的話可以參考下列資料 官網 指令全集The data.table R package cheat sheet A data.table R tutorial by DataCamp DataCamp互動式教學課程 6.2 dplyr dplyr(Wickham and Francois 2016) package是Hadley Wickham開發的資料處理分析套件，如要使用必須安裝並載入dplyr package install.packages(&quot;dplyr&quot;) ##安裝 library(dplyr) ##載入 dplyr使用以下函數分析整理資料： select(): 選要分析的欄位，欄位子集 (Column) filter(): 選要分析的觀察值，觀察值子集 (Row) mutate(): 增加新欄位 summarise(): 計算統計值 group_by(): 分組依據 arrange(): 觀察值排序 rename(): 欄位重新命名 %&gt;%: the “pipe” operator 連結上數函式，將所有函示計算串在一起執行 分述如下： 6.2.1 select() 6.2.2 filter() 6.2.3 mutate() 6.2.4 summarise() 6.2.5 group_by() 6.2.6 arrange() 6.2.7 rename() 6.2.8 參考文件與資源 DataCamp互動式教學課程 Data Manipulation in R with dplyr References "],
["vis.html", "7 資料視覺化 7.1 ggplot2套件 7.2 ggplot2+地圖 7.3 Taiwan的面量圖 7.4 Case study", " 7 資料視覺化 撰寫中 延續Ch 6，探索式資料分析可分為圖形化Graphical 或 量化Quantitative分析，總括來說作圖的目的有: 了解資料的特性 尋找資料的模式(patterns) 建議資料分析與建模的策略 結果呈現與溝通 其中前三項屬於探索圖 (Exploratory graphs)，結果呈現與溝通屬於結果圖 (Final graphs)，探索圖屬探索式資料分析，目的是在『看』與『觀察』資料的樣子，所以探索圖有以下特性: 很快就可以做一張圖 探索過程中，可能可以做圖 主要目的是了解資料的樣子 不用做圖形格式調整美化 而在製作結果圖 (Final graphs)時，則須考慮以下事項: 比較，呈現差異 比較什麼？誰跟誰比較？ 呈現因果關係（causality）,機制（mechanism）,結果解釋（explanation）,系統化的結構（systematic structure） 因果模型？為什麼你想要做這樣的比較 呈現多變數（Multivariate）資料 多變數（Multivariate）：超過兩個變數就叫多變數 所有真實事件都是多變數的 將證據整合呈現 在同一個畫面呈現文字、數字、影像、圖表 盡量用圖形呈現資料 將圖表做適當的標記與說明，包括xy軸名稱、單位、資料來源等 資料圖表必須可以呈現你想說的故事 內容才是最重要的 資料不好，分析不好，圖表再美也沒有用 在R中，有三個常用的畫圖套件，包括基本功能(Base)、lattice以及ggplot2，由於各套件繪圖邏輯不同，本書只介紹最推薦的ggplot2套件的使用方式。 7.1 ggplot2套件 ggplot2 (Wickham and Chang 2016)的開發靈感來自於Dr. Leland Wilkinson的Grammar of Graphics “In brief, the grammar tells us that a statistical graphic is a mapping from data to aesthetic attributes (colour, shape, size) of geometric objects (points, lines, bars). The plot may also contain statistical transformations of the data and is drawn on a specific coordinate system” from ggplot2 book ggplot2 Package是由Hadley Wickham開發，還在持續發展更新中，對原始碼有興趣的人可以到GitHub看一下最新動態。 ggplot2 是第三個R的畫圖Package。自發表以來一直是最熱門的R packages之一，在開始學ggplot2的核心功能之前，qplot()是ggplot2 Package提供最基本的畫圖方法，跟基本的plot() function很接近，提供一個簡單入門的方法，在這篇就不詳細介紹，有興趣可以看一下網路上的教學範例。 簡單來說，做圖的文法包括兩個最主要元素： Aesthetic attributes：包括顏色、形狀、點的大小與線的粗細等 Geometric objects：包括點、線、盒狀圖、直條圖等 其他元素包括： Facets：提供在同一張圖內做多個子圖的方法，只要使用Faceting功能設定子圖分類的依據參數即可 Stats：將資料做統計轉換 Scales：修改點線的顏色、形狀、xy軸的範圍等 7.1.1 qplot() Works much like the plot function in base graphics system Looks for data in a data frame, similar to lattice Plots are made up of aesthetics (size, shape, color) and geoms (points, lines) Factors are important for indicating subsets of the data; they should be labeled The qplot() hides what goes on underneath, which is okay for most operations ggplot() is the core function and very flexible for doing things qplot() cannot do ggplot2 “Hello, world!” library(SportsAnalytics) NBA1516&lt;-fetch_NBAPlayerStatistics(&quot;15-16&quot;) library(ggplot2) #記得將ggplot2 package讀入，如果沒安奘記得先安裝 #qplot(x軸,y軸,data=使用資料)---&gt;畫散佈圖 qplot(FieldGoalsAttempted, TotalPoints, data = NBA1516) Modifying aesthetics #color=Position, 用守備位置Position著色 qplot(FieldGoalsAttempted, TotalPoints, data = NBA1516,color=Position) Adding a geom #geom = c(&quot;point&quot;, &quot;smooth&quot;) 在圖上加點與漸進線 qplot(FieldGoalsAttempted, TotalPoints, data = NBA1516, geom = c(&quot;point&quot;, &quot;smooth&quot;)) ## `geom_smooth()` using method = &#39;loess&#39; Histograms #畫TotalPoints的直方圖/ fill = Position 並用守備位置Position著色 qplot(TotalPoints, data = NBA1516, fill = Position) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Facets #qplot(x軸,y軸,data=使用資料)---&gt;畫散佈圖 #facets = . ~ Position 用守備位置Position分群畫圖(橫向) qplot(FieldGoalsAttempted, TotalPoints, data = NBA1516, facets = . ~ Position) #facets = . ~ Position 用守備位置Position分群畫圖(直向) qplot(FieldGoalsAttempted, TotalPoints, data = NBA1516, facets = Position ~ .) qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2) #facets = . ~ Position 用守備位置Position分群畫圖(直向) #binwidth = 100 每100分一組 qplot(TotalPoints, data = NBA1516, facets = Position ~ ., binwidth = 100) The qplot() function is the analog to plot() but with many built-in features Syntax somewhere in between base/lattice Produces very nice graphics, essentially publication ready (if you like the design) Difficult to go against the grain/customize (don’t bother; use full ggplot2 power in that case) 7.1.2 ggplot() 使用ggplot2作圖有以下步驟： 準備好資料。當然要有資料才能畫圖 設定Aesthetic attributes。使用aes(x, y, ...)指定 指定Geometric objects。常用的包括geom_point()、geom_line()、geom_point()、geom_polygon()、geom_errorbar() library(ggplot2) Generate the data df &lt;- data.frame(gp = factor(rep(letters[1:3], each = 10)),y = rnorm(30)) Set Aesthetic attributes and assign Geometric objects ggplot(df, aes(x = gp, y = y)) +geom_point() 用geom_boxpolt()改畫盒狀圖 ggplot(df, aes(x = gp, y = y)) +geom_boxplot() 使用Faceting功能 df$z&lt;-df$y+rnorm(30) ggplot(df, aes(x = z, y = y)) +geom_point()+facet_grid(gp~.) 轉向 ggplot(df, aes(x = z, y = y)) +geom_point()+facet_grid(.~gp) 用geom_smooth()替xy散佈圖加上趨勢線 ggplot(df, aes(x = z, y = y)) +geom_point()+facet_grid(gp~.)+geom_smooth() ## `geom_smooth()` using method = &#39;loess&#39; 用geom_smooth()替xy散佈圖加上趨勢線，使用linear regresion ggplot(df, aes(x = z, y = y)) +geom_point()+facet_grid(gp~.)+geom_smooth(method=&#39;lm&#39;) 改用geom_line()畫線 ggplot(df, aes(x = z, y = y)) +geom_line()+facet_grid(gp~.) 改用顏色分組，使用aes(color='group name') ggplot(df, aes(x = z, y = y, color=gp)) +geom_line() 畫圖前需要注意的幾個小地方： 提供資料時，把資料修改為想要在圖片顯示的文字。從上面的範例可以發現，ggplot2會直接將資料分組（a/b/c）直接標在圖上，與其之後再來改圖，不如在資料處理時就將a/b/c改為有意義且可以直接使用的文字。 如果是離散性的資料，但卻又是數值時（像是1,2,3）可以用factor()轉換，ggplot會將factor視為離散資料 Building Plots with ggplot2 - When building plots in ggplot2 (rather than using qplot) the “artist’s palette” model may be the closest analogy - Plots are built up in layers - Plot the data - Overlay a summary - Metadata and annotation Annotation Labels: xlab(), ylab(), labs(), ggtitle() Each of the “geom” functions has options to modify For things that only make sense globally, use theme() Example: theme(legend.position = &quot;none&quot;) Two standard appearance themes are included theme_gray(): The default theme (gray background) theme_bw(): More stark/plain ggthemes packages Website xkcd packages Website Axis Limits testdat &lt;- data.frame(x = 1:100, y = rnorm(100)) testdat[50,2] &lt;- 100 ## Outlier! plot(testdat$x, testdat$y, type = &quot;l&quot;, ylim = c(-3,3)) g &lt;- ggplot(testdat, aes(x = x, y = y)) g + geom_line() g + geom_line() + ylim(-3, 3) g + geom_line() + coord_cartesian(ylim = c(-3, 3)) 7.2 ggplot2+地圖 7.2.1 Choropleth map 面量圖 把統計資料用顏色畫在對應的地圖上 choroplethr package 基於ggplot2 package所做的專門畫面量圖的工具 if (!require(&#39;choroplethr&#39;)){ install.packages(&quot;choroplethr&quot;) library(choroplethr) } 美國各州人口分布 用到choroplethr package, 記得先讀入 choroplethrMaps data(df_pop_state) #記載各州人口數的資料 state_choropleth(df_pop_state) #把各州人口畫在地圖上 data(continental_us_states) state_choropleth(df_pop_state,reference_map = TRUE, zoom= continental_us_states) #把各州人口畫在地圖上 世界人口分布 用choroplethr package畫地圖，資料來自WDI package if (!require(&#39;WDI&#39;)){ install.packages(&quot;WDI&quot;) library(WDI) } choroplethr_wdi(code=&quot;SP.POP.TOTL&quot;, year=2014, title=&quot;2016 Population&quot;, num_colors=1) 世界平均壽命分布 用choroplethr package畫地圖，資料來自WDI package WDI: World Development Indicators有許多開放資料可參考 choroplethr_wdi(code=&quot;SP.DYN.LE00.IN&quot;, year=2014, title=&quot;2014 Life Expectancy&quot;) 亞洲太平洋人口分布 用choroplethr package畫地圖，資料來自WDI package WDI: World Development Indicators zoom，只畫這些國家，名字要和country.regions資料完全吻合 choroplethr_wdi(code=&quot;SP.POP.TOTL&quot;, year=2014, title=&quot;2014 Life Expectancy&quot;, zoom=c(&#39;taiwan&#39;,&#39;japan&#39;,&#39;south korea&#39;,&#39;philippines&#39;)) 7.2.2 ggmap install.packages(“ggmap”, type = “source”) 把google map載入 library(ggmap) if (!require(&#39;ggmap&#39;)){ install.packages(&quot;ggmap&quot;) library(ggmap) } twmap &lt;- get_map(location = &#39;Taiwan&#39;, zoom = 7,language = &quot;zh-TW&quot;) #location:可以是地名，也可以是經緯度座標 #zoom:放大比例 #language:地圖語言 ggmap(twmap) #基於ggplot2物件，可用相同方式處理 ggmap實際應用範例-1 台北市水質地圖，資料處理部分 http://data.taipei/opendata/datalist/apiAccess?scope=resourceAquire&amp;rid=190796c8-7c56-42e0-8068-39242b8ec927 library(jsonlite) WaterData&lt;-fromJSON(&quot;http://data.taipei/opendata/datalist/apiAccess?scope=resourceAquire&amp;rid=190796c8-7c56-42e0-8068-39242b8ec927&quot;) WaterDataFrame&lt;-WaterData$result$results WaterDataFrame$longitude&lt;-as.numeric(WaterDataFrame$longitude) WaterDataFrame$latitude&lt;-as.numeric(WaterDataFrame$latitude) WaterDataFrame$qua_cntu&lt;-as.numeric(WaterDataFrame$qua_cntu) 台北市水質地圖，畫圖部分 library(ggmap) TaipeiMap = get_map(location = c(121.43,24.93,121.62,25.19), zoom = 11, maptype = &#39;roadmap&#39;) TaipeiMapO = ggmap(TaipeiMap)+ geom_point(data=subset(WaterDataFrame,qua_cntu&gt;=0), aes(x=longitude, y=latitude,color=qua_cntu,size=3.5))+ scale_color_continuous(low = &quot;yellow&quot;,high = &quot;red&quot;)+ guides(size=FALSE) 台北市水質地圖，畫圖部分 TaipeiMapO 7.3 Taiwan的面量圖 使用rgdal, rgeos,maptools package處理地圖檔 使用ggplot2 &amp; RColorBrewer 畫圖 7.3.1 Taiwan的面量圖 用台灣的Open Data來畫一次 還沒有好用的package可用 只好自己從頭來了 下載台灣的地圖資料 政府資料開放平台 鄉鎮市區界線(TWD97經緯度) 將下載的資料夾解壓縮，放到專案資料夾內 in shapefile Wiki 空間資料開放格式 參考資料 將shapefile讀入R 使用maptools package 的readShapeSpatial function if (!require(&#39;rgdal&#39;)){#for fortify() install.packages(&quot;rgdal&quot;);library(rgdal) } if (!require(&#39;rgeos&#39;)){#for fortify() install.packages(&quot;rgeos&quot;);library(rgeos) } if (!require(&#39;maptools&#39;)){#for readShapeSpatial() install.packages(&quot;maptools&quot;);library(maptools) } tw_new &lt;- readShapeSpatial(&quot;Taiwan/Town_MOI_1041215.shp&quot;) #檔名 names(tw_new) 處理shapefile-1 - 需要rgdal, rgeos,maptools - fortify: 將shapefile物件轉為data.frame - 參考資料 library(ggplot2) #for fortify(), ggplot(), ggmap() head(tw_new$Town_ID) tw_new.df &lt;- fortify(tw_new, region = &quot;T_UID&quot;) #from ggplot2 package head(tw_new.df,10) 做一個假資料來畫：著色基準檔 #做一個假資料來畫 #prevalence設為亂數rnorm(需要的亂數個數) mydata&lt;-data.frame(NAME_2=tw_new$T_Name, id=tw_new$T_UID, prevalence=rnorm(length(tw_new$T_UID))) head(mydata) 中文編碼 #利用iconv將不知所以然的代碼（\\xa6\\xa8\\xa5\\\\\\xc2\\xed）轉為看得懂的中文 #from big5 to utf-8 mydata$NAME_2&lt;-iconv(as.character(mydata$NAME_2), #NAME_2原本是factor from=&quot;big5&quot;, to = &quot;UTF-8&quot;) head(mydata,10) 合併的圖檔與著色基準檔 #最後將有prevalence的假數據mydata和經緯度資料tw_new.df合併, 用merge() final.plot&lt;-merge(tw_new.df,mydata,by=&quot;id&quot;,all.x=T) head(final.plot,10) 畫台灣面量圖-1 library(RColorBrewer) #配色用brewer.pal( 9 , &quot;Reds&quot; ) twcmap&lt;-ggplot() + geom_polygon(data = final.plot, aes(x = long, y = lat, group = group, fill = prevalence), color = &quot;black&quot;, size = 0.25) + coord_map()+#維持地圖比例 scale_fill_gradientn(colours = brewer.pal(9,&quot;Reds&quot;))+ theme_void()+ labs(title=&quot;Prevalence of X in Taiwan&quot;) 畫台灣面量圖-2 twcmap 使用google map ggmap package if (!require(&#39;ggmap&#39;)){ install.packages(&quot;ggmap&quot;) library(ggmap)#for get_map() } twmap &lt;- get_map(location = &#39;Taiwan&#39;, zoom = 7,language = &quot;zh-TW&quot;) #location:可以是地名，也可以是經緯度座標 #zoom:放大比例 2-20 #language:地圖語言 ggmap(twmap) #基於ggplot2物件，可用相同方式處理 ggmap，maptype #maptype:地圖型態，&quot;terrain&quot;, &quot;terrain-background&quot;, &quot;satellite&quot;, # &quot;roadmap&quot;,&quot;hybrid&quot; (google maps), &quot;terrain&quot;, &quot;watercolor&quot;, # &quot;toner&quot; (stamen maps), # or a positive integer for cloudmade maps (see ?get_cloudmademap) TaipeiMap = get_map(location = c(121.43,24.93,121.62,25.19), zoom = 14, maptype = &#39;roadmap&#39;) ggmap(TaipeiMap,extent = &#39;device&#39;) #extent = &#39;device&#39; 滿版 ggmap+面量圖 ggmap(twmap)+ #ggmap geom_polygon(data = final.plot, #面量圖 aes(x = long, y = lat, group = group, fill = prevalence), color = &quot;grey80&quot;, size = 0.1,alpha = 0.5) + scale_fill_gradientn(colours = brewer.pal(9,&quot;Reds&quot;)) Density Map? 美國人口密度圖 使用 ggplot2 + ggmap 來畫人口密度圖 - 資料前處理1 #取得美國各州中心座標資料 StateCenter&lt;-data.frame( region=tolower(state.name),lon=state.center$x,lat=state.center$y) head(StateCenter,1) ## region lon lat ## 1 alabama -86.75 32.59 #美國各州人口資料 StatePop&lt;-merge(df_pop_state,StateCenter,by=&quot;region&quot;) head(StatePop,1) ## region value lon lat ## 1 alabama 4777326 -86.75 32.59 使用 ggplot2 + ggmap 來畫人口密度圖 - 資料前處理2 #將人口數值，轉為點！重要！ PopPoint&lt;-NULL for(i in 1:nrow(StatePop)){ #每100萬人轉為1點 for(j in 1:(StatePop[i,&quot;value&quot;]/1000000)){ PopPoint&lt;-rbind(PopPoint,StatePop[i,]) } } head(PopPoint,3) ## region value lon lat ## 1 alabama 4777326 -86.75 32.59 ## 2 alabama 4777326 -86.75 32.59 ## 3 alabama 4777326 -86.75 32.59 使用 ggplot2 + ggmap 來畫人口密度圖 - 作圖 USMap &lt;- get_map(location = &quot;United States&quot;, zoom = 4) densityMap&lt;-ggmap(USMap, extent = &quot;device&quot;) + geom_density2d(data = PopPoint, aes(x = lon, y = lat), size = 0.3) + stat_density2d(data = PopPoint, aes(x = lon, y = lat, fill = ..level.., alpha = ..level..), size = 0.01, bins = 16, geom = &quot;polygon&quot;) + scale_fill_gradient(low = &quot;green&quot;, high = &quot;red&quot;, guide = FALSE) + scale_alpha(range = c(0, 0.3), guide = FALSE) 美國人口密度圖 Density Map densityMap ggmap參考資料 - ggmap package source code - ggmap cheat sheet - ggmap doc 7.3.2 Heatmap 先將資料讀入 參考資料 #讀.csv檔案 nba &lt;- read.csv(&quot;http://datasets.flowingdata.com/ppg2008.csv&quot;) head(nba) ## Name G MIN PTS FGM FGA FGP FTM FTA FTP X3PM X3PA X3PP ORB ## 1 Dwyane Wade 79 38.6 30.2 10.8 22.0 0.491 7.5 9.8 0.765 1.1 3.5 0.317 1.1 ## 2 LeBron James 81 37.7 28.4 9.7 19.9 0.489 7.3 9.4 0.780 1.6 4.7 0.344 1.3 ## 3 Kobe Bryant 82 36.2 26.8 9.8 20.9 0.467 5.9 6.9 0.856 1.4 4.1 0.351 1.1 ## 4 Dirk Nowitzki 81 37.7 25.9 9.6 20.0 0.479 6.0 6.7 0.890 0.8 2.1 0.359 1.1 ## 5 Danny Granger 67 36.2 25.8 8.5 19.1 0.447 6.0 6.9 0.878 2.7 6.7 0.404 0.7 ## 6 Kevin Durant 74 39.0 25.3 8.9 18.8 0.476 6.1 7.1 0.863 1.3 3.1 0.422 1.0 ## DRB TRB AST STL BLK TO PF ## 1 3.9 5.0 7.5 2.2 1.3 3.4 2.3 ## 2 6.3 7.6 7.2 1.7 1.1 3.0 1.7 ## 3 4.1 5.2 4.9 1.5 0.5 2.6 2.3 ## 4 7.3 8.4 2.4 0.8 0.8 1.9 2.2 ## 5 4.4 5.1 2.7 1.0 1.4 2.5 3.1 ## 6 5.5 6.5 2.8 1.3 0.7 3.0 1.8 Heatmap 資料處理，寬表轉長表 library(reshape2) #for melt() nba.m &lt;- melt(nba,id.vars = &quot;Name&quot;) #寬表轉長表,以名字作依據 head(nba.m,10) ## Name variable value ## 1 Dwyane Wade G 79 ## 2 LeBron James G 81 ## 3 Kobe Bryant G 82 ## 4 Dirk Nowitzki G 81 ## 5 Danny Granger G 67 ## 6 Kevin Durant G 74 ## 7 Kevin Martin G 51 ## 8 Al Jefferson G 50 ## 9 Chris Paul G 78 ## 10 Carmelo Anthony G 66 Heatmap geom_tile() library(ggplot2) #for ggplot() ggplot(nba.m, aes(variable, Name)) + #aes(x,y) geom_tile(aes(fill = value),colour = &quot;white&quot;)+ #geom_tile: 區塊著色 scale_fill_gradient(low = &quot;white&quot;,high = &quot;steelblue&quot;) #數值低：白色 Heatmap 資料前處理：scale head(nba,2) ## Name G MIN PTS FGM FGA FGP FTM FTA FTP X3PM X3PA X3PP ORB ## 1 Dwyane Wade 79 38.6 30.2 10.8 22.0 0.491 7.5 9.8 0.765 1.1 3.5 0.317 1.1 ## 2 LeBron James 81 37.7 28.4 9.7 19.9 0.489 7.3 9.4 0.780 1.6 4.7 0.344 1.3 ## DRB TRB AST STL BLK TO PF ## 1 3.9 5.0 7.5 2.2 1.3 3.4 2.3 ## 2 6.3 7.6 7.2 1.7 1.1 3.0 1.7 nba[,2:21]&lt;-apply(nba[,2:21], 2, scale) #scale處理，將數值轉為平均=0 head(nba,2) ## Name G MIN PTS FGM FGA FGP FTM FTA FTP ## 1 Dwyane Wade 0.6179 1.0020 3.180 2.920 2.597 0.5136 1.917 2.111 -0.7402 ## 2 LeBron James 0.7694 0.6119 2.567 1.957 1.697 0.4649 1.779 1.897 -0.5233 ## X3PM X3PA X3PP ORB DRB TRB AST STL BLK TO ## 1 -0.108 0.1304 -0.15749 -0.27214 -0.3466 -0.3287 1.652 2.558 1.2065 1.79 ## 2 0.492 0.6972 0.02739 -0.06118 1.0081 0.6605 1.516 1.367 0.8627 1.06 ## PF ## 1 -0.2985 ## 2 -1.3904 apply() 還記得嗎…. 有類似for迴圈的功能 apply(Data, MARGIN, FUN,…) Data：矩陣（Matrix），Data Frame MARGIN：1=row, 2=column FUN：函數 …：函數要用的參數 #針對nba的各column做scale處理--&gt;將數值轉為平均=0 apply(nba[,2:21], 2, scale) ## G MIN PTS FGM FGA FGP FTM FTA ## [1,] 0.61793 1.001970 3.17994 2.92002 2.59683 0.51360 1.91748 2.11077 ## [2,] 0.76938 0.611930 2.56697 1.95719 1.69724 0.46492 1.77873 1.89659 ## [3,] 0.84511 -0.038137 2.02211 2.04472 2.12562 -0.07059 0.80750 0.55795 ## [4,] 0.76938 0.611930 1.71563 1.86965 1.74007 0.22151 0.87688 0.45085 ## [5,] -0.29079 -0.038137 1.68158 0.90682 1.35453 -0.55742 0.87688 0.55795 ## [6,] 0.23930 1.175321 1.51131 1.25694 1.22602 0.14848 0.94625 0.66504 ## [7,] -1.50242 0.828619 1.27293 -0.66873 -0.01628 -1.21463 2.95807 2.37850 ## [8,] -1.57814 0.135214 0.76212 1.95719 1.52589 0.65965 -0.71871 -0.45942 ## [9,] 0.54220 0.958632 0.65996 0.55669 0.06940 0.80570 0.73813 0.45085 ## [10,] -0.36652 -0.774880 0.65996 0.55669 1.01183 -0.65478 0.59938 0.66504 ## [11,] 0.46648 0.785281 0.62591 0.46916 0.19791 0.41624 1.22374 1.14695 ## [12,] 0.54220 0.395241 0.59185 0.55669 0.41210 0.24585 0.39126 0.34376 ## [13,] 0.76938 0.828619 0.45564 0.73176 0.79764 -0.04625 -0.37184 -0.13815 ## [14,] 0.08784 -0.948231 0.38753 1.25694 0.66913 0.87872 -0.57996 -0.45942 ## [15,] -1.35096 0.221890 0.18321 0.11904 -0.78736 1.68198 0.94625 0.77213 ## [16,] 0.61793 1.392011 0.18321 0.29410 0.88332 -0.80083 -0.64933 -0.67361 ## [17,] -0.13934 -0.081475 0.14916 -0.75626 -0.35898 -0.77649 1.70936 1.57531 ## [18,] -2.86550 0.048538 0.11510 0.03151 0.28359 -0.36269 -0.51059 -0.51297 ## [19,] 0.39075 1.305335 0.04699 0.46916 0.45494 0.05112 0.04440 -0.19169 ## [20,] -1.57814 -0.514853 -0.02111 0.73176 0.66913 0.12414 -0.78808 -0.51297 ## [21,] -0.29079 1.001970 -0.02111 -0.14355 0.11224 -0.41137 0.25252 0.07603 ## [22,] 0.69366 0.221890 -0.02111 -0.05602 0.36926 -0.80083 -0.37184 -0.40588 ## [23,] -0.89660 1.478686 -0.05517 -0.40614 0.41210 -1.36068 0.18315 0.07603 ## [24,] 0.84511 0.135214 -0.05517 -0.14355 0.02656 -0.36269 -0.51059 -0.62006 ## [25,] 0.61793 -0.254826 -0.08922 -0.31861 -1.51560 2.48525 1.15437 2.59268 ## [26,] 0.76938 0.481916 -0.12327 -0.66873 -0.57317 -0.31400 0.66876 0.50440 ## [27,] 0.16357 -0.601529 -0.25949 -0.14355 0.28359 -0.75215 -1.06557 -0.99488 ## [28,] -0.44224 0.785281 -0.39570 -0.93133 -0.10195 -1.45804 -0.09435 -0.29879 ## [29,] 0.46648 -1.164920 -0.39570 -0.05602 -1.08723 1.90106 0.11377 -0.08460 ## [30,] 0.84511 -0.168151 -0.42976 -0.84380 -0.44466 -0.75215 0.25252 0.23667 ## [31,] 0.23930 -1.164920 -0.42976 -0.14355 -0.05912 -0.16796 -1.41244 -1.53034 ## [32,] -0.21506 0.265227 -0.49787 -0.58120 -0.61601 0.02678 0.04440 -0.13815 ## [33,] 0.31502 -1.121583 -0.53192 -0.05602 -0.48750 0.83004 -0.16372 0.29022 ## [34,] -3.47131 -0.298164 -0.63408 0.29410 0.54061 -0.46005 -1.13495 -1.10197 ## [35,] 0.61793 0.438579 -0.66814 -0.23108 0.02656 -0.41137 -0.99620 -0.78070 ## [36,] 0.76938 0.351903 -0.66814 -0.14355 -1.30141 2.36354 -0.37184 -0.24524 ## [37,] 0.84511 1.522024 -0.70219 -0.75626 -0.83020 0.07546 -0.09435 0.29022 ## [38,] -1.50242 -2.248366 -0.77030 -1.54404 -1.51560 -0.21664 1.36249 1.20049 ## [39,] 0.84511 0.741943 -0.80435 -0.49367 -0.14479 -0.77649 -1.20432 -1.31615 ## [40,] 0.61793 0.525254 -0.87246 -0.84380 -0.91587 0.05112 -0.78808 -0.78070 ## [41,] -0.29079 -0.991569 -0.87246 -0.40614 -0.14479 -0.55742 -0.99620 -1.04843 ## [42,] 0.61793 0.005201 -0.90651 -1.01886 -1.17290 0.24585 -1.20432 -1.42325 ## [43,] 0.76938 0.351903 -0.94057 -0.05602 -0.27331 0.34321 -1.06557 -0.94133 ## [44,] -1.42669 -1.901663 -0.97462 -0.58120 -0.35898 -0.46005 -0.99620 -0.88779 ## [45,] 0.76938 -0.558191 -1.04273 -0.84380 -0.87304 -0.07059 -1.48181 -1.63743 ## [46,] 0.31502 -2.681744 -1.04273 -0.58120 -2.02966 3.38588 -0.44121 0.55795 ## [47,] 0.61793 -0.038137 -1.07678 -1.19392 -0.91587 -0.75215 -1.34307 -1.31615 ## [48,] 0.61793 -0.428178 -1.07678 -1.98169 -1.51560 -1.26331 0.39126 -0.03106 ## [49,] -1.04806 0.178552 -1.14489 -1.19392 -0.57317 -1.28766 0.04440 0.12958 ## [50,] 0.23930 -2.768420 -1.24705 -1.19392 -0.87304 -0.80083 -0.92683 -0.99488 ## FTP X3PM X3PA X3PP ORB DRB TRB AST ## [1,] -0.74017 -0.108 0.13036 -0.15749 -0.27214 -0.34657 -0.3287 1.65225 ## [2,] -0.52332 0.492 0.69717 0.02739 -0.06118 1.00809 0.6605 1.51615 ## [3,] 0.57536 0.252 0.41377 0.07532 -0.27214 -0.23368 -0.2526 0.47272 ## [4,] 1.06688 -0.468 -0.53091 0.13010 -0.27214 1.57254 0.9649 -0.66144 ## [5,] 0.89341 1.812 1.64184 0.43824 -0.69405 -0.06435 -0.2907 -0.52534 ## [6,] 0.67656 0.132 -0.05857 0.56149 -0.37761 0.55654 0.2420 -0.47998 ## [7,] 0.73438 1.332 1.02780 0.51356 -0.79953 -0.85457 -0.8614 -0.52534 ## [8,] -1.13049 -1.428 -1.47558 -2.32813 2.15388 1.68542 1.9542 -1.02437 ## [9,] 0.74884 -0.468 -0.43644 0.16434 -0.48309 0.10499 -0.1385 3.24007 ## [10,] -0.33539 -0.228 -0.29474 0.21227 0.25526 0.38721 0.3561 -0.20778 ## [11,] 0.01157 -1.188 -1.23941 -0.65051 1.52101 1.51609 1.5737 -0.61608 ## [12,] 0.11276 -0.108 -0.20027 0.25336 -0.06118 -0.62879 -0.4429 0.56345 ## [13,] -0.89919 0.252 0.31930 0.07532 1.09909 1.12098 1.1552 -0.88828 ## [14,] -0.49441 -1.068 -1.09771 -0.32868 -1.01049 -1.02390 -1.0517 1.38005 ## [15,] 0.27178 -1.308 -1.47558 0.60942 0.88813 0.78232 0.8508 -0.84291 ## [16,] 0.14167 0.852 0.93334 0.13695 -0.58857 -0.51590 -0.5570 0.88102 ## [17,] 0.05493 -0.348 -0.01134 -0.33552 -1.01049 -0.91101 -0.9756 1.38005 ## [18,] -0.03180 1.092 1.21674 0.17803 -0.69405 -1.13679 -1.0136 -0.52534 ## [19,] 0.98014 -1.308 -1.38111 -0.68474 0.78265 1.06454 1.0030 -0.70681 ## [20,] -1.18832 -0.708 -0.62537 -0.06847 1.83744 1.34676 1.6118 -0.79754 ## [21,] 0.60428 -0.228 -0.05857 -0.20542 0.46622 -0.06435 0.1278 0.20052 ## [22,] 0.01157 0.852 0.79164 0.30813 -0.48309 -0.17723 -0.2907 0.38199 ## [23,] 0.14167 0.612 0.93334 -0.01369 -0.16666 -0.34657 -0.2907 1.19858 ## [24,] 0.69102 1.092 0.88610 0.47932 -0.79953 -0.96745 -0.8995 -0.20778 ## [25,] -3.21221 -1.428 -1.52281 -2.32813 3.10319 2.87075 3.0196 -1.11511 ## [26,] 0.19950 0.372 0.27207 0.34922 -0.69405 0.27432 -0.1005 -0.11705 ## [27,] -0.33539 1.332 1.50014 0.16434 0.04430 0.21787 0.1278 -1.11511 ## [28,] 0.80667 1.212 1.35844 0.13695 -1.01049 -1.08034 -1.0897 0.24589 ## [29,] 0.71993 -1.428 -1.52281 4.51931 1.31005 1.51609 1.5357 -0.93364 ## [30,] -0.16191 0.252 0.17760 0.39030 -0.69405 -0.34657 -0.4809 -0.66144 ## [31,] 0.92232 1.332 1.40567 0.17803 -0.90501 -1.47545 -1.3180 -0.20778 ## [32,] 0.47417 -0.228 0.03590 -0.20542 -1.01049 -1.13679 -1.1278 3.10397 ## [33,] -1.79548 -1.428 -1.52281 -2.32813 1.41553 1.96765 1.8401 -0.16241 ## [34,] 0.19950 -1.068 -1.05048 -0.21912 -0.79953 -0.40301 -0.5951 -0.07168 ## [35,] -0.71125 -0.108 -0.05857 0.07532 0.04430 -0.17723 -0.1385 -0.97901 ## [36,] -0.50887 -1.428 -1.52281 1.09559 1.94292 1.06454 1.4215 -0.16241 ## [37,] -1.33288 -0.228 -0.01134 -0.22597 -0.27214 0.04854 -0.0624 0.65418 ## [38,] 0.11276 -0.828 -0.62537 -0.59573 -0.37761 0.04854 -0.1385 -0.93364 ## [39,] 0.90786 0.732 0.64993 0.30129 -0.69405 -0.79812 -0.7853 -0.29851 ## [40,] 0.19950 0.492 0.27207 0.52725 -0.69405 -0.57234 -0.6331 -0.29851 ## [41,] 0.45971 -0.228 -0.20027 0.19173 -0.69405 -1.19323 -1.0517 0.24589 ## [42,] 1.96318 1.572 1.40567 0.47247 -0.58857 -1.02390 -0.8995 -0.47998 ## [43,] -0.50887 -1.308 -1.38111 -0.61627 1.62648 0.04854 0.6225 -0.88828 ## [44,] -0.49441 -0.108 -0.01134 0.03424 -0.27214 -0.34657 -0.2907 -1.02437 ## [45,] 1.38492 1.332 0.93334 0.65735 -0.79953 -0.91101 -0.9375 0.10979 ## [46,] -3.19775 -1.428 -1.52281 -2.32813 1.20457 0.78232 0.9649 -0.97901 ## [47,] 0.28624 1.932 1.78354 0.39030 -0.16666 0.04854 -0.0624 -0.57071 ## [48,] 1.39938 1.092 0.83887 0.46563 -1.01049 -1.08034 -1.0897 1.15322 ## [49,] -0.50887 -0.828 -0.71984 -0.39030 -0.90501 -1.13679 -1.0897 0.51809 ## [50,] 0.35852 0.612 0.93334 -0.10271 -0.06118 -1.08034 -0.7473 0.10979 ## STL BLK TO PF ## [1,] 2.55824 1.206465 1.79045 -0.29846 ## [2,] 1.36725 0.862742 1.05965 -1.39037 ## [3,] 0.89086 -0.168424 0.32886 -0.29846 ## [4,] -0.77652 0.347159 -0.95003 -0.48044 ## [5,] -0.30013 1.378326 0.14616 1.15743 ## [6,] 0.41446 0.175298 1.05965 -1.20839 ## [7,] 0.17627 -0.684007 0.87695 -0.29846 ## [8,] -0.77652 1.893909 -1.13273 0.61147 ## [9,] 3.98742 -0.855868 1.05965 0.42949 ## [10,] -0.06193 -0.340285 1.05965 0.97544 ## [11,] -0.53833 0.690881 -0.21924 0.06551 ## [12,] -0.06193 -0.512146 -0.95003 -1.57236 ## [13,] 0.17627 -0.512146 -1.68083 0.42949 ## [14,] -0.53833 -0.855868 0.32886 -1.75434 ## [15,] -0.53833 0.862742 0.69425 1.15743 ## [16,] -0.06193 -0.684007 0.14616 -0.48044 ## [17,] 1.36725 -0.684007 1.24235 -0.11647 ## [18,] -0.06193 -0.855868 -1.49813 -1.93633 ## [19,] -1.25292 0.519020 -0.58464 0.42949 ## [20,] -0.53833 -0.512146 -0.21924 0.42949 ## [21,] 1.12905 -0.512146 1.24235 0.06551 ## [22,] -0.30013 -0.168424 -0.58464 0.79346 ## [23,] 0.89086 -0.168424 2.70394 0.24750 ## [24,] -0.53833 -0.512146 -0.03654 -0.48044 ## [25,] -0.30013 3.956241 1.05965 1.70339 ## [26,] -0.30013 -0.512146 0.69425 0.42949 ## [27,] 0.17627 -0.512146 -0.40194 1.15743 ## [28,] -0.53833 -0.684007 -0.21924 -1.93633 ## [29,] -1.72931 2.237631 1.05965 1.52140 ## [30,] -0.77652 -0.684007 -0.76733 1.15743 ## [31,] 0.41446 -0.512146 -1.49813 -1.02640 ## [32,] -0.06193 -0.512146 1.79045 -0.84441 ## [33,] -1.49111 1.893909 -0.40194 -0.29846 ## [34,] 1.12905 -0.512146 0.51156 0.42949 ## [35,] 0.17627 0.175298 0.32886 0.61147 ## [36,] -1.25292 0.690881 -0.95003 -0.66243 ## [37,] 1.12905 -0.340285 0.51156 -1.02640 ## [38,] -0.53833 -0.684007 -0.03654 2.43133 ## [39,] -0.06193 -0.684007 0.69425 0.06551 ## [40,] -0.06193 -0.512146 -0.58464 -0.29846 ## [41,] -1.25292 -0.855868 -0.76733 0.24750 ## [42,] -0.53833 -0.684007 -1.31543 -0.84441 ## [43,] -0.30013 0.690881 -1.68083 0.24750 ## [44,] -0.06193 0.003437 -1.31543 0.24750 ## [45,] -0.53833 -0.855868 -0.40194 0.42949 ## [46,] -1.01472 1.378326 -0.40194 1.70339 ## [47,] -0.30013 0.003437 -0.76733 0.06551 ## [48,] 0.17627 -0.684007 -0.40194 -0.84441 ## [49,] 0.89086 -0.855868 0.32886 -1.75434 ## [50,] 0.41446 -0.855868 -0.95003 0.61147 Heatmap 資料前處理：scale nba.m &lt;- melt(nba) ggplot(nba.m, aes(variable, Name)) + #aes(x,y) geom_tile(aes(fill = value),colour = &quot;white&quot;)+ #geom_tile: 區塊著色 scale_fill_gradient(low = &quot;white&quot;,high = &quot;steelblue&quot;) #數值低：白色 7.3.3 Treemap 需要treemapify packages Treemap -資料處理 - 需要treemapify packages - 參考資料 - G20 Dataset if (!require(&#39;treemapify&#39;)){ library(devtools) #install.packages(&quot;devtools&quot;) 沒安裝過記得先裝 install_github(&quot;wilkox/treemapify&quot;) #從GitHub安裝測試版Packages,需要安裝devtools library(treemapify) } data(G20)#範例資料 head(G20) ## Region Country Trade.mil.USD Nom.GDP.mil.USD HDI Population ## 1 Africa South Africa 208000 384315 0.629 53000000 ## 2 North America United States 3969000 15684750 0.937 316173000 ## 3 North America Canada 962600 1819081 0.911 34088000 ## 4 North America Mexico 756800 1177116 0.775 112211789 ## 5 South America Brazil 494800 2395968 0.730 201032714 ## 6 South America Argentina 152690 474954 0.811 40117096 ## Economic.classification ## 1 Developing ## 2 Advanced ## 3 Advanced ## 4 Developing ## 5 Developing ## 6 Developing Treemap -設定Treemap參數 ## fill label xmin xmax ymin ymax group ## 1 0.876 European Union 0.00 38.67 0.00 59.00 Europe ## 2 0.920 Germany 38.67 63.32 0.00 19.17 Europe ## 3 0.893 France 38.67 63.32 19.17 33.88 Europe ## 4 0.875 United Kingdom 38.67 63.32 33.88 47.64 Europe ## 5 0.881 Italy 38.67 63.32 47.64 59.00 Europe ## 6 0.937 United States 0.00 53.16 59.00 100.00 North America Treemap -作圖1 Treemap -作圖2 好像數字越大顏色越深比較合理？ 7.3.4 Error bar 誤差線 終於要扯一點所謂的統計 通常使用在bar chart, line chart 比較多組資料的平均值高低時，務必加上Error bar 誤差線 誤差線計算 Standard deviation (SD) 標準差：呈現資料本質時使用 Standard error (SE) 標準誤差：呈現預估平均值的可能誤差時使用 Confidence interval (CI) 信賴區間：呈現預估平均值的信心時使用 Bar Chart without Error Bar in ggplot2 library(datasets) airquality$Month&lt;-as.factor(airquality$Month) #將Month轉為因子變項 airquality.mean&lt;-aggregate(Ozone~Month,airquality,mean) #計算每月Ozone平均mean ggplot()+geom_bar(data=airquality.mean,aes(x=Month,y=Ozone), stat = &quot;identity&quot;) #stat = &quot;identity&quot; 直接畫數字 Bar Chart with Error Bar in ggplot2 airquality.sd&lt;-aggregate(Ozone~Month,airquality,sd) #計算每月Ozone標準差sd airquality.eb&lt;-merge(airquality.mean,airquality.sd,by=&quot;Month&quot;) ggplot(data=airquality.eb)+ #資料airquality.eb geom_bar(aes(x=Month,y=Ozone.x),stat = &quot;identity&quot;)+ geom_errorbar( #ymin低點, ymax高點, Ozone.x=mean, Ozone.y=sd標準差 aes(x=Month,ymin=Ozone.x-Ozone.y,ymax=Ozone.x+Ozone.y), width=.1) 7.3.5 參考文件與資源 官方網站文件 RStudio製作的ggplot cheat sheet DataCamp互動式課程1 Data Visualization with ggplot2 (Part 1) DataCamp互動式課程2 Data Visualization with ggplot2 (Part 2) DataCamp互動式課程3 Data Visualization with ggplot2 (Part 3) 7.4 Case study References "],
["InteractiveGraphics.html", "8 互動式資料呈現", " 8 互動式資料呈現 撰寫中 https://www.rstudio.com/wp-content/uploads/2016/01/shiny-cheatsheet.pdf http://ggvis.rstudio.com/ "],
["datamining.html", "9 資料探勘 9.1 Clustering 9.2 Hierarchical clustering 9.3 K-means clustering 9.4 kmeans() 9.5 Machine Learning 機器學習 9.6 Decision Trees 決策樹 9.7 Association Rules 關聯式規則 9.8 Regression 迴歸 9.9 Logistic Regression 邏輯迴歸 9.10 Decision Trees 決策樹", " 9 資料探勘 撰寫中 9.1 Clustering 汽車基本資料 mtcars.mx&lt;-as.matrix(mtcars) mtcars.mxs&lt;-scale(mtcars.mx) #[, 1] mpg Miles/(US) gallon #[, 2] cyl Number of cylinders 氣缸數 #[, 3] disp Displacement (cu.in.) 排氣量 #[, 4] hp Gross horsepower 馬力 #[, 5] drat Rear axle ratio 後輪軸比 #[, 6] wt Weight (1000 lbs) #[, 7] qsec 1/4 mile time #[, 8] vs V/S #[, 9] am Transmission (0 = automatic, 1 = manual) #[,10] gear Number of forward gears 前進檔 #[,11] carb Number of carburetors 化油器 head(mtcars.mxs,3) ## mpg cyl disp hp drat wt qsec vs am ## Mazda RX4 0.1509 -0.105 -0.5706 -0.5351 0.5675 -0.6104 -0.7772 -0.868 1.19 ## Mazda RX4 Wag 0.1509 -0.105 -0.5706 -0.5351 0.5675 -0.3498 -0.4638 -0.868 1.19 ## Datsun 710 0.4495 -1.225 -0.9902 -0.7830 0.4740 -0.9170 0.4260 1.116 1.19 ## gear carb ## Mazda RX4 0.4236 0.7352 ## Mazda RX4 Wag 0.4236 0.7352 ## Datsun 710 0.4236 -1.1222 各汽車/參數間的相似性？ -heatmap() par(mar=rep(0.2,4),mfrow=c(1,1)) heatmap(mtcars.mxs) 如何找到相似的物件/事件？ Clustering organizes things that are close into groups How do we define close? How do we group things? How do we visualize the grouping? How do we interpret the grouping? Hierarchical clustering An agglomerative approach Find closest two things Put them together Find next closest Requires A defined distance A merging approach Produces A tree showing how close things are to each other Hierarchical clustering An agglomerative approach Find closest two things Put them together Find next closest Requires A defined distance A merging approach Produces A tree showing how close things are to each other How do we define close? distance Most important step Garbage in -&gt; garbage out Distance or similarity Continuous - euclidean distance Continuous - correlation similarity Binary - manhattan distance Pick a distance/similarity that makes sense for your problem Example distances - Euclidean \\[\\sqrt{(A_1-A_2)^2 + (B_1-B_2)^2 + \\ldots + (Z_1-Z_2)^2}\\] Example distances - Manhattan \\[|A_1-A_2| + |B_1-B_2| + \\ldots + |Z_1-Z_2|\\] Green line: Euclidean, Blue line: Manhattan 9.2 Hierarchical clustering An agglomerative approach Find closest two things Put them together Find next closest Requires A defined distance A merging approach Produces A tree showing how close things are to each other Merging apporach - Agglomerative 聚合 - Single-linkage：取最小值 - Complete-linkage：取最大值 - Average-linkage：取平均值 Hierarchical clustering - hp vs. mpg Hierarchical clustering - #1 Hierarchical clustering - #2 Hierarchical clustering - #3 Hierarchical clustering An agglomerative approach Find closest two things Put them together Find next closest Requires A defined distance A merging approach Produces A tree showing how close things are to each other Hierarchical Clustering -dist() 用dist()函數計算距離，使用method=“”設定計算距離的依據 d&lt;-dist(mtcars.mxs) #預設為euclidean d ## Mazda RX4 Mazda RX4 Wag Datsun 710 Hornet 4 Drive ## Mazda RX4 Wag 0.4076 ## Datsun 710 3.2431 3.1764 ## Hornet 4 Drive 4.4014 4.2633 3.4371 ## Hornet Sportabout 3.8804 3.8197 5.0033 3.0422 ## Valiant 4.8437 4.6756 3.8681 0.9937 ## Duster 360 4.1896 4.1749 5.8959 4.3396 ## Merc 240D 3.9973 3.8208 2.5014 2.5336 ## Merc 230 4.9177 4.6700 3.3122 3.2699 ## Merc 280 3.1378 2.9882 3.2950 2.9860 ## Merc 280C 3.2928 3.1171 3.3444 2.9705 ## Merc 450SE 3.8563 3.7330 5.1668 3.2469 ## Merc 450SL 3.7265 3.6141 5.0139 3.0963 ## Merc 450SLC 3.8588 3.7280 5.0837 3.1350 ## Cadillac Fleetwood 5.4495 5.2848 6.7702 4.6845 ## Lincoln Continental 5.4800 5.3128 6.8197 4.7869 ## Chrysler Imperial 5.0973 4.9356 6.5251 4.6034 ## Fiat 128 4.0243 3.9407 1.7832 4.1854 ## Honda Civic 4.0533 4.0507 2.6459 5.2450 ## Toyota Corolla 4.3445 4.2723 2.2120 4.5514 ## Toyota Corona 4.3303 4.2137 2.5743 2.1359 ## Dodge Challenger 4.1090 4.0530 5.1795 3.1033 ## AMC Javelin 3.7602 3.6847 4.8499 2.9347 ## Camaro Z28 4.1192 4.1051 5.9278 4.6740 ## Pontiac Firebird 4.1721 4.0882 5.2719 3.1815 ## Fiat X1-9 3.6111 3.5658 1.0647 3.9830 ## Porsche 914-2 2.5949 2.6591 2.9669 5.3633 ## Lotus Europa 3.5594 3.6429 2.3505 4.8655 ## Ford Pantera L 3.6239 3.7005 5.6725 6.2183 ## Ferrari Dino 2.2173 2.3107 4.6712 5.7255 ## Maserati Bora 4.9758 5.0071 7.2893 7.4540 ## Volvo 142E 2.9056 2.7880 0.9799 3.5836 ## Hornet Sportabout Valiant Duster 360 Merc 240D Merc 230 ## Mazda RX4 Wag ## Datsun 710 ## Hornet 4 Drive ## Hornet Sportabout ## Valiant 3.3988 ## Duster 360 1.8907 4.5959 ## Merc 240D 4.6075 2.9114 5.6208 ## Merc 230 5.3602 3.4091 6.3074 1.7677 ## Merc 280 3.7603 3.3860 4.1159 2.3467 3.1737 ## Merc 280C 3.8405 3.2902 4.2017 2.3315 2.9644 ## Merc 450SE 1.2157 3.3739 1.7195 4.6101 5.2829 ## Merc 450SL 1.0582 3.2662 1.7484 4.4790 5.1386 ## Merc 450SLC 1.2772 3.2104 1.8280 4.5289 5.0939 ## Cadillac Fleetwood 2.8840 4.6250 2.4964 6.0571 6.4720 ## Lincoln Continental 2.9685 4.7409 2.4967 6.1201 6.5342 ## Chrysler Imperial 2.6262 4.7150 2.1314 5.8475 6.3196 ## Fiat 128 5.8776 4.7311 6.9265 2.8477 3.4761 ## Honda Civic 6.5055 5.8853 7.2973 3.7433 4.2794 ## Toyota Corolla 6.2330 5.1097 7.2823 3.1877 3.6385 ## Toyota Corona 4.4095 2.5379 5.4587 1.8188 2.3602 ## Dodge Challenger 1.0370 3.2050 2.1566 4.7682 5.5841 ## AMC Javelin 0.8360 3.1377 2.0925 4.4434 5.1708 ## Camaro Z28 2.3538 5.0149 1.0554 5.7074 6.3746 ## Pontiac Firebird 0.5475 3.5076 1.9843 4.7857 5.5292 ## Fiat X1-9 5.6028 4.4965 6.5755 2.7366 3.4680 ## Porsche 914-2 5.5333 5.9049 6.1678 4.0696 4.9108 ## Lotus Europa 5.8906 5.4091 6.5673 3.6797 4.6691 ## Ford Pantera L 4.5705 6.6598 3.9757 6.3426 7.0038 ## Ferrari Dino 4.8737 6.0394 4.5054 5.2004 6.0348 ## Maserati Bora 5.7962 7.6982 4.5081 7.6029 8.1528 ## Volvo 142E 4.9105 4.0222 5.5903 2.4866 3.1933 ## Merc 280 Merc 280C Merc 450SE Merc 450SL Merc 450SLC ## Mazda RX4 Wag ## Datsun 710 ## Hornet 4 Drive ## Hornet Sportabout ## Valiant ## Duster 360 ## Merc 240D ## Merc 230 ## Merc 280 ## Merc 280C 0.4083 ## Merc 450SE 3.5037 3.5447 ## Merc 450SL 3.4252 3.4663 0.3944 ## Merc 450SLC 3.4613 3.4572 0.4901 0.4173 ## Cadillac Fleetwood 4.8481 4.8076 2.3752 2.6192 2.4459 ## Lincoln Continental 4.8652 4.8311 2.4148 2.6820 2.5174 ## Chrysler Imperial 4.5332 4.5498 2.1302 2.3834 2.3303 ## Fiat 128 4.1045 4.1942 6.1027 5.9177 6.0523 ## Honda Civic 4.3522 4.4597 6.7429 6.5609 6.6876 ## Toyota Corolla 4.4495 4.5273 6.4894 6.2849 6.4199 ## Toyota Corona 3.0092 2.9592 4.5231 4.3467 4.3683 ## Dodge Challenger 3.9899 4.0421 1.2054 1.1528 1.2247 ## AMC Javelin 3.5714 3.6040 1.0549 0.9431 0.9627 ## Camaro Z28 4.0283 4.1261 2.1735 2.2626 2.3169 ## Pontiac Firebird 3.9725 4.0518 1.3039 1.2654 1.4563 ## Fiat X1-9 3.7811 3.8552 5.8250 5.6428 5.7475 ## Porsche 914-2 4.2060 4.3569 5.7510 5.6099 5.7483 ## Lotus Europa 4.1266 4.3110 6.1481 5.9588 6.1321 ## Ford Pantera L 4.7638 4.9017 4.6618 4.6521 4.7411 ## Ferrari Dino 3.8958 4.0540 4.6304 4.5550 4.6718 ## Maserati Bora 5.7612 5.8673 5.4445 5.4647 5.5262 ## Volvo 142E 2.7802 2.8201 4.9480 4.8295 4.8807 ## Cadillac Fleetwood Lincoln Continental Chrysler Imperial ## Mazda RX4 Wag ## Datsun 710 ## Hornet 4 Drive ## Hornet Sportabout ## Valiant ## Duster 360 ## Merc 240D ## Merc 230 ## Merc 280 ## Merc 280C ## Merc 450SE ## Merc 450SL ## Merc 450SLC ## Cadillac Fleetwood ## Lincoln Continental 0.2957 ## Chrysler Imperial 1.0635 0.9081 ## Fiat 128 7.7973 7.8459 7.4347 ## Honda Civic 8.3929 8.4235 7.9703 ## Toyota Corolla 8.2005 8.2527 7.8281 ## Toyota Corona 6.1485 6.2161 5.9697 ## Dodge Challenger 2.8372 2.9549 2.8684 ## AMC Javelin 2.8989 2.9910 2.8183 ## Camaro Z28 2.8151 2.7412 2.2660 ## Pontiac Firebird 2.5701 2.6556 2.3044 ## Fiat X1-9 7.5268 7.5797 7.2243 ## Porsche 914-2 7.3428 7.3626 6.9370 ## Lotus Europa 7.8314 7.8778 7.4656 ## Ford Pantera L 5.2909 5.2361 4.8165 ## Ferrari Dino 5.8053 5.8069 5.4554 ## Maserati Bora 5.6041 5.5359 5.2173 ## Volvo 142E 6.4043 6.4300 6.1099 ## Fiat 128 Honda Civic Toyota Corolla Toyota Corona ## Mazda RX4 Wag ## Datsun 710 ## Hornet 4 Drive ## Hornet Sportabout ## Valiant ## Duster 360 ## Merc 240D ## Merc 230 ## Merc 280 ## Merc 280C ## Merc 450SE ## Merc 450SL ## Merc 450SLC ## Cadillac Fleetwood ## Lincoln Continental ## Chrysler Imperial ## Fiat 128 ## Honda Civic 1.9243 ## Toyota Corolla 0.5758 1.7799 ## Toyota Corona 3.1796 3.9646 3.4387 ## Dodge Challenger 6.1898 6.9208 6.5812 4.5624 ## AMC Javelin 5.8509 6.4507 6.2194 4.1915 ## Camaro Z28 6.9503 7.1027 7.2971 5.5641 ## Pontiac Firebird 6.1150 6.7947 6.4857 4.6855 ## Fiat X1-9 0.9440 1.8357 1.2632 2.8772 ## Porsche 914-2 3.2195 2.9932 3.4110 4.6535 ## Lotus Europa 2.3907 2.8623 2.5924 4.2446 ## Ford Pantera L 6.6166 6.4835 6.9121 6.7110 ## Ferrari Dino 5.4662 5.4860 5.7729 5.8353 ## Maserati Bora 8.1808 8.1867 8.4802 8.0606 ## Volvo 142E 2.1945 2.6127 2.6006 2.7535 ## Dodge Challenger AMC Javelin Camaro Z28 Pontiac Firebird ## Mazda RX4 Wag ## Datsun 710 ## Hornet 4 Drive ## Hornet Sportabout ## Valiant ## Duster 360 ## Merc 240D ## Merc 230 ## Merc 280 ## Merc 280C ## Merc 450SE ## Merc 450SL ## Merc 450SLC ## Cadillac Fleetwood ## Lincoln Continental ## Chrysler Imperial ## Fiat 128 ## Honda Civic ## Toyota Corolla ## Toyota Corona ## Dodge Challenger ## AMC Javelin 0.7828 ## Camaro Z28 2.7783 2.4813 ## Pontiac Firebird 1.1943 1.1772 2.4529 ## Fiat X1-9 5.8525 5.4949 6.5789 5.8832 ## Porsche 914-2 5.8698 5.4886 6.0073 5.8050 ## Lotus Europa 6.1425 5.9214 6.6478 6.1639 ## Ford Pantera L 5.0079 4.7275 3.6306 4.7027 ## Ferrari Dino 5.0081 4.8308 4.5054 5.0962 ## Maserati Bora 6.0178 5.9397 4.4569 5.8679 ## Volvo 142E 5.1510 4.7543 5.5100 5.1557 ## Fiat X1-9 Porsche 914-2 Lotus Europa Ford Pantera L ## Mazda RX4 Wag ## Datsun 710 ## Hornet 4 Drive ## Hornet Sportabout ## Valiant ## Duster 360 ## Merc 240D ## Merc 230 ## Merc 280 ## Merc 280C ## Merc 450SE ## Merc 450SL ## Merc 450SLC ## Cadillac Fleetwood ## Lincoln Continental ## Chrysler Imperial ## Fiat 128 ## Honda Civic ## Toyota Corolla ## Toyota Corona ## Dodge Challenger ## AMC Javelin ## Camaro Z28 ## Pontiac Firebird ## Fiat X1-9 ## Porsche 914-2 2.9044 ## Lotus Europa 2.1787 2.5614 ## Ford Pantera L 6.2259 4.6929 5.5541 ## Ferrari Dino 5.1088 3.6306 4.2188 3.0648 ## Maserati Bora 7.8703 6.5746 6.9847 3.0288 ## Volvo 142E 1.6208 2.8882 2.6646 5.2160 ## Ferrari Dino Maserati Bora ## Mazda RX4 Wag ## Datsun 710 ## Hornet 4 Drive ## Hornet Sportabout ## Valiant ## Duster 360 ## Merc 240D ## Merc 230 ## Merc 280 ## Merc 280C ## Merc 450SE ## Merc 450SL ## Merc 450SLC ## Cadillac Fleetwood ## Lincoln Continental ## Chrysler Imperial ## Fiat 128 ## Honda Civic ## Toyota Corolla ## Toyota Corona ## Dodge Challenger ## AMC Javelin ## Camaro Z28 ## Pontiac Firebird ## Fiat X1-9 ## Porsche 914-2 ## Lotus Europa ## Ford Pantera L ## Ferrari Dino ## Maserati Bora 3.3720 ## Volvo 142E 4.2490 6.7446 Hierarchical Clustering -dist() 用dist()函數計算距離，使用method=“”設定計算距離的依據，可用方法包括： “euclidean”, “maximum”, “manhattan”, “canberra”, “binary” or “minkowski” d&lt;-dist(mtcars.mxs, method=&quot;manhattan&quot;) #計算manhattan距離 d ## Mazda RX4 Mazda RX4 Wag Datsun 710 Hornet 4 Drive ## Mazda RX4 Wag 0.5740 ## Datsun 710 7.5307 7.4780 ## Hornet 4 Drive 11.8673 11.2933 8.9891 ## Hornet Sportabout 11.2150 10.6410 15.4555 7.6572 ## Valiant 13.3742 12.8002 10.4828 2.1721 ## Duster 360 11.7820 11.8348 19.1258 11.5519 ## Merc 240D 10.6741 10.1001 5.6193 6.6700 ## Merc 230 11.2016 10.6276 6.2969 8.0648 ## Merc 280 6.4428 5.8688 7.9461 6.9357 ## Merc 280C 7.0109 6.4369 8.1672 6.8322 ## Merc 450SE 11.3772 10.8032 16.4306 8.3705 ## Merc 450SL 10.9923 10.4183 15.8219 7.7618 ## Merc 450SLC 11.6157 11.0417 15.9976 7.9375 ## Cadillac Fleetwood 15.4937 14.9197 21.1362 13.0761 ## Lincoln Continental 15.5001 14.9261 21.3217 13.2615 ## Chrysler Imperial 14.1093 13.5353 20.3786 12.8795 ## Fiat 128 10.6008 10.5481 3.2571 11.3173 ## Honda Civic 11.5343 11.4815 5.5295 14.5186 ## Toyota Corolla 11.8011 11.7484 4.4574 12.5176 ## Toyota Corona 11.4343 11.3815 4.9433 4.6838 ## Dodge Challenger 11.7697 11.3636 16.1781 8.1179 ## AMC Javelin 11.1309 10.5569 15.0580 7.2597 ## Camaro Z28 11.4113 11.4641 18.7550 13.1262 ## Pontiac Firebird 12.0164 11.4424 16.2233 8.1632 ## Fiat X1-9 9.7041 9.6513 2.3604 11.0249 ## Porsche 914-2 6.7567 7.0620 6.9555 15.7461 ## Lotus Europa 9.4453 9.5269 5.5626 13.7566 ## Ford Pantera L 9.3827 9.4354 16.9134 18.5443 ## Ferrari Dino 5.0926 5.3600 12.1942 15.6059 ## Maserati Bora 13.0517 13.1044 20.3954 20.7747 ## Volvo 142E 6.4917 6.1118 2.1517 9.0594 ## Hornet Sportabout Valiant Duster 360 Merc 240D Merc 230 ## Mazda RX4 Wag ## Datsun 710 ## Hornet 4 Drive ## Hornet Sportabout ## Valiant 8.4734 ## Duster 360 3.8947 12.1281 ## Merc 240D 12.8272 7.5370 16.4974 ## Merc 230 14.2219 8.6855 17.8922 2.8883 ## Merc 280 10.2477 7.3853 11.4415 5.9162 6.4507 ## Merc 280C 10.6499 6.9168 11.5450 5.8128 6.3472 ## Merc 450SE 2.7592 8.9093 4.2408 13.8023 15.1971 ## Merc 450SL 2.3743 8.3006 4.1546 13.1936 14.5883 ## Merc 450SLC 2.9977 8.4763 4.0811 13.3693 14.7640 ## Cadillac Fleetwood 6.7552 13.0912 5.5724 18.5079 19.9026 ## Lincoln Continental 6.7616 13.5385 5.2871 18.6933 20.0881 ## Chrysler Imperial 5.6700 13.4558 3.6663 17.7502 19.1450 ## Fiat 128 18.7126 12.7774 22.3829 6.5953 8.3297 ## Honda Civic 19.6461 16.0124 23.3163 8.4753 10.3264 ## Toyota Corolla 19.9129 13.4965 23.5832 7.2852 9.0487 ## Toyota Corona 12.0791 5.5396 15.7494 3.9460 5.1152 ## Dodge Challenger 2.1296 7.4972 4.6309 13.5497 14.9445 ## AMC Javelin 1.5590 7.8870 4.2922 12.4296 13.8244 ## Camaro Z28 5.6304 13.7025 1.7357 16.2763 17.5214 ## Pontiac Firebird 0.9673 9.1045 4.5963 13.5950 14.9897 ## Fiat X1-9 17.8159 12.5186 21.4861 6.3365 8.0709 ## Porsche 914-2 15.2266 17.2399 18.5387 10.5488 11.5539 ## Lotus Europa 17.1177 15.3962 20.6536 9.1135 10.5630 ## Ford Pantera L 11.4923 19.6214 8.3611 18.9326 19.4261 ## Ferrari Dino 12.6262 16.6814 12.4993 14.4599 15.7455 ## Maserati Bora 14.0696 21.3510 10.4072 21.7751 23.1699 ## Volvo 142E 14.2764 10.6698 17.9466 5.3827 5.7401 ## Merc 280 Merc 280C Merc 450SE Merc 450SL Merc 450SLC ## Mazda RX4 Wag ## Datsun 710 ## Hornet 4 Drive ## Hornet Sportabout ## Valiant ## Duster 360 ## Merc 240D ## Merc 230 ## Merc 280 ## Merc 280C 0.5681 ## Merc 450SE 9.9846 10.0881 ## Merc 450SL 9.3759 9.4794 0.6087 ## Merc 450SLC 9.5516 9.6551 0.8313 0.6234 ## Cadillac Fleetwood 13.4520 13.5554 5.3547 5.7396 5.1386 ## Lincoln Continental 13.6374 13.7409 5.3611 5.7460 5.3241 ## Chrysler Imperial 12.6943 12.7978 4.5688 5.1552 4.9795 ## Fiat 128 10.9414 10.8379 19.6878 19.0790 19.2547 ## Honda Civic 11.8748 12.1966 20.6212 20.0125 20.1881 ## Toyota Corolla 12.1417 12.0382 20.8881 20.2793 20.4550 ## Toyota Corona 7.8416 7.7381 13.0543 12.4455 12.6212 ## Dodge Challenger 10.9703 11.0738 2.9850 2.8988 2.9248 ## AMC Javelin 9.8604 9.9639 2.3379 2.2516 2.1782 ## Camaro Z28 11.0708 11.1743 5.2633 5.4019 5.2262 ## Pontiac Firebird 11.0156 11.5836 2.6033 2.4534 2.9746 ## Fiat X1-9 10.0446 9.9411 18.7910 18.1823 18.3580 ## Porsche 914-2 12.8561 13.4241 16.6270 16.2421 16.8655 ## Lotus Europa 11.3401 11.9082 18.5181 18.1332 18.7566 ## Ford Pantera L 13.5273 13.6308 11.9589 11.8727 11.9983 ## Ferrari Dino 10.4182 10.9863 12.7884 12.4035 13.0269 ## Maserati Bora 16.7192 16.8227 13.4637 13.3774 13.3039 ## Volvo 142E 6.5051 6.7374 15.2515 14.6428 14.8185 ## Cadillac Fleetwood Lincoln Continental Chrysler Imperial ## Mazda RX4 Wag ## Datsun 710 ## Hornet 4 Drive ## Hornet Sportabout ## Valiant ## Duster 360 ## Merc 240D ## Merc 230 ## Merc 280 ## Merc 280C ## Merc 450SE ## Merc 450SL ## Merc 450SLC ## Cadillac Fleetwood ## Lincoln Continental 0.6410 ## Chrysler Imperial 2.3078 1.8284 ## Fiat 128 24.3933 24.5788 23.6357 ## Honda Civic 25.3268 25.5122 24.5691 ## Toyota Corolla 25.5936 25.7791 24.8360 ## Toyota Corona 17.7598 17.9453 17.0022 ## Dodge Challenger 6.8364 7.1046 6.5741 ## AMC Javelin 6.8393 6.8457 5.7542 ## Camaro Z28 6.4244 6.1391 4.7753 ## Pontiac Firebird 5.9538 5.9602 5.1304 ## Fiat X1-9 23.4966 23.6820 22.7389 ## Porsche 914-2 21.9817 21.9881 20.5973 ## Lotus Europa 23.8728 23.8792 22.4884 ## Ford Pantera L 13.9335 13.6482 11.8198 ## Ferrari Dino 16.9049 16.9113 15.5205 ## Maserati Bora 15.9796 15.6943 13.8660 ## Volvo 142E 19.9571 20.1426 19.1995 ## Fiat 128 Honda Civic Toyota Corolla Toyota Corona ## Mazda RX4 Wag ## Datsun 710 ## Hornet 4 Drive ## Hornet Sportabout ## Valiant ## Duster 360 ## Merc 240D ## Merc 230 ## Merc 280 ## Merc 280C ## Merc 450SE ## Merc 450SL ## Merc 450SLC ## Cadillac Fleetwood ## Lincoln Continental ## Chrysler Imperial ## Fiat 128 ## Honda Civic 3.8986 ## Toyota Corolla 1.2003 3.7516 ## Toyota Corona 7.2379 10.4728 7.9569 ## Dodge Challenger 19.4352 20.3686 20.6355 12.8017 ## AMC Javelin 18.3151 19.2485 19.5154 11.6816 ## Camaro Z28 22.0121 22.9456 23.2124 15.4909 ## Pontiac Firebird 19.4805 20.4139 20.6808 12.8470 ## Fiat X1-9 1.4384 3.4937 2.0971 6.9791 ## Porsche 914-2 7.9868 7.4884 8.5408 11.7035 ## Lotus Europa 5.8443 5.5819 6.2985 10.0900 ## Ford Pantera L 19.3102 19.7200 19.9868 20.8170 ## Ferrari Dino 15.4514 16.3848 16.6517 15.5367 ## Maserati Bora 23.6525 24.5859 24.8528 23.7379 ## Volvo 142E 4.5485 5.4592 5.6365 6.0552 ## Dodge Challenger AMC Javelin Camaro Z28 Pontiac Firebird ## Mazda RX4 Wag ## Datsun 710 ## Hornet 4 Drive ## Hornet Sportabout ## Valiant ## Duster 360 ## Merc 240D ## Merc 230 ## Merc 280 ## Merc 280C ## Merc 450SE ## Merc 450SL ## Merc 450SLC ## Cadillac Fleetwood ## Lincoln Continental ## Chrysler Imperial ## Fiat 128 ## Honda Civic ## Toyota Corolla ## Toyota Corona ## Dodge Challenger ## AMC Javelin 1.2197 ## Camaro Z28 6.2053 5.8666 ## Pontiac Firebird 2.6715 2.4927 5.7801 ## Fiat X1-9 18.5384 17.4183 21.1154 18.5837 ## Porsche 914-2 15.7813 15.1424 18.1679 16.0280 ## Lotus Europa 17.7059 17.0335 20.2829 17.9191 ## Ford Pantera L 12.3464 11.9335 7.5252 12.4596 ## Ferrari Dino 13.9101 13.2713 12.1595 13.4276 ## Maserati Bora 14.1281 13.5635 10.2659 14.7712 ## Volvo 142E 14.9990 13.8789 17.5759 15.0442 ## Fiat X1-9 Porsche 914-2 Lotus Europa Ford Pantera L ## Mazda RX4 Wag ## Datsun 710 ## Hornet 4 Drive ## Hornet Sportabout ## Valiant ## Duster 360 ## Merc 240D ## Merc 230 ## Merc 280 ## Merc 280C ## Merc 450SE ## Merc 450SL ## Merc 450SLC ## Cadillac Fleetwood ## Lincoln Continental ## Chrysler Imperial ## Fiat 128 ## Honda Civic ## Toyota Corolla ## Toyota Corona ## Dodge Challenger ## AMC Javelin ## Camaro Z28 ## Pontiac Firebird ## Fiat X1-9 ## Porsche 914-2 6.9674 ## Lotus Europa 5.4346 5.2254 ## Ford Pantera L 18.4135 12.2316 16.0298 ## Ferrari Dino 14.5546 8.8964 11.0113 8.0560 ## Maserati Bora 22.7557 17.0976 19.2125 5.7847 ## Volvo 142E 3.6517 6.6867 5.9981 14.7618 ## Ferrari Dino Maserati Bora ## Mazda RX4 Wag ## Datsun 710 ## Hornet 4 Drive ## Hornet Sportabout ## Valiant ## Duster 360 ## Merc 240D ## Merc 230 ## Merc 280 ## Merc 280C ## Merc 450SE ## Merc 450SL ## Merc 450SLC ## Cadillac Fleetwood ## Lincoln Continental ## Chrysler Imperial ## Fiat 128 ## Honda Civic ## Toyota Corolla ## Toyota Corona ## Dodge Challenger ## AMC Javelin ## Camaro Z28 ## Pontiac Firebird ## Fiat X1-9 ## Porsche 914-2 ## Lotus Europa ## Ford Pantera L ## Ferrari Dino ## Maserati Bora 8.2011 ## Volvo 142E 11.0356 19.2163 Hierarchical Clustering -hclust() 用hclust函數畫圖，必要參數是個觀察職的距離（可用dist()函數計算） par(mar=rep(2,4),mfrow=c(1,1)) hc&lt;-hclust(dist(mtcars.mxs)) #可用method參數設定聚合方法，預設為complete plot(hc) Hierarchical Clustering -hclust() 用hclust函數畫圖，必要參數是個觀察職的距離（可用dist()函數計算） par(mar=rep(2,4),mfrow=c(1,1)) hc&lt;-hclust(dist(mtcars.mxs),method=&quot;average&quot;) #聚合方法為計算平均距離 plot(hc) Hierarchical Clustering -cutree() clusterCut &lt;- cutree(hc, k=5) #分5群 sort(clusterCut) ## Mazda RX4 Mazda RX4 Wag Porsche 914-2 Ferrari Dino ## 1 1 1 1 ## Datsun 710 Fiat 128 Honda Civic Toyota Corolla ## 2 2 2 2 ## Fiat X1-9 Lotus Europa Volvo 142E Hornet 4 Drive ## 2 2 2 3 ## Valiant Merc 240D Merc 230 Merc 280 ## 3 3 3 3 ## Merc 280C Toyota Corona Hornet Sportabout Duster 360 ## 3 3 4 4 ## Merc 450SE Merc 450SL Merc 450SLC Cadillac Fleetwood ## 4 4 4 4 ## Lincoln Continental Chrysler Imperial Dodge Challenger AMC Javelin ## 4 4 4 4 ## Camaro Z28 Pontiac Firebird Ford Pantera L Maserati Bora ## 4 4 5 5 HC- clusters &amp; variables ggplot()+geom_point(data=mtcars, aes(x=hp,y=mpg,color=as.factor(clusterCut))) Hierarchical Clustering -cutree(),2 clusterCut &lt;- cutree(hc,h =4) #切在高度=4的地方（距離=4） sort(clusterCut) ## Mazda RX4 Mazda RX4 Wag Datsun 710 Fiat 128 ## 1 1 1 1 ## Honda Civic Toyota Corolla Fiat X1-9 Porsche 914-2 ## 1 1 1 1 ## Lotus Europa Ferrari Dino Volvo 142E Hornet 4 Drive ## 1 1 1 2 ## Valiant Merc 240D Merc 230 Merc 280 ## 2 2 2 2 ## Merc 280C Toyota Corona Hornet Sportabout Duster 360 ## 2 2 3 3 ## Merc 450SE Merc 450SL Merc 450SLC Cadillac Fleetwood ## 3 3 3 3 ## Lincoln Continental Chrysler Imperial Dodge Challenger AMC Javelin ## 3 3 3 3 ## Camaro Z28 Pontiac Firebird Ford Pantera L Maserati Bora ## 3 3 4 4 Cluster the data -heatmap(),2 par(mar=rep(0.2,4),mfrow=c(1,1)) heatmap(mtcars.mxs) Hierarchical clustering - hclust distxy &lt;- dist(mtcars.mxs) hClustering &lt;- hclust(distxy) plot(hClustering) Hierarchical clustering: summary - 可快速瀏覽觀察值與各欄位的關係 分群結果可能被以下參數影響： 計算距離的方法 分群依據 更改數值的大小 可能會遇到的問題： 有時會不太清楚要如何切割分群結果 9.3 K-means clustering 執行步驟 指定要分幾群 計算每一群的中心點 將各個物件/觀察值指定給最近的中心點 依照新的分群計算新的中心點 輸入 計算距離的資料（數值） 要分成幾群 # of clusters 預設個群的中間點位置 產出 計算出每’群‘的中心點 指定每個觀察值所在的’群‘ x&lt;-scale(mtcars$hp[-1]);y&lt;-scale(mtcars$mpg[-1]) plot(x,y,col=&quot;blue&quot;,pch=19,cex=2) text(x+0.05,y+0.05,labels=labelCar) 9.4 kmeans() Important parameters: x, centers, iter.max, nstart dataFrame &lt;- data.frame(x,y) kmeansObj &lt;- kmeans(dataFrame,centers=3) names(kmeansObj) ## [1] &quot;cluster&quot; &quot;centers&quot; &quot;totss&quot; &quot;withinss&quot; &quot;tot.withinss&quot; ## [6] &quot;betweenss&quot; &quot;size&quot; &quot;iter&quot; &quot;ifault&quot; kmeansObj$cluster ## [1] 1 1 1 3 1 3 1 1 1 1 3 3 3 3 3 3 2 2 2 1 3 3 3 3 2 2 2 3 3 3 1 par(mar=rep(0.2,4)) plot(x,y,col=kmeansObj$cluster,pch=19,cex=2) points(kmeansObj$centers,col=1:3,pch=3,cex=3,lwd=3) 9.4.1 Heatmaps set.seed(1234) dataMatrix &lt;- as.matrix(dataFrame)[sample(1:12),] kmeansObj &lt;- kmeans(dataMatrix,centers=3) par(mfrow=c(1,2), mar = c(2, 4, 0.1, 0.1)) image(t(dataMatrix)[,nrow(dataMatrix):1],yaxt=&quot;n&quot;) image(t(dataMatrix)[,order(kmeansObj$cluster)],yaxt=&quot;n&quot;) 9.4.2 K-means注意事項 需要決定# of clusters 用眼睛/人工/特殊要求選 用 cross validation/information theory選 Determining the number of clusters K-means 沒有一定的結果 不同的 # of clusters 不同的 # of iterations kmeans(), k=2 kmeans(), k=3 kmeans(), k=4 Use sum of squared error (SSE) scree plot to optimize the number of clusters SSE: The sum of the squared distance between each member of a cluster and its cluster centroid. 參考資料 SSE screen plot withinss dataMatrix &lt;- as.matrix(dataFrame)[sample(1:12),] wss &lt;- (nrow(dataMatrix)-1)*sum(apply(dataMatrix,2,var)) for (i in 2:(nrow(dataMatrix)-1)) { wss[i] &lt;- sum(kmeans(dataMatrix,centers=i)$withinss) } par(mfrow=c(1,1), mar = c(4,4,1,1)) #下,左,上,右 plot(1:(nrow(dataMatrix)-1), wss, type=&quot;b&quot;, xlab=&quot;Number of Clusters&quot;, ylab=&quot;Within groups sum of squares&quot;) 9.5 Machine Learning 機器學習 什麼是Machine Learning？ - Learning from data - Machine learning from data 什麼是Machine Learning？ - 建立可以從輸入資料學習新資訊，變成智慧的演算法 - 演算法可以基於輸入資料，預測事件或協助決策 資料太少？太髒？–&gt;學不好 Data —- Machine Learning —-&gt; Skill Skill: 變準/變好/賺更多…etc Machine Learning vs. Artificial Intelligence - ML: use data to compute something that improves performance - AI: compute something that shows intelligent behavior ML is one possible and popular route to realize AI Machine Learning無所不在 - 天氣預測 - 搜尋建議、購物建議 - 股市預測 - 臉部辨識、指紋辨識 - 垃圾郵件標記 - 尿布啤酒 什麼時候需要ML? - 有一些模式/模型可學 - 很難定義這些模式/模型 - 有資料可學這些模式/模型 Machine Learning步驟 Learning 種類 - Classification 分類 - 分兩類（P/N, Yes/No, M/F, Sick/Not sick） - 分多類 (A/B/C/D) Regression 迴歸 真實的’值’（股票、氣溫） Ranking 排序（Google page rank） Clustering 分群 Machine Learning 種類 -1 Supervised learning 監督式學習 Regression 迴歸 Linear Regression 線性迴歸 Logistic Regression 羅吉斯迴歸、邏輯迴歸 Classification 分類 Support Vector Machines 支持向量機 Decision Trees 決策樹 Neural Networks 神經網路 K-Nearest Neighbor Supervised learning 監督式學習 出處 Machine Learning 種類 -2 - Unsupervised learning 非監督式學習 - Clustering! 分群 - Hierarchical clustering 階層式分群 - K-means clustering - Association Rules 關聯式規則 Unsupervised learning 非監督式學習 出處 怎麼選Algorithms? Regression Analysis 迴歸分析 了解兩個或多個變數間是否相關、相關方向與強度，並建立數學模型以便觀察特定變數來預測研究者感興趣的變數 Linear Regression 線性迴歸 Logistic Regression 羅吉斯迴歸、邏輯迴歸 Wiki Linear Regression 線性迴歸 出處 Logistic Regression 邏輯迴歸 Regression Analysis 迴歸分析 Linear Regression 線性迴歸 Logistic Regression 羅吉斯迴歸、邏輯迴歸 來用在NBA的資料看看！ #讀入SportsAnalytics package if (!require(&#39;SportsAnalytics&#39;)){ install.packages(&quot;SportsAnalytics&quot;) library(SportsAnalytics) } #擷取2015-2016年球季球員資料 NBA1516&lt;-fetch_NBAPlayerStatistics(&quot;15-16&quot;) NBA得分與上場分鐘數的線性迴歸分析 library(ggplot2) ggplot(NBA1516,aes(x=TotalMinutesPlayed,y=TotalPoints))+ geom_point()+geom_smooth(method = &quot;glm&quot;) 簡單線性迴歸分析- glm() # formula: Y~X1+X2+...+Xn Y:依變項 X:自變項 # data: 資料 glm(TotalPoints~TotalMinutesPlayed,data =NBA1516) ## ## Call: glm(formula = TotalPoints ~ TotalMinutesPlayed, data = NBA1516) ## ## Coefficients: ## (Intercept) TotalMinutesPlayed ## -85.907 0.493 ## ## Degrees of Freedom: 475 Total (i.e. Null); 474 Residual ## Null Deviance: 99400000 ## Residual Deviance: 16700000 AIC: 6340 TotalPoints = 0.4931 * TotalMinutesPlayed -85.9071 其實glm()是廣義線性迴歸模型 - generalized linear models (glm) - 包括了線性迴歸模型和邏輯迴歸模型 - 線性模型也可用lm() - 如何修改預設模型？ - family=&quot;gaussian&quot; 線性模型模型 - family=&quot;binomial&quot; 邏輯迴歸模型 - family=&quot;poisson&quot; 卜瓦松迴歸模型 Gaussian distribution 高斯函數是常態分布的密度函數 Binomial distribution 二項分布是n個獨立的是/非試驗中成功的次數的離散機率分布 Poisson distribution 次數分佈 某一服務設施在一定時間內受到的服務請求的次數 公車站的候客人數 機器故障數 自然災害發生的次數 DNA序列的變異數….. 得分與上場分鐘數和兩分球出手數的關係 - 多變量線性迴歸分析 # e+01: 10^1 / e-04: 10^(-4) glm(TotalPoints~TotalMinutesPlayed+FieldGoalsAttempted, data =NBA1516) ## ## Call: glm(formula = TotalPoints ~ TotalMinutesPlayed + FieldGoalsAttempted, ## data = NBA1516) ## ## Coefficients: ## (Intercept) TotalMinutesPlayed FieldGoalsAttempted ## -1.80e+01 -2.35e-04 1.26e+00 ## ## Degrees of Freedom: 475 Total (i.e. Null); 473 Residual ## Null Deviance: 99400000 ## Residual Deviance: 2160000 AIC: 5370 TotalPoints = -0.0002347 * TotalMinutesPlayed + 1.255794 *FieldGoalsAttempted -17.99 得分與上場分鐘數和兩分球出手數和守備位置的關係 - 多變量線性迴歸分析 glm(TotalPoints~TotalMinutesPlayed+FieldGoalsAttempted+Position, data =NBA1516) ## ## Call: glm(formula = TotalPoints ~ TotalMinutesPlayed + FieldGoalsAttempted + ## Position, data = NBA1516) ## ## Coefficients: ## (Intercept) TotalMinutesPlayed FieldGoalsAttempted ## 22.85222 -0.00654 1.27572 ## PositionPF PositionPG PositionSF ## -39.41633 -65.03465 -38.52230 ## PositionSG ## -52.17514 ## ## Degrees of Freedom: 474 Total (i.e. Null); 468 Residual ## (1 observation deleted due to missingness) ## Null Deviance: 99100000 ## Residual Deviance: 1970000 AIC: 5320 # e+01: 10^1 / e-04: 10^(-4) TotalPoints = -0.0065 * TotalMinutesPlayed + 1.28 FieldGoalsAttempted +22.85 + 22.85 PositionPF + -65.03 * PositionPG + -38.52 * PositionSF + -52.18 * PositionSG 虛擬變項 Dummy Variable PositionPF? PositionPG? PositionSF? PositionSG? 如果是控球後衛（PG），會得到… PositionPF=0 PositionPG=1 PositionSF=0 PositionSG=0 中鋒去哪了？—基準項 PositionPF=0 PositionPG=0 PositionSF=0 PositionSG=0 多變量線性迴歸分析 假設：各變數相互獨立！ 若自變項X是類別變項，需要建立虛擬變項 在R裡，類別變項請記得轉成factor，R會自動建立虛擬變項 用在依變數為連續變數，自變數為連續變數或虛擬變數的場合 class(NBA1516$Position) ## [1] &quot;factor&quot; levels(NBA1516$Position) ## [1] &quot;C&quot; &quot;PF&quot; &quot;PG&quot; &quot;SF&quot; &quot;SG&quot; 用哪個計算比較準？ 可能不一定有適合的模型 常用的判斷準則 Akaike’s Information Criterion (AIC) Bayesian Information Criterion (BIC) 數值越小越好 用哪個計算比較準？ OneVar&lt;-glm(TotalPoints~TotalMinutesPlayed,data =NBA1516) TwoVar&lt;-glm(TotalPoints~TotalMinutesPlayed+FieldGoalsAttempted, data =NBA1516) ThreeVar&lt;-glm(TotalPoints~TotalMinutesPlayed+FieldGoalsAttempted+Position, data =NBA1516) c(OneVar$aic,TwoVar$aic,ThreeVar$aic) ## [1] 6339 5367 5322 所有參數都有用嗎？ sum2&lt;-summary(TwoVar) sum2$coefficients ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -1.799e+01 5.659758 -3.17833 1.578e-03 ## TotalMinutesPlayed -2.347e-04 0.009475 -0.02477 9.802e-01 ## FieldGoalsAttempted 1.256e+00 0.022239 56.46683 2.474e-212 所有參數都有用嗎？ sum3&lt;-summary(ThreeVar) sum3$coefficients ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 22.852223 9.01471 2.5350 1.157e-02 ## TotalMinutesPlayed -0.006537 0.00920 -0.7105 4.777e-01 ## FieldGoalsAttempted 1.275721 0.02165 58.9325 1.145e-218 ## PositionPF -39.416327 9.93654 -3.9668 8.426e-05 ## PositionPG -65.034646 10.26925 -6.3329 5.649e-10 ## PositionSF -38.522299 10.48817 -3.6729 2.675e-04 ## PositionSG -52.175144 9.98533 -5.2252 2.625e-07 Regression Analysis 迴歸分析 Linear Regression 線性迴歸 Logistic Regression 羅吉斯迴歸 Logistic Regression 羅吉斯迴歸 用在依變數為二元變數（非0即1）的場合 生病/沒生病 錄取/不錄取 family=&quot;binomial&quot; 邏輯迴歸模型 為什麼錄取/不錄取？ mydata &lt;- read.csv(&quot;http://www.ats.ucla.edu/stat/data/binary.csv&quot;) # GRE:某考試成績, GPA:在校平均成績, rank:學校聲望 head(mydata) ## admit gre gpa rank ## 1 0 380 3.61 3 ## 2 1 660 3.67 3 ## 3 1 800 4.00 1 ## 4 1 640 3.19 4 ## 5 0 520 2.93 4 ## 6 1 760 3.00 2 Hmm…. mydata$rank &lt;- factor(mydata$rank) mylogit &lt;- glm(admit ~ gre + gpa + rank, data = mydata, family = &quot;binomial&quot;) sum&lt;-summary(mylogit) sum$coefficients ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -3.989979 1.139951 -3.500 0.0004650 ## gre 0.002264 0.001094 2.070 0.0384651 ## gpa 0.804038 0.331819 2.423 0.0153879 ## rank2 -0.675443 0.316490 -2.134 0.0328288 ## rank3 -1.340204 0.345306 -3.881 0.0001039 ## rank4 -1.551464 0.417832 -3.713 0.0002047 9.6 Decision Trees 決策樹 什麼是決策樹？ 在樹狀目錄中建立一系列分割，以建立模型。這些分割會表示成「節點」(Node)。每次發現輸入資料行與可預測資料行有明顯地相互關聯時，此演算法就會在模型中加入一個節點。演算法決定分岔的方式不同，視它預測連續資料行或分隔資料行而定。 決策樹的種類 - Classificaiton - Regression - Classification And Regression Tree (CART) 用籃板/三分/助攻/抄截來判斷位置 if (!require(&#39;rpart&#39;)){ install.packages(&quot;rpart&quot;) library(rpart) } DT&lt;-rpart(Position~Blocks+ThreesMade+Assists+Steals,data=NBA1516) DT ## n=475 (1 observation deleted due to missingness) ## ## node), split, n, loss, yval, (yprob) ## * denotes terminal node ## ## 1) root 475 364 PF (0.15 0.23 0.21 0.18 0.23) ## 2) ThreesMade&lt; 2.5 132 74 C (0.44 0.35 0.098 0.053 0.061) ## 4) Blocks&gt;=4.5 89 37 C (0.58 0.38 0.011 0.011 0.011) * ## 5) Blocks&lt; 4.5 43 31 PF (0.14 0.28 0.28 0.14 0.16) ## 10) Steals&lt; 2.5 29 19 PF (0.17 0.34 0.14 0.21 0.14) * ## 11) Steals&gt;=2.5 14 6 PG (0.071 0.14 0.57 0 0.21) * ## 3) ThreesMade&gt;=2.5 343 242 SG (0.035 0.19 0.25 0.23 0.29) ## 6) Assists&gt;=170.5 96 39 PG (0.031 0.052 0.59 0.15 0.18) * ## 7) Assists&lt; 170.5 247 163 SG (0.036 0.24 0.12 0.26 0.34) ## 14) Blocks&gt;=20.5 80 42 PF (0.062 0.48 0 0.26 0.2) ## 28) Steals&lt; 59.5 58 21 PF (0.069 0.64 0 0.14 0.16) * ## 29) Steals&gt;=59.5 22 9 SF (0.045 0.045 0 0.59 0.32) * ## 15) Blocks&lt; 20.5 167 99 SG (0.024 0.13 0.17 0.26 0.41) ## 30) Assists&lt; 81.5 110 68 SG (0.027 0.18 0.091 0.32 0.38) ## 60) Blocks&gt;=4.5 63 39 SF (0.032 0.29 0.016 0.38 0.29) ## 120) ThreesMade&lt; 13.5 19 9 PF (0.11 0.53 0 0.26 0.11) * ## 121) ThreesMade&gt;=13.5 44 25 SF (0 0.18 0.023 0.43 0.36) ## 242) Blocks&lt; 9.5 17 7 SF (0 0.18 0.059 0.59 0.18) * ## 243) Blocks&gt;=9.5 27 14 SG (0 0.19 0 0.33 0.48) * ## 61) Blocks&lt; 4.5 47 23 SG (0.021 0.043 0.19 0.23 0.51) * ## 31) Assists&gt;=81.5 57 31 SG (0.018 0.035 0.33 0.16 0.46) ## 62) ThreesMade&lt; 37 17 5 PG (0 0.12 0.71 0.059 0.12) * ## 63) ThreesMade&gt;=37 40 16 SG (0.025 0 0.17 0.2 0.6) * #控球後衛（PG）、得分後衛（SG）、小前鋒（SF）、大前鋒（PF）和中鋒（C） 用籃板/三分/助攻/抄截來判斷位置 par(mfrow=c(1,1), mar = rep(1,4)) #下,左,上,右 plot(DT) text(DT, use.n=F, all=F, cex=1) #控球後衛（PG）、得分後衛（SG）、小前鋒（SF）、大前鋒（PF）和中鋒（C） 用籃板/三分/助攻/抄截來判斷位置 預設的plot()真的太難用，改用rpart.plot package裡面的prp() if (!require(&#39;rpart.plot&#39;)){ install.packages(&quot;rpart.plot&quot;) library(rpart.plot) } prp(DT) # Will plot the tree 用籃板/三分/助攻/抄截來判斷位置 prp(DT) 決策樹演算法怎麼決定節點 - Gini impurity - Information gain - Variance reduction …有機會再說吧…… 9.7 Association Rules 關聯式規則 什麼是關聯式規則？ - 用於從大量數據中挖掘出有價值的數據項之間的相關關係 - 不考慮項目的次序，而僅考慮其組合 - 購物籃分析 (Market Basket Analysis) - Apriori演算法是挖掘布林關聯規則 (Boolean association rules) 頻繁項集的算法 Apriori演算法 超市資料分析：讀取資料 # Load the libraries if (!require(&#39;arules&#39;)){ install.packages(&quot;arules&quot;);library(arules) #for Apriori演算法 } if (!require(&#39;datasets&#39;)){ install.packages(&quot;datasets&quot;);library(datasets) #for Groceries data } data(Groceries) # Load the data set Groceries@data@Dim #169 種商品，9835筆交易資料 ## [1] 169 9835 超市資料長這樣 超市資料分析：關聯式分析apriori() # Get the rules rules &lt;- apriori(Groceries, # data= Groceries parameter = list(supp = 0.001, conf = 0.8), #參數最低限度 control = list(verbose=F)) #不要顯示output options(digits=2) # Only 2 digits inspect(rules[1:5]) # Show the top 5 rules ## lhs rhs support confidence lift ## [1] {liquor,red/blush wine} =&gt; {bottled beer} 0.0019 0.90 11.2 ## [2] {curd,cereals} =&gt; {whole milk} 0.0010 0.91 3.6 ## [3] {yogurt,cereals} =&gt; {whole milk} 0.0017 0.81 3.2 ## [4] {butter,jam} =&gt; {whole milk} 0.0010 0.83 3.3 ## [5] {soups,bottled beer} =&gt; {whole milk} 0.0011 0.92 3.6 如何解讀模型 啤酒=&gt;尿布 Support: 一次交易中，包括規則內的物品的機率。買啤酒同時買尿布的機率。交集 Confidence: 包含左邊物品A的交易也會包含右邊物品B的條件機率。在買了啤酒的顧客中，有買尿布的比例。 Lift: 規則的信心比期望值高多少。（買了啤酒以後，有買尿布的機率）/（在所有顧客群中買尿布的機率） lift=1: items on the left and right are independent. 列出最有關連的幾條規則 rules&lt;-sort(rules, by=&quot;confidence&quot;, decreasing=TRUE) #按照confidence排序 inspect(rules[1:5]) # Show the top 5 rules ## lhs rhs support confidence lift ## [1] {rice, ## sugar} =&gt; {whole milk} 0.0012 1 3.9 ## [2] {canned fish, ## hygiene articles} =&gt; {whole milk} 0.0011 1 3.9 ## [3] {root vegetables, ## butter, ## rice} =&gt; {whole milk} 0.0010 1 3.9 ## [4] {root vegetables, ## whipped/sour cream, ## flour} =&gt; {whole milk} 0.0017 1 3.9 ## [5] {butter, ## soft cheese, ## domestic eggs} =&gt; {whole milk} 0.0010 1 3.9 特別針對某項商品，右邊 買了什麼東西的人，會買牛奶呢？ rulesR&lt;-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.08), appearance = list(default=&quot;lhs&quot;,rhs=&quot;whole milk&quot;), #設定右邊一定要是牛奶 control = list(verbose=F)) #不要顯示output rulesR&lt;-sort(rulesR, decreasing=TRUE,by=&quot;confidence&quot;) #按照confidence排序 inspect(rulesR[1:5]) # Show the top 5 rules ## lhs rhs support confidence lift ## [1] {rice, ## sugar} =&gt; {whole milk} 0.0012 1 3.9 ## [2] {canned fish, ## hygiene articles} =&gt; {whole milk} 0.0011 1 3.9 ## [3] {root vegetables, ## butter, ## rice} =&gt; {whole milk} 0.0010 1 3.9 ## [4] {root vegetables, ## whipped/sour cream, ## flour} =&gt; {whole milk} 0.0017 1 3.9 ## [5] {butter, ## soft cheese, ## domestic eggs} =&gt; {whole milk} 0.0010 1 3.9 特別針對某項商品，左邊 買了牛奶的人，會買什麼呢？ rulesL&lt;-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.15,minlen=2), appearance = list(default=&quot;rhs&quot;,lhs=&quot;whole milk&quot;), #設定左邊一定要是牛奶 control = list(verbose=F)) #不要顯示output rulesL&lt;-sort(rulesL, decreasing=TRUE,by=&quot;confidence&quot;) #按照confidence排序 inspect(rulesL[1:5]) # Show the top 5 rules ## lhs rhs support confidence lift ## [1] {whole milk} =&gt; {other vegetables} 0.075 0.29 1.5 ## [2] {whole milk} =&gt; {rolls/buns} 0.057 0.22 1.2 ## [3] {whole milk} =&gt; {yogurt} 0.056 0.22 1.6 ## [4] {whole milk} =&gt; {root vegetables} 0.049 0.19 1.8 ## [5] {whole milk} =&gt; {tropical fruit} 0.042 0.17 1.6 規則視覺化 if (!require(&#39;arulesViz&#39;)){ install.packages(&quot;arulesViz&quot;); library(arulesViz) } #Mac-&gt;http://planspace.org/2013/01/17/fix-r-tcltk-dependency-problem-on-mac/ plot(rules,method=&quot;graph&quot;,interactive=TRUE,shading=NA) #會跑一陣子 9.7.1 參考資料 台大資工林軒田教授（田神）： Machine Learning Foundations Machine Learning Techniques Market Basket Analysis with R 模型驗證？！ - Training set, Development set: 讓演算法學到知識 - Test set, Validation set: 驗證學的怎麼樣 - 通常會比例分配 - 2/3的資料設為Training set - 剩下的1/3做驗證Test set 把NBA的資料讀入 #讀入SportsAnalytics package if (!require(&#39;SportsAnalytics&#39;)){ install.packages(&quot;SportsAnalytics&quot;) library(SportsAnalytics) } #擷取2015-2016年球季球員資料 NBA1516&lt;-fetch_NBAPlayerStatistics(&quot;15-16&quot;) NBA1516&lt;-NBA1516[complete.cases(NBA1516),] 9.8 Regression 迴歸 哪個模型比較好？ OneVar&lt;-glm(TotalPoints~TotalMinutesPlayed,data =NBA1516) TwoVar&lt;-glm(TotalPoints~TotalMinutesPlayed+FieldGoalsAttempted, data =NBA1516) ThreeVar&lt;-glm(TotalPoints~TotalMinutesPlayed+FieldGoalsAttempted+Position, data =NBA1516) c(OneVar$aic,TwoVar$aic,ThreeVar$aic) ## [1] 6326 5356 5322 好！？ - 以Training set來選看起來最好的模型 - 用Test set來驗證模型是不是真的很好 - 想像…..訓練出來題庫答得好的學生，寫到新題目不一定會寫！？ 隨機抽樣？ sample(1:10,3) # 從1到10，隨機取三個數字 ## [1] 1 4 5 sample(1:nrow(NBA1516),nrow(NBA1516)/3) #從第一行到最後一行，隨機取1/3行數 ## [1] 388 398 6 271 143 19 169 126 455 444 287 448 407 56 275 165 310 293 ## [19] 319 286 462 128 79 77 253 193 175 378 94 228 176 115 356 136 35 417 ## [37] 167 144 291 339 211 404 22 437 443 145 400 208 434 133 255 464 257 186 ## [55] 236 395 350 121 352 108 141 231 78 210 382 468 146 24 361 428 326 96 ## [73] 277 346 181 69 203 347 14 103 371 243 374 320 20 118 200 276 111 180 ## [91] 281 50 358 151 95 360 457 157 337 413 357 179 42 235 109 308 122 322 ## [109] 11 198 449 392 177 81 184 4 32 466 195 416 263 380 212 252 164 76 ## [127] 41 471 222 391 197 244 335 332 40 65 64 154 429 328 34 475 343 323 ## [145] 2 460 325 430 113 100 321 300 354 359 174 199 254 338 把NBA的資料分成Training 和 Test set NBA1516$Test&lt;-F #新增一個參數紀錄分組 #隨機取1/3當Test set NBA1516[sample(1:nrow(NBA1516),nrow(NBA1516)/3),]$Test&lt;-T # Training set : Test set球員數 c(sum(NBA1516$Test==F),sum(NBA1516$Test==T)) ## [1] 317 158 訓練一個多變數線性迴歸模型 fit&lt;-glm(TotalPoints~TotalMinutesPlayed+FieldGoalsAttempted+ Position+ThreesAttempted+FreeThrowsAttempted, data =NBA1516[NBA1516$Test==F,]) fit$aic ## [1] 3353 summary(fit)$coefficients ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 16.1576 8.7015 1.9 6.4e-02 ## TotalMinutesPlayed -0.0089 0.0081 -1.1 2.8e-01 ## FieldGoalsAttempted 1.0018 0.0256 39.1 2.0e-121 ## PositionPF -22.6084 9.0825 -2.5 1.3e-02 ## PositionPG -48.4574 10.4378 -4.6 5.1e-06 ## PositionSF -24.1427 10.1412 -2.4 1.8e-02 ## PositionSG -39.0153 10.0900 -3.9 1.3e-04 ## ThreesAttempted 0.2188 0.0341 6.4 5.3e-10 ## FreeThrowsAttempted 0.7521 0.0408 18.4 1.2e-51 逐步選擇模型 stepwise 後退學習：一開始先將所有參數加到模型裡，再一個一個拿掉 library(MASS) ##根據AIC，做逐步選擇, 預設倒退學習 direction = &quot;backward&quot; ##trace=FALSE: 不要顯示步驟 finalModel_B&lt;-stepAIC(fit,direction = &quot;backward&quot;,trace=FALSE) summary(finalModel_B)$coefficients ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 12.40 7.996 1.6 1.2e-01 ## FieldGoalsAttempted 0.98 0.019 52.9 7.0e-157 ## PositionPF -21.37 9.015 -2.4 1.8e-02 ## PositionPG -46.80 10.330 -4.5 8.4e-06 ## PositionSF -23.28 10.114 -2.3 2.2e-02 ## PositionSG -38.03 10.053 -3.8 1.9e-04 ## ThreesAttempted 0.22 0.034 6.4 7.5e-10 ## FreeThrowsAttempted 0.75 0.041 18.5 4.9e-52 逐步選擇模型 stepwise 往前學習：一開始先做一個沒有參數的模型，再把參數一個一個加進去 ##根據AIC，做逐步選擇, 往前學習 direction = &quot;forward&quot; finalModel_F&lt;-stepAIC(fit,direction = &quot;forward&quot;,trace=FALSE) summary(finalModel_F)$coefficients ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 16.1576 8.7015 1.9 6.4e-02 ## TotalMinutesPlayed -0.0089 0.0081 -1.1 2.8e-01 ## FieldGoalsAttempted 1.0018 0.0256 39.1 2.0e-121 ## PositionPF -22.6084 9.0825 -2.5 1.3e-02 ## PositionPG -48.4574 10.4378 -4.6 5.1e-06 ## PositionSF -24.1427 10.1412 -2.4 1.8e-02 ## PositionSG -39.0153 10.0900 -3.9 1.3e-04 ## ThreesAttempted 0.2188 0.0341 6.4 5.3e-10 ## FreeThrowsAttempted 0.7521 0.0408 18.4 1.2e-51 逐步選擇模型 stepwise 雙向學習：參數加加減減 ##根據AIC，做逐步選擇, 雙向學習 direction = &quot;both&quot; finalModel_Both&lt;-stepAIC(fit,direction = &quot;both&quot;,trace=FALSE) summary(finalModel_Both)$coefficients ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 12.40 7.996 1.6 1.2e-01 ## FieldGoalsAttempted 0.98 0.019 52.9 7.0e-157 ## PositionPF -21.37 9.015 -2.4 1.8e-02 ## PositionPG -46.80 10.330 -4.5 8.4e-06 ## PositionSF -23.28 10.114 -2.3 2.2e-02 ## PositionSG -38.03 10.053 -3.8 1.9e-04 ## ThreesAttempted 0.22 0.034 6.4 7.5e-10 ## FreeThrowsAttempted 0.75 0.041 18.5 4.9e-52 用Test set來評估模型好不好 predictPoint&lt;-predict(finalModel_Both, #Test==T, test data newdata = NBA1516[NBA1516$Test==T,]) cor(x=predictPoint,y=NBA1516[NBA1516$Test==T,]$TotalPoints) #相關係數 ## [1] 1 plot(x=predictPoint,y=NBA1516[NBA1516$Test==T,]$TotalPoints) 9.9 Logistic Regression 邏輯迴歸 把入學資料分成Training 和 Test set 注意：當答案有正反兩面時，Level 1 要放正面答案–&gt;有病/錄取… mydata &lt;- read.csv(&quot;http://www.ats.ucla.edu/stat/data/binary.csv&quot;) mydata$admit &lt;- factor(mydata$admit) # 類別變項要轉為factor mydata$rank &lt;- factor(mydata$rank) # 類別變項要轉為factor mydata$Test&lt;-F #新增一個參數紀錄分組 mydata[sample(1:nrow(mydata),nrow(mydata)/3),]$Test&lt;-T #隨機取1/3當Test set c(sum(mydata$Test==F),sum(mydata$Test==T)) # Training set : Test set學生數 ## [1] 267 133 #修改一下factor的level: 改成Level 1為錄取，2為不錄取--&gt;Level 1 要放正面答案 mydata$admit&lt;-factor(mydata$admit,levels=c(1,0)) 逐步選擇最好的模型 # GRE:某考試成績, GPA:在校平均成績, rank:學校聲望 mylogit &lt;- glm(admit ~ gre + gpa + rank, data = mydata[mydata$Test==F,], family = &quot;binomial&quot;) finalFit&lt;-stepAIC(mylogit,direction = &quot;both&quot;,trace=FALSE) # 雙向逐步選擇模型 summary(finalFit) ## ## Call: ## glm(formula = admit ~ gre + gpa + rank, family = &quot;binomial&quot;, ## data = mydata[mydata$Test == F, ]) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -2.167 -1.063 0.612 0.876 1.701 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 3.82483 1.44297 2.65 0.00803 ** ## gre -0.00187 0.00129 -1.45 0.14834 ## gpa -0.88405 0.42164 -2.10 0.03602 * ## rank2 0.88805 0.39692 2.24 0.02526 * ## rank3 1.49777 0.42011 3.57 0.00036 *** ## rank4 2.03509 0.52784 3.86 0.00012 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 332.54 on 266 degrees of freedom ## Residual deviance: 300.66 on 261 degrees of freedom ## AIC: 312.7 ## ## Number of Fisher Scoring iterations: 4 來預測一下新學生可不可以錄取 AdmitProb&lt;-predict(finalFit, # 用Training set做的模型 newdata = mydata[mydata$Test==T,], #Test==T, test data type=&quot;response&quot;) #結果為每個人被錄取的機率 head(AdmitProb) ## 2 16 18 19 20 23 ## 0.82 0.73 0.67 0.27 0.64 0.84 table(AdmitProb&lt;0.5,mydata[mydata$Test==T,]$admit) # row,column ## ## 1 0 ## FALSE 27 90 ## TRUE 10 6 當答案是二元時：效能指標 - Sensitivity 敏感性 - Specificity 特異性 - Positive Predictive Value (PPV) 陽性預測值 - Negative Predictive Value (NPV) 陰性預測值 名詞解釋 TP: 有病且預測也有病 TN: 沒病且預測也沒病 FP: 沒病但是預測有病 FN: 有病但預測沒病 當答案是二元時：效能指標公式 Sensitivity 敏感性：所有真的有病的人，被預測有病的比例 Specificity 特異性：所有真的沒病的人，被預測沒病的比例 Positive Predictive Value (PPV) 陽性預測值：所有被預測有病的人，真的有病的比例 Negative Predictive Value (NPV) 陰性預測值：所有被預測沒病的人，真的沒病的比例 回想一下剛剛的驗證結果 table(AdmitProb&lt;0.5,mydata[mydata$Test==T,]$admit) # row,column ## ## 1 0 ## FALSE 27 90 ## TRUE 10 6 計算預測效能參數 AdmitProb&lt;-predict(finalFit, newdata = mydata[mydata$Test==T,], #Test==T, test data type=&quot;response&quot;) #結果為每個人『不』被錄取的機率 AdmitAns&lt;-factor(ifelse(AdmitProb&lt;0.5,1,0),levels=c(1,0)) str(AdmitAns) ## Factor w/ 2 levels &quot;1&quot;,&quot;0&quot;: 2 2 2 1 2 2 2 2 2 2 ... ## - attr(*, &quot;names&quot;)= chr [1:133] &quot;2&quot; &quot;16&quot; &quot;18&quot; &quot;19&quot; ... 計算預測效能參數 library(caret) # install.packages(&quot;caret&quot;) #計算參數的packages sensitivity(AdmitAns,mydata[mydata$Test==T,]$admit) ## [1] 0.27 specificity(AdmitAns,mydata[mydata$Test==T,]$admit) ## [1] 0.94 posPredValue(AdmitAns,mydata[mydata$Test==T,]$admit) ## [1] 0.62 negPredValue(AdmitAns,mydata[mydata$Test==T,]$admit) ## [1] 0.77 9.10 Decision Trees 決策樹 阻攻/籃板/三分/助攻/抄截判斷位置-訓練 if (!require(&#39;rpart&#39;)){ install.packages(&quot;rpart&quot;); library(rpart) } DT&lt;-rpart(Position~Blocks+TotalRebounds+ThreesMade+Assists+Steals, data=NBA1516[NBA1516$Test==F,]) #訓練組 Training set #控球後衛（PG）、得分後衛（SG）、小前鋒（SF）、大前鋒（PF）和中鋒（C） DT ## n= 317 ## ## node), split, n, loss, yval, (yprob) ## * denotes terminal node ## ## 1) root 317 240 SG (0.15 0.24 0.18 0.19 0.24) ## 2) ThreesMade&lt; 2.5 89 49 C (0.45 0.37 0.067 0.056 0.056) ## 4) Blocks&gt;=17 46 15 C (0.67 0.33 0 0 0) * ## 5) Blocks&lt; 17 43 25 PF (0.21 0.42 0.14 0.12 0.12) * ## 3) ThreesMade&gt;=2.5 228 160 SG (0.039 0.18 0.23 0.24 0.31) ## 6) Assists&gt;=1.7e+02 59 24 PG (0.034 0.068 0.59 0.17 0.14) ## 12) TotalRebounds&gt;=3.6e+02 18 10 SF (0.11 0.22 0.11 0.44 0.11) * ## 13) TotalRebounds&lt; 3.6e+02 41 8 PG (0 0 0.8 0.049 0.15) * ## 7) Assists&lt; 1.7e+02 169 110 SG (0.041 0.22 0.1 0.26 0.37) ## 14) TotalRebounds&gt;=2.8e+02 37 17 PF (0.054 0.54 0 0.32 0.081) ## 28) Steals&lt; 54 20 2 PF (0 0.9 0 0.1 0) * ## 29) Steals&gt;=54 17 7 SF (0.12 0.12 0 0.59 0.18) * ## 15) TotalRebounds&lt; 2.8e+02 132 72 SG (0.038 0.14 0.13 0.24 0.45) ## 30) Assists&lt; 74 87 53 SG (0.046 0.18 0.057 0.32 0.39) ## 60) TotalRebounds&gt;=1.1e+02 31 17 SF (0.065 0.32 0 0.45 0.16) ## 120) Steals&lt; 34 20 10 PF (0.1 0.5 0 0.3 0.1) * ## 121) Steals&gt;=34 11 3 SF (0 0 0 0.73 0.27) * ## 61) TotalRebounds&lt; 1.1e+02 56 27 SG (0.036 0.11 0.089 0.25 0.52) * ## 31) Assists&gt;=74 45 19 SG (0.022 0.044 0.27 0.089 0.58) ## 62) ThreesMade&lt; 37 11 3 PG (0 0 0.73 0 0.27) * ## 63) ThreesMade&gt;=37 34 11 SG (0.029 0.059 0.12 0.12 0.68) * 阻攻/籃板/三分/助攻/抄截判斷位置-訓練 預設的plot()真的太難用，改用rpart.plot package的prp() if (!require(&#39;rpart.plot&#39;)){ install.packages(&quot;rpart.plot&quot;); library(rpart.plot) } prp(DT) # 把決策樹畫出來 阻攻/籃板/三分/助攻/抄截判斷位置-訓練 prp(DT) 有批球員沒寫守備位置？–預測 posPred&lt;-predict(DT,newdata= NBA1516[NBA1516$Test==T,]) #Test==T, test data # 預設為class probabilities, type = &quot;prob&quot; head(posPred) ## C PF PG SF SG ## 1 0.00 0.00 0.80 0.049 0.15 ## 2 0.00 0.00 0.80 0.049 0.15 ## 12 0.00 0.90 0.00 0.100 0.00 ## 13 0.21 0.42 0.14 0.116 0.12 ## 16 0.10 0.50 0.00 0.300 0.10 ## 17 0.67 0.33 0.00 0.000 0.00 有個人沒寫守備位置–對答案 result&lt;-cbind(round(posPred,digits = 2), NBA1516[NBA1516$Test==T,]$Name, as.character(NBA1516[NBA1516$Test==T,]$Position)) head(result) ## C PF PG SF SG ## 1 &quot;0&quot; &quot;0&quot; &quot;0.8&quot; &quot;0.05&quot; &quot;0.15&quot; &quot;Jose Calderon&quot; &quot;PG&quot; ## 2 &quot;0&quot; &quot;0&quot; &quot;0.8&quot; &quot;0.05&quot; &quot;0.15&quot; &quot;Eric Bledsoe&quot; &quot;PG&quot; ## 12 &quot;0&quot; &quot;0.9&quot; &quot;0&quot; &quot;0.1&quot; &quot;0&quot; &quot;Trey Lyles&quot; &quot;PF&quot; ## 13 &quot;0.21&quot; &quot;0.42&quot; &quot;0.14&quot; &quot;0.12&quot; &quot;0.12&quot; &quot;Elijah Millsap&quot; &quot;SG&quot; ## 16 &quot;0.1&quot; &quot;0.5&quot; &quot;0&quot; &quot;0.3&quot; &quot;0.1&quot; &quot;Kyle Singler&quot; &quot;SF&quot; ## 17 &quot;0.67&quot; &quot;0.33&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;Cole Aldrich&quot; &quot;C&quot; 有個人沒寫守備位置–預測-2 posPredC&lt;-predict(DT,newdata= NBA1516[NBA1516$Test==T,],type = &quot;class&quot;) # type = &quot;class&quot; 直接預測類別 head(posPredC) ## 1 2 12 13 16 17 ## PG PG PF PF PF C ## Levels: C PF PG SF SG 有個人沒寫守備位置–對答案-2 resultC&lt;-cbind(as.character(posPredC),NBA1516[NBA1516$Test==T,]$Name, as.character(NBA1516[NBA1516$Test==T,]$Position)) head(resultC) ## [,1] [,2] [,3] ## [1,] &quot;PG&quot; &quot;Jose Calderon&quot; &quot;PG&quot; ## [2,] &quot;PG&quot; &quot;Eric Bledsoe&quot; &quot;PG&quot; ## [3,] &quot;PF&quot; &quot;Trey Lyles&quot; &quot;PF&quot; ## [4,] &quot;PF&quot; &quot;Elijah Millsap&quot; &quot;SG&quot; ## [5,] &quot;PF&quot; &quot;Kyle Singler&quot; &quot;SF&quot; ## [6,] &quot;C&quot; &quot;Cole Aldrich&quot; &quot;C&quot; 9.10.1 模型驗證 Training set, Development set: 讓演算法學到知識 Test set, Validation set: 驗證學的怎麼樣 通常會比例分配 2/3的資料設為Training set 剩下的1/3做驗證Test set 訓練模型時，只能看Training set，用Training set來選一個最好的模型 訓練模型時，不能偷看Test set，才是真正的驗證 一步一步建立預測模型—範例 完整的模型建立步驟範例 - 標題：以聲波撞擊礦石的回聲預測礦石是否為礦物 - 以Sonar, Mines vs. Rocks為例 - 不要直接複製貼上，請按照自己被分配到的資料集寫作業～ 步驟1.1:讀資料 #install.packages(&quot;mlbench&quot;) # 此package內有很多dataset可練習 library(mlbench) data(Sonar) str(Sonar) #看一下資料型別，有沒有缺值，類別變項是不是factor ## &#39;data.frame&#39;: 208 obs. of 61 variables: ## $ V1 : num 0.02 0.0453 0.0262 0.01 0.0762 0.0286 0.0317 0.0519 0.0223 0.0164 ... ## $ V2 : num 0.0371 0.0523 0.0582 0.0171 0.0666 0.0453 0.0956 0.0548 0.0375 0.0173 ... ## $ V3 : num 0.0428 0.0843 0.1099 0.0623 0.0481 ... ## $ V4 : num 0.0207 0.0689 0.1083 0.0205 0.0394 ... ## $ V5 : num 0.0954 0.1183 0.0974 0.0205 0.059 ... ## $ V6 : num 0.0986 0.2583 0.228 0.0368 0.0649 ... ## $ V7 : num 0.154 0.216 0.243 0.11 0.121 ... ## $ V8 : num 0.16 0.348 0.377 0.128 0.247 ... ## $ V9 : num 0.3109 0.3337 0.5598 0.0598 0.3564 ... ## $ V10 : num 0.211 0.287 0.619 0.126 0.446 ... ## $ V11 : num 0.1609 0.4918 0.6333 0.0881 0.4152 ... ## $ V12 : num 0.158 0.655 0.706 0.199 0.395 ... ## $ V13 : num 0.2238 0.6919 0.5544 0.0184 0.4256 ... ## $ V14 : num 0.0645 0.7797 0.532 0.2261 0.4135 ... ## $ V15 : num 0.066 0.746 0.648 0.173 0.453 ... ## $ V16 : num 0.227 0.944 0.693 0.213 0.533 ... ## $ V17 : num 0.31 1 0.6759 0.0693 0.7306 ... ## $ V18 : num 0.3 0.887 0.755 0.228 0.619 ... ## $ V19 : num 0.508 0.802 0.893 0.406 0.203 ... ## $ V20 : num 0.48 0.782 0.862 0.397 0.464 ... ## $ V21 : num 0.578 0.521 0.797 0.274 0.415 ... ## $ V22 : num 0.507 0.405 0.674 0.369 0.429 ... ## $ V23 : num 0.433 0.396 0.429 0.556 0.573 ... ## $ V24 : num 0.555 0.391 0.365 0.485 0.54 ... ## $ V25 : num 0.671 0.325 0.533 0.314 0.316 ... ## $ V26 : num 0.641 0.32 0.241 0.533 0.229 ... ## $ V27 : num 0.71 0.327 0.507 0.526 0.7 ... ## $ V28 : num 0.808 0.277 0.853 0.252 1 ... ## $ V29 : num 0.679 0.442 0.604 0.209 0.726 ... ## $ V30 : num 0.386 0.203 0.851 0.356 0.472 ... ## $ V31 : num 0.131 0.379 0.851 0.626 0.51 ... ## $ V32 : num 0.26 0.295 0.504 0.734 0.546 ... ## $ V33 : num 0.512 0.198 0.186 0.612 0.288 ... ## $ V34 : num 0.7547 0.2341 0.2709 0.3497 0.0981 ... ## $ V35 : num 0.854 0.131 0.423 0.395 0.195 ... ## $ V36 : num 0.851 0.418 0.304 0.301 0.418 ... ## $ V37 : num 0.669 0.384 0.612 0.541 0.46 ... ## $ V38 : num 0.61 0.106 0.676 0.881 0.322 ... ## $ V39 : num 0.494 0.184 0.537 0.986 0.283 ... ## $ V40 : num 0.274 0.197 0.472 0.917 0.243 ... ## $ V41 : num 0.051 0.167 0.465 0.612 0.198 ... ## $ V42 : num 0.2834 0.0583 0.2587 0.5006 0.2444 ... ## $ V43 : num 0.282 0.14 0.213 0.321 0.185 ... ## $ V44 : num 0.4256 0.1628 0.2222 0.3202 0.0841 ... ## $ V45 : num 0.2641 0.0621 0.2111 0.4295 0.0692 ... ## $ V46 : num 0.1386 0.0203 0.0176 0.3654 0.0528 ... ## $ V47 : num 0.1051 0.053 0.1348 0.2655 0.0357 ... ## $ V48 : num 0.1343 0.0742 0.0744 0.1576 0.0085 ... ## $ V49 : num 0.0383 0.0409 0.013 0.0681 0.023 0.0264 0.0507 0.0285 0.0777 0.0092 ... ## $ V50 : num 0.0324 0.0061 0.0106 0.0294 0.0046 0.0081 0.0159 0.0178 0.0439 0.0198 ... ## $ V51 : num 0.0232 0.0125 0.0033 0.0241 0.0156 0.0104 0.0195 0.0052 0.0061 0.0118 ... ## $ V52 : num 0.0027 0.0084 0.0232 0.0121 0.0031 0.0045 0.0201 0.0081 0.0145 0.009 ... ## $ V53 : num 0.0065 0.0089 0.0166 0.0036 0.0054 0.0014 0.0248 0.012 0.0128 0.0223 ... ## $ V54 : num 0.0159 0.0048 0.0095 0.015 0.0105 0.0038 0.0131 0.0045 0.0145 0.0179 ... ## $ V55 : num 0.0072 0.0094 0.018 0.0085 0.011 0.0013 0.007 0.0121 0.0058 0.0084 ... ## $ V56 : num 0.0167 0.0191 0.0244 0.0073 0.0015 0.0089 0.0138 0.0097 0.0049 0.0068 ... ## $ V57 : num 0.018 0.014 0.0316 0.005 0.0072 0.0057 0.0092 0.0085 0.0065 0.0032 ... ## $ V58 : num 0.0084 0.0049 0.0164 0.0044 0.0048 0.0027 0.0143 0.0047 0.0093 0.0035 ... ## $ V59 : num 0.009 0.0052 0.0095 0.004 0.0107 0.0051 0.0036 0.0048 0.0059 0.0056 ... ## $ V60 : num 0.0032 0.0044 0.0078 0.0117 0.0094 0.0062 0.0103 0.0053 0.0022 0.004 ... ## $ Class: Factor w/ 2 levels &quot;M&quot;,&quot;R&quot;: 2 2 2 2 2 2 2 2 2 2 ... 在建立模型之前…別忘了基本的資料分析 在這次的作業內不用包含這個部分 探索性分析 Exploratory data analysis，看看資料長怎麼樣 要是有一個參數可以完美的把礦物跟石頭分開，那就不用麻煩了… 探索性分析 Exploratory data analysis library(ggplot2);library(reshape2) #install.packages(c(&quot;ggplot2&quot;,&quot;reshape2&quot;)) Sonar.m&lt;-melt(Sonar,id.vars = c(&quot;Class&quot;)) ggplot(Sonar.m)+geom_boxplot(aes(x=Class,y=value))+ facet_wrap(~variable, nrow=5,scales = &quot;free_y&quot;) #投影片太小了 步驟1.2: 資料前處理 - 缺值？ - 沒有缺值，不需要處理 - 答案種類？ - 類別變項叫Class，M: mine礦–&gt;+, R: rock–&gt;-，不需要處理 - 類別變項的型別是不是factor？ - 是，不需要處理 - 有沒有無關的參數？ - 沒有無關的參數，不需要處理 步驟2:分成訓練組與測試組 該怎麼分可以自己決定，1/3，1/5…都可以 Sonar$Test&lt;-F #新增一個參數紀錄分組 #隨機取1/3當Test set Sonar[sample(1:nrow(Sonar),nrow(Sonar)/3),]$Test&lt;-T # 看一下 Training set : Test set 案例數 c(sum(Sonar$Test==F),sum(Sonar$Test==T)) ## [1] 139 69 步驟3:訓練模型 - 注意只能用訓練組的資料，Test參數==F，忘記可以看前面範例 - 數值自變項X很多，先用迴歸好了～ - 要解釋一下模型 fit&lt;-glm(Class~., Sonar[Sonar$Test==F,],family=&quot;binomial&quot;) finalFit&lt;-stepAIC(fit,direction = &quot;both&quot;,trace = F) summary(finalFit)$coefficients ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 1628 123856 0.0131 0.99 ## V1 -8514 1141471 -0.0075 0.99 ## V2 -17266 1280789 -0.0135 0.99 ## V3 13756 955992 0.0144 0.99 ## V7 4801 387527 0.0124 0.99 ## V10 -1642 137698 -0.0119 0.99 ## V12 -4359 330775 -0.0132 0.99 ## V13 1955 187592 0.0104 0.99 ## V16 441 50558 0.0087 0.99 ## V22 -1201 111368 -0.0108 0.99 ## V24 -2156 240319 -0.0090 0.99 ## V25 2032 210573 0.0097 0.99 ## V28 -1246 86572 -0.0144 0.99 ## V31 1973 258156 0.0076 0.99 ## V32 -1448 167640 -0.0086 0.99 ## V36 1415 107357 0.0132 0.99 ## V38 460 56073 0.0082 0.99 ## V39 -1765 314966 -0.0056 1.00 ## V40 2134 267936 0.0080 0.99 ## V44 -3036 225453 -0.0135 0.99 ## V49 -17643 1252782 -0.0141 0.99 ## V50 35481 2485807 0.0143 0.99 步驟4.1:用測試組驗證模型-預測 MinePred&lt;-predict(finalFit,newdata = Sonar[Sonar$Test==T,]) MineAns&lt;-ifelse(MinePred&lt;0.5,&quot;M&quot;,&quot;R&quot;) #&lt;0.5: Level 1 MineAns&lt;-factor(MineAns,levels = c(&quot;M&quot;,&quot;R&quot;)) MineAns ## 5 8 11 20 25 27 30 32 34 35 39 40 46 47 49 54 57 58 59 60 ## R M R M R M M R M R M M M M R R R R M M ## 63 65 72 74 79 85 86 97 98 102 104 105 108 109 110 112 115 117 119 121 ## R R R M M M M R R M R M M R M R R R R R ## 122 123 125 126 130 133 134 135 136 137 141 142 149 155 162 164 167 172 174 178 ## M M M R R R R R M R R R R R R M R R M R ## 186 192 194 199 200 201 202 203 205 ## R M R M R R R M M ## Levels: M R 步驟4.2:用測試組驗證模型-效能 library(caret) # install.packages(&quot;caret&quot;) #計算參數的packages sensitivity(MineAns,Sonar[Sonar$Test==T,]$Class) ## [1] 0.89 specificity(MineAns,Sonar[Sonar$Test==T,]$Class) ## [1] 0.88 posPredValue(MineAns,Sonar[Sonar$Test==T,]$Class) ## [1] 0.83 negPredValue(MineAns,Sonar[Sonar$Test==T,]$Class) ## [1] 0.93 解釋範例 - 資料說明 此資料來源為UCI Machine Learning Repository。 記載礦物與石頭接受各個不同角度的聲波撞擊後，接收到的回聲數值，一共有60個參數，代表使用一特別角度的聲波撞擊礦石所得回聲。另外，分類結果為二元分類，包括礦物 (M) 與石頭 (R) 。 解釋範例 - 模型說明 使用聲波在不同角度撞擊礦石所得到的回聲資料，以邏輯迴歸建立模型預測礦石是否為礦物，經最佳化後，模型使用參數為V1 + V2 + V3 + V4 + V7 + V11 + V12 + V13 + V17 + V18 + V22 + V24 + V25 + V26 + V30 + V31 + V32 + V38 + V39 + V48 + V50 + V52 + V53 + V58 + V59，共25個參數，各參數代表從一特別角度所得的礦石回聲 解釋範例 - 預測效能說明 使用聲波在不同角度撞擊礦石所得到的回聲資料，以邏輯迴歸模型預測礦石是否為礦物，可得敏感度97%，特異性89%，陽性預測率89%，陰性預測率97%。 "],
["big.html", "10 從小數據到大數據分析 10.1 R + Hadoop 10.2 RHadoop安裝測試流程 (Cloudera) 10.3 RHadoop MapReduce: easy word count 10.4 R + Spark", " 10 從小數據到大數據分析 10.1 R + Hadoop 10.2 RHadoop安裝測試流程 (Cloudera) 安裝與測試日期2016/05/12 10.2.1 系統/軟體版本資訊 Cloudera Hadoop Platform: CDH-5.4.5 下載 R for Linux 3.3.0 安裝說明 RStudio Server 下載 RHadoop (latest version on May 12, 2016) 下載 ravro-1.0.3 plyrmr-0.6.0 rmr-3.3.1 rhdfs-1.0.8 rhbase-1.2.1 10.2.2 參考資料 RHadoop安裝說明文件 RHadoop安裝步驟 Setting persistent environment variable in CentOS 7 issue How to resolve “Permission denied” errors in CDH 10.2.3 安裝步驟 下載Cloudera CDH QuickStart VM Cloudera VM 安裝R 安裝說明 安裝RHadoop RHadoop安裝步驟 安裝RStudio Server 說明 10.2.3.1 Cloudera CDH QuickStart VM Cloudera CDH QuickStart VM是由Cloudera提供的虛擬機器，內涵Linux系統與預載多項Hadoop相關服務，適合想了解Hadoop運作的初學者。 下載VM後，用Virtural Box 開啟即可。 Cloudera CDH QuickStart VM下載處 Virtural Box下載處 以下安裝步驟都在Cloudera CDH QuickStart VM內進行 10.2.3.2 安裝R Cloudera CDH用的Linux作業系統是CentOS 依照安裝說明，需要先安裝Extra Packages for Enterprise Linux (EPEL)，但系統內有預載，所以可以不用按照說明重新下載安裝，直接執行sudo yum install epel-release指令即可 步驟：安裝最新EPRL，更新yum，安裝R。打開Terminal輸入以下指令。 sudo yum install epel-release sudo yum update sudo yum install R 10.2.3.3 安裝RHadoop-1 先進行環境設定 設定HADOOP_CMD與HADOOP_STREAMING兩項環境參數，路徑可能會不同（尤其是HADOOP_STREAMING） 尋找HADOOP_STREAMING路徑方法 find / -name hadoop-streaming-*.jar 設定HADOOP_CMD與HADOOP_STREAMING兩項環境參數，路徑記得換成自己的 echo export HADOOP_CMD=&quot;/usr/bin/hadoop&quot;&gt;/etc/profile.d/hadoopenv.sh echo export HADOOP_STREAMING= &quot;/opt/cloudera/parcels/CDH-5.4.5-1.cdh5.4.5.p0.7/lib/hadoop-mapreduce/ hadoop-streaming-2.6.0-cdh5.4.5.jar&quot; &gt; /etc/profile.d/hadoopenv.sh chmod 0755 /etc/profile.d/hadoopenv.sh 10.2.3.4 安裝RHadoop-2 rmr2 每個Node都要裝 安裝前先至說明檔看需要先安裝哪些其他的packages，Depends 和 Imports 所列的packages都要裝 以下為安裝packages的程式碼，在R內執行（在Terminal輸入R，就能進入R軟體） install.packages(c(&quot;methods&quot;,&quot;Rcpp&quot;, &quot;RJSONIO&quot;, &quot;digest&quot;, &quot;functional&quot;, &quot;reshape2&quot;,&quot;stringr&quot;, &quot;plyr&quot;, &quot;caTools&quot;,&quot;quickcheck&quot;,&quot;testthat&quot;), dependencies=TRUE, repos=&#39;http://cran.rstudio.com/&#39;) 使用q()指令，跳出R軟體 下載rmr2 安裝（請將rmr2_2.3.0.tar.gz替換成剛剛下載的安裝檔路徑） sudo R CMD INSTALL rmr2_2.3.0.tar.gz 10.2.3.5 安裝RHadoop-3 rhdfs 只要裝在會跑R的那個Node 在裝之前，先Check是否有安裝JDK （測試JDK 1.8.0_91沒問題） Check環境變數JAVA_HOME是否有設好 echo $JAVA_HOME 若什麼都沒有回傳，先設定環境變數（將/usr/java/jdk1.8.0_91換成自己的路徑） echo export JAVA_HOME=&quot;/usr/java/jdk1.8.0_91&quot;&gt;/etc/profile.d/jdkenv.sh 為了讓R可以跑JAVA，在Terminal輸入 R CMD javareconf 然後進到R程式（在Terminal輸入R，就能進入R軟體），安裝rJava package install.packages(&quot;rJava&quot;,dependencies=TRUE, repos=&#39;http://cran.rstudio.com/&#39;){target=&quot;_blank&quot;} 最後跳出R程式，下載rhdfs，安裝rhdfs 將/usr/bin/hadoop換成自己的HADOOP_CMD路徑 rhdfs_1.0.8.tar.gz換成下載的安裝檔路徑） sudo HADOOP_CMD=/usr/bin/hadoop R CMD INSTALL rhdfs_1.0.8.tar.gz 10.2.4 測試前，先解決權限問題 預設hdfs的存取權限不足，所以要打開 將user01改為自己的使用者名稱 sudo -u hdfs hadoop fs -mkdir /user/user01 sudo -u hdfs hadoop fs -chown user01 /user/user01 10.2.5 測試 進入R測試以下程式碼是否能執行 Sys.setenv(HADOOP_CMD=&quot;/usr/bin/hadoop&quot;) Sys.setenv(HADOOP_STREAMING=&quot;/opt/cloudera/parcels/CDH-5.4.5-1.cdh5.4.5.p0.7/lib/hadoop-mapreduce/hadoop-streaming-2.6.0-cdh5.4.5.jar&quot;) library(rmr2) #test mapreduce small.ints = to.dfs(1:100) out&lt;-mapreduce( input = small.ints, map = function(., v) cbind(v, v^2)) head(from.dfs(out)) 10.2.6 安裝RStudio Server 官方下載與安裝說明 在Terminal執行以下程式碼 檔案連結https://download2.rstudio.org/rstudio-server-rhel-0.99.896-x86_64.rpm可能有最新版，請Check官網 wget https://download2.rstudio.org/rstudio-server-rhel-0.99.896-x86_64.rpm sudo yum install --nogpgcheck rstudio-server-rhel-0.99.896-x86_64.rpm 打開瀏覽器，輸入http://localhost:8787/，就能進入RStudio Server了！ 測完收工～ 10.3 RHadoop MapReduce: easy word count Debate&lt;-readLines(&quot;https://raw.githubusercontent.com/yijutseng/BigDataCGUIM/master/RepDebateMiami.txt&quot;) DebateSplit&lt;-unlist(strsplit(tolower(Debate),split = &#39; |\\\\.|\\\\,|\\\\?&#39;)) #table(DebateSplit) DebateSplitDFS = to.dfs(DebateSplit) result = mapreduce( input = DebateSplitDFS, map = function(.,v) keyval(v, 1), reduce = function(k,vv) keyval(k, sum(vv))) head(result) 10.4 R + Spark http://spark.rstudio.com/ "],
["install.html", "11 軟體安裝介紹 11.1 R安裝 11.2 RStudio安裝 11.3 RStudio使用簡介", " 11 軟體安裝介紹 本章節將介紹R與RStudio的安裝與基本使用方式 11.1 R安裝 R語言是一種自由軟體程式語言，主要用於資料分析與統計運算，2000年時終於發表R 1.0.0，有關R語言的發展歷史可參考維基百科。 安裝步驟如下: Step 1. 從R的官網下載安裝檔 進入R官網 https://www.r-project.org/ 選擇Download下方的CRAN連結 進入CRAN子網頁後，請選擇離所在地最近的載點，以臺灣桃園為例，可選擇元智大學 ( Department of Computer Science and Engineering, Yuan Ze University) 的載點。 進入下載網頁後，可看到多個選項: Download R for Linux Download R for (Mac) OS X Download R for Windows 依作業系統選擇適當連結後，點選base (Binaries for base distribution)，下載最新版本的R安裝檔。 Step 2. 依安裝檔指示完成安裝 11.2 RStudio安裝 RStudio是R語言的IDE，屬於免費自由軟體，提供一般桌面板與伺服器版，以下介紹桌面板安裝方式，伺服器版安裝可參考Chapter 10。 Step 1. 從RStudio的官網下載安裝檔 進入RStudio官網 https://www.rstudio.com/ 選擇網頁上方Products連結內的RStudio 選擇Desktop版本 點選Open Source Edition下方的DOWNLOAD RSTUDIO DESKTOP 點選RStudio Desktop Open Source License下方的DOWNLOAD 選單中會出現多種作業系統版本，以RStudio 1.0.136為例，各作業系統版本如下 RStudio 1.0.136 - Windows Vista/7/8/10 RStudio 1.0.136 - Mac OS X 10.6+ (64-bit) RStudio 1.0.136 - Ubuntu 12.04+/Debian 8+ (32-bit) RStudio 1.0.136 - Ubuntu 12.04+/Debian 8+ (64-bit) RStudio 1.0.136 - Fedora 19+/RedHat 7+/openSUSE 13.1+ (32-bit) RStudio 1.0.136 - Fedora 19+/RedHat 7+/openSUSE 13.1+ (64-bit) 依作業系統選擇適當連結 Step 2. 依安裝檔指示完成安裝 11.3 RStudio使用簡介 11.3.1 專案 RStudio引進專案(Project)的概念，幫助使用者管理同一專案之R程式碼檔案，同時完成工作路徑的設定 (設定為專案所在資料夾)。除快速測試外，建議一開始就以專案形式新增R程式碼。 以本課程為例，開啟RStudio視窗後，可在左上File選項中選擇New Project後，依需求選擇New Directory或Existing Directory 若選擇的是New Directory，則會出現下列三個選項 Empty Project R Package Shiny Web Application 若是新增一般分析專案，選擇Empty Project後，輸入專案路徑與專案名稱，完成專案新增。 完成專案新增後，在專案內新增R程式碼檔案(File -&gt; New file -&gt; R Script)後，程式碼編輯區 Source editor就會出現在左上角。 11.3.2 RStudio介面 RStudio的介面共有四個區塊，分別為 程式碼編輯區 Source editor 執行視窗 Console 環境/物件 檔案/圖表/說明文件 剛開啟一個新的RStudio視窗時不會有程式碼編輯區 Source editor，必須要新增專案後才會出現。 建議使用方式如下: 在左上方程式碼編輯區 Source editor撰寫程式碼 完成程式碼撰寫後，將需要執行的程式碼反白，點選Run (見下圖)，執行程式碼 除了反白外，將游標移至需要執行的程式碼，，點選Run (見下圖)也可執行該行程式碼 程式碼會在左下方Console視窗執行，顯示結果 如果有畫圖，會出現在右下方視窗 可在右上方視窗檢查所有變數 RStudio的其他使用細節，可參考RStudio IDE Cheat Sheet "],
["author.html", "作者資訊", " 作者資訊 曾意儒 Yi-Ju Tseng 長庚大學 資訊管理學系 助理教授 個人網站 Lab: 數位健康實驗室 歡迎提供建議與回饋 "],
["references.html", "References", " References "]
]
